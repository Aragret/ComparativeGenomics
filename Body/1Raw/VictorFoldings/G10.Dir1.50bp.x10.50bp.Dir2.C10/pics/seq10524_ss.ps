%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACxxxxxxxxxxCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[221.62474060 194.60565186]
[209.54475403 185.71330261]
[197.46476746 176.82095337]
[185.38478088 167.92860413]
[173.30479431 159.03625488]
[161.22479248 150.14390564]
[149.14480591 141.25155640]
[137.06481934 132.35920715]
[124.98483276 123.46686554]
[112.90484619 114.57450867]
[123.58787537 125.10413361]
[127.88883972 139.47430420]
[124.74722290 154.14161682]
[114.93767548 165.48942566]
[100.87903595 170.71958923]
[86.03787231 168.54244995]
[74.07371521 159.49485779]
[67.93669128 145.80775452]
[69.14005280 130.85609436]
[77.38707733 118.32666779]
[90.64303589 111.30925751]
[76.51823425 116.35800934]
[62.39343262 121.40676880]
[48.26862717 126.45552826]
[45.59318924 141.57960510]
[35.70187378 153.32937622]
[21.25539398 158.54425049]
[6.13978052 155.82141113]
[-5.57894135 145.89331055]
[-10.74849510 131.43055725]
[-7.97829676 116.32355499]
[1.98648500 104.63600922]
[16.46537399 99.51181793]
[31.56361961 102.32935333]
[43.21987152 112.33071899]
[57.34467697 107.28196716]
[71.46947479 102.23320770]
[85.59428406 97.18445587]
[91.94141388 83.59350586]
[86.74599457 69.52198029]
[81.55058289 55.45046234]
[76.35516357 41.37894440]
[61.73330688 44.81128311]
[46.80047989 46.42070007]
[31.78305435 46.18280792]
[16.90869522 44.10120392]
[2.40289426 40.20744705]
[-11.51444626 34.56056976]
[-24.63234329 27.24617004]
[-36.75193024 18.37513733]
[-47.68947983 8.08195496]
[-57.27917862 -3.47733855]
[-65.37565613 -16.12750435]
[-71.85616302 -29.67677307]
[-76.62245941 -43.91973495]
[-79.60229492 -58.64047623]
[-80.75048828 -73.61582947]
[-80.04963684 -88.61878204]
[-77.51036835 -103.42187500]
[-73.17116547 -117.80071259]
[-67.09782410 -131.53730774]
[-59.38241196 -144.42343140]
[-50.14188385 -156.26371765]
[-39.51633072 -166.87866211]
[-27.66683197 -176.10737610]
[-14.77302170 -183.80992126]
[-1.03036845 -189.86955261]
[13.35279369 -194.19439697]
[28.15841866 -196.71888733]
[43.16205978 -197.40476990]
[58.13626099 -196.24162292]
[72.85401917 -193.24710083]
[87.09221649 -188.46658325]
[100.63500977 -181.97256470]
[113.27709198 -173.86346436]
[124.82680511 -164.26222229]
[135.10906982 -153.31440735]
[143.96800232 -141.18597412]
[151.26930237 -128.06079102]
[156.90228271 -114.13781738]
[160.78155518 -99.62813568]
[162.84831238 -84.75170898]
[163.07122803 -69.73405457]
[161.44689941 -54.80283737]
[157.99996948 -40.18441391]
[152.78268433 -26.10039330]
[145.87414551 -12.76428795]
[137.37908936 -0.37826803]
[127.42627716 10.86989689]
[116.16661072 20.80968857]
[103.77077484 29.29042053]
[90.42668152 36.18352890]
[95.62210083 50.25504684]
[100.81751251 64.32656860]
[106.01293182 78.39808655]
[121.79719543 102.49452209]
[133.87718201 111.38687134]
[145.95716858 120.27922058]
[158.03715515 129.17156982]
[170.11714172 138.06391907]
[182.19714355 146.95626831]
[194.27713013 155.84861755]
[206.35711670 164.74096680]
[218.43710327 173.63331604]
[230.51708984 182.52566528]
[239.04072571 183.28927612]
[244.72067261 188.45231628]
[259.53842163 190.78341675]
[274.35620117 193.11451721]
[289.17395020 195.44561768]
[304.01513672 197.62245178]
[318.87820435 199.64479065]
[333.74124146 201.66712952]
[346.16790771 191.90222168]
[361.84957886 193.86730957]
[371.48254395 206.39653015]
[369.35177612 222.05651855]
[356.72140503 231.55648804]
[341.08480835 229.26026917]
[331.71890259 216.53016663]
[316.85586548 214.50784302]
[301.99282837 212.48550415]
[294.89514160 214.71450806]
[286.84283447 210.26338196]
[272.02508545 207.93228149]
[257.20733643 205.60116577]
[242.38957214 203.27006531]
[253.93765259 212.84303284]
[262.91458130 224.86030579]
[268.81817627 238.64970398]
[271.31829834 253.43988037]
[270.27502441 268.40356445]
[265.74673462 282.70373535]
[257.98672485 295.54046631]
[247.42906189 306.19580078]
[234.66430664 314.07366943]
[220.40643311 318.73342896]
[205.45300293 319.91442871]
[190.64042664 317.55062866]
[176.79725647 311.77420044]
[164.69784546 302.90832520]
[155.01895142 291.44885254]
[148.30200195 278.03683472]
[144.92268372 263.42245483]
[145.07003784 248.42317200]
[148.73583984 233.87800598]
[155.71499634 220.60054016]
[165.61717224 209.33345032]
[177.88844299 200.70700073]
[191.84242249 195.20368958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[21 38]
[22 37]
[23 36]
[24 35]
[39 95]
[40 94]
[41 93]
[42 92]
[107 127]
[108 126]
[109 125]
[110 124]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
