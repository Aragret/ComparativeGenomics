%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCxxxxxxxxxxGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[204.13693237 299.07791138]
[202.57934570 284.15899658]
[201.02177429 269.24008179]
[199.46418762 254.32118225]
[197.90660095 239.40226746]
[192.56509399 225.38555908]
[183.79888916 213.21371460]
[175.03268433 201.04188538]
[166.26647949 188.87004089]
[157.50025940 176.69821167]
[148.73405457 164.52636719]
[139.96784973 152.35453796]
[126.25138092 146.54870605]
[124.46484375 130.82868958]
[115.69863892 118.65685272]
[106.93243408 106.48501587]
[108.43800354 119.25037384]
[100.24343872 132.54322815]
[82.91373444 140.62271118]
[68.89701843 145.96421814]
[58.75674438 158.10858154]
[44.10851669 155.41067505]
[30.09180260 160.75218201]
[28.33459091 175.95648193]
[19.70328522 188.59606934]
[6.18129969 195.76646423]
[-9.12411499 195.81994629]
[-22.69588661 188.74424744]
[-31.41531944 176.16528320]
[-33.27875519 160.97363281]
[-27.85798454 146.66021729]
[-16.39866638 136.51416016]
[-1.53406501 132.86694336]
[13.32004166 136.55667114]
[24.75028992 146.73547363]
[38.76700211 141.39395142]
[47.90471268 129.63166809]
[63.55550766 131.94750977]
[77.57221985 126.60599518]
[78.27337646 119.13884735]
[79.67567444 104.20453644]
[80.37683105 96.73738098]
[67.59947205 88.87995911]
[54.82211304 81.02252960]
[42.04475784 73.16510773]
[29.18635368 65.44102478]
[16.24829865 57.85111237]
[3.31024170 50.26120377]
[-13.08333492 50.68861008]
[-21.41837883 36.56561279]
[-13.12051010 22.42073822]
[3.27413440 22.80502510]
[10.90015030 37.32315063]
[23.83820534 44.91305542]
[36.77626038 52.50296402]
[44.18494034 53.17907333]
[49.90218353 60.38774872]
[62.67953873 68.24517822]
[75.45689392 76.10260010]
[88.23425293 83.96002960]
[102.25096893 78.61851501]
[106.55854797 64.25032806]
[110.86613464 49.88214493]
[115.17372131 35.51396179]
[119.33161163 21.10174561]
[123.33934784 6.64705706]
[127.34709167 -7.80763149]
[113.94580841 -14.66260624]
[102.19897461 -24.07518578]
[92.58760071 -35.65993118]
[85.50526428 -48.94245529]
[81.24198914 -63.37884521]
[79.97235870 -78.37794495]
[81.74835205 -93.32554626]
[86.49725342 -107.60955048]
[94.02458954 -120.64504242]
[104.02212524 -131.89822388]
[116.08046722 -140.90829468]
[129.70582581 -147.30627441]
[144.34027100 -150.83020020]
[159.38452148 -151.33573914]
[174.22251892 -148.80221558]
[188.24665833 -143.33335876]
[200.88265991 -135.15312195]
[211.61309814 -124.59648895]
[219.99855042 -112.09572601]
[225.69564819 -98.16274261]
[228.47109985 -83.36809540]
[228.21125793 -68.31759644]
[224.92674255 -53.62757111]
[218.75207520 -39.89955902]
[209.94009399 -27.69571495]
[198.85163879 -17.51577950]
[185.94078064 -9.77661228]
[171.73622131 -4.79512978]
[156.81961060 -2.77531934]
[141.80177307 -3.79989123]
[137.79403687 10.65479755]
[133.78630066 25.10948563]
[135.03802490 32.44289017]
[129.54190063 39.82154465]
[125.23432159 54.18973160]
[120.92673492 68.55791473]
[116.61914825 82.92610168]
[119.10427094 97.71880341]
[127.87047577 109.89064026]
[136.63668823 122.06247711]
[150.98017883 128.73892212]
[152.13969421 143.58833313]
[160.90589905 155.76016235]
[169.67210388 167.93200684]
[178.43830872 180.10383606]
[187.20451355 192.27568054]
[195.97071838 204.44750977]
[204.73693848 216.61935425]
[203.58959961 201.66328430]
[205.85726929 186.83569336]
[211.42224121 172.90618896]
[219.99566650 160.59780884]
[231.13253784 150.54940796]
[244.25477600 143.28259277]
[258.68127441 139.17451477]
[273.66320801 138.43841553]
[288.42291260 141.11251831]
[302.19430542 147.05801392]
[314.26254272 155.96629333]
[324.00125122 167.37496948]
[330.90487671 180.69186401]
[334.61514282 195.22575378]
[334.93945312 210.22224426]
[331.86093140 224.90293884]
[325.53939819 238.50581360]
[316.30300903 250.32481384]
[304.63113403 259.74645996]
[291.12963867 266.28170776]
[276.49929810 269.59136963]
[261.49957275 269.50360107]
[246.90898132 266.02301025]
[233.48486328 259.33023071]
[221.92402649 249.77265930]
[212.82551575 237.84468079]
[214.38310242 252.76359558]
[215.94068909 267.68252563]
[217.49826050 282.60140991]
[219.05584717 297.52032471]
[231.48750305 307.27890015]
[233.29469299 322.97952271]
[223.40525818 335.30731201]
[207.68640137 336.94839478]
[195.46385193 326.92916870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[4 142]
[5 141]
[6 115]
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[14 107]
[15 106]
[16 105]
[19 39]
[20 38]
[22 36]
[23 35]
[42 60]
[43 59]
[44 58]
[45 57]
[46 55]
[47 54]
[48 53]
[61 104]
[62 103]
[63 102]
[64 101]
[65 99]
[66 98]
[67 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
