%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGxxxxxxxxxxCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.72912598 261.05755615]
[122.72912598 246.05757141]
[122.72912598 231.05757141]
[122.72912598 216.05757141]
[122.72912598 201.05757141]
[122.72912598 186.05757141]
[122.72912598 171.05757141]
[122.72912598 156.05757141]
[122.72912598 141.05757141]
[122.72912598 126.05757141]
[115.96702576 122.81348419]
[95.68074036 113.08123779]
[83.98111725 122.46839905]
[72.28149414 131.85556030]
[76.56663513 146.44000244]
[74.93939209 161.55358887]
[67.64791107 174.89161682]
[55.80408478 184.42010498]
[41.21401596 188.68606567]
[26.10258484 187.03894043]
[12.77416897 179.72991943]
[3.26126003 167.87356567]
[-0.98549449 153.27789307]
[0.68150520 138.16864014]
[8.00805378 124.84985352]
[19.87690544 115.35255432]
[34.47814560 111.12500000]
[49.58519363 112.81187439]
[62.89433289 120.15593719]
[74.59395599 110.76877594]
[86.29357910 101.38161469]
[93.74848938 88.36530304]
[95.92533112 73.52410126]
[98.10216522 58.68289566]
[100.27899933 43.84169006]
[85.39495850 38.18241882]
[72.13059235 29.38438034]
[61.13716507 17.88308144]
[52.95363235 4.24666500]
[47.98025894 -10.85215759]
[46.45903015 -26.66928864]
[48.46187592 -42.42591858]
[53.88728333 -57.34686661]
[62.46543503 -70.69873047]
[73.77162170 -81.82592773]
[87.24726868 -90.18286896]
[102.22754669 -95.36074066]
[117.97414398 -97.10746765]
[119.53172302 -112.02638245]
[106.78967285 -118.46385193]
[97.03856659 -128.84956360]
[91.43977356 -141.91667175]
[90.64988708 -156.08076477]
[94.74374390 -169.63208008]
[103.20790863 -180.94177246]
[115.00492859 -188.65779114]
[128.70048523 -191.86647034]
[130.56809998 -206.74975586]
[132.43571472 -221.63304138]
[126.47683716 -236.28918457]
[135.73857117 -247.95405579]
[137.60618591 -262.83734131]
[139.47380066 -277.72061157]
[140.25364685 -292.70034790]
[139.94158936 -307.69708252]
[139.62953186 -322.69384766]
[125.20237732 -327.29122925]
[113.05118561 -336.32598877]
[104.49401855 -348.81814575]
[100.45909882 -363.41259766]
[101.38410187 -378.52627563]
[107.16869354 -392.51974487]
[117.18540192 -403.87509155]
[130.34768677 -411.36059570]
[145.22781372 -414.16430664]
[160.21168518 -411.98202515]
[173.67396545 -405.05053711]
[184.15437317 -394.12167358]
[190.51606750 -380.38095093]
[192.06898499 -365.31884766]
[188.64466858 -350.56918335]
[180.61454773 -337.73187256]
[168.84971619 -328.19946289]
[154.62628174 -323.00588989]
[154.93833923 -308.00915527]
[155.25039673 -293.01239014]
[165.91613770 -303.55950928]
[180.85084534 -304.95770264]
[193.28892517 -296.57354736]
[197.59580994 -282.20513916]
[191.82046509 -268.36154175]
[178.57914734 -261.31402588]
[163.87031555 -264.25518799]
[154.35708618 -275.85299683]
[152.48947144 -260.96972656]
[150.62185669 -246.08644104]
[156.71430969 -232.49485779]
[147.31898499 -219.76542664]
[145.45137024 -204.88214111]
[143.58375549 -189.99887085]
[157.45187378 -182.39227295]
[167.37353516 -170.02444458]
[171.81286621 -154.76286316]
[170.06465149 -138.92648315]
[162.36621094 -124.93334198]
[149.86561584 -114.93140411]
[134.45063782 -110.46880341]
[132.89305115 -95.54988861]
[146.36602783 -91.28557587]
[158.73995972 -84.44908905]
[169.52928162 -75.30637360]
[178.31010437 -64.21394348]
[184.73696899 -51.60493851]
[188.55635071 -37.97222900]
[189.61671448 -23.84916878]
[187.87449646 -9.78870392]
[183.39588928 3.65826607]
[176.35435486 15.96447372]
[167.02391052 26.64695740]
[155.76840210 35.28601837]
[143.02738953 41.54170227]
[129.29895020 45.16719055]
[115.12020874 46.01852417]
[112.94337463 60.85972977]
[110.76653290 75.70093536]
[108.58969879 90.54214478]
[117.61530304 78.56139374]
[126.42906189 66.42394257]
[138.85720825 58.02505875]
[153.40611267 54.37411880]
[168.32728577 55.90990067]
[181.82748413 62.44783020]
[192.28425598 73.20217896]
[198.44090271 86.88047028]
[199.55749512 101.83885193]
[195.49986267 116.27961731]
[186.75564575 128.46725464]
[174.37571716 136.93705750]
[159.84791565 140.67111206]
[144.92050171 139.22131348]
[137.72912598 126.05757141]
[137.72912598 141.05757141]
[137.72912598 156.05757141]
[137.72912598 171.05757141]
[137.72912598 186.05757141]
[137.72912598 201.05757141]
[137.72912598 216.05757141]
[137.72912598 231.05757141]
[137.72912598 246.05757141]
[137.72912598 261.05755615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 31]
[13 30]
[14 29]
[32 126]
[33 125]
[34 124]
[35 123]
[48 108]
[49 107]
[57 100]
[58 99]
[59 98]
[61 96]
[62 95]
[63 94]
[64 86]
[65 85]
[66 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
