%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUxxxxxxxxxxUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.66123962 558.92736816]
[85.66123962 543.92736816]
[85.66123962 528.92736816]
[85.66123962 513.92736816]
[85.66123962 498.92739868]
[85.66123962 483.92739868]
[85.66123962 468.92739868]
[85.66123962 453.92739868]
[85.66123962 438.92739868]
[85.66123962 423.92739868]
[70.20256042 420.78372192]
[55.71736145 414.52239990]
[42.82723618 405.40966797]
[32.08583832 393.83422852]
[23.95509720 380.29049683]
[18.78534698 365.35775757]
[16.80023766 349.67514038]
[18.08705902 333.91439819]
[22.59290123 318.75103760]
[30.12683487 304.83554077]
[40.36798859 292.76519775]
[52.87923050 283.05874634]
[67.12580872 276.13385010]
[82.49821472 272.28927612]
[81.87423706 257.30227661]
[81.25025940 242.31524658]
[67.51357269 236.50415039]
[57.62149429 225.25888062]
[53.57627487 210.77450562]
[56.23184967 195.90950012]
[65.11423492 183.62170410]
[78.50506592 176.37966919]
[77.88108826 161.39265442]
[77.25711060 146.40563965]
[76.63313293 131.41862488]
[66.53448486 120.32730103]
[51.67143631 118.30496979]
[40.21894836 128.95271301]
[24.59905052 129.69621277]
[12.18698025 120.18440247]
[8.84333801 104.90847015]
[16.14688873 91.08124542]
[30.64912033 85.23152161]
[45.50252151 90.12135315]
[53.69377136 103.44191742]
[68.55681610 105.46425629]
[70.10025024 93.17878723]
[76.06575012 82.88932037]
[85.18266296 76.03591156]
[95.77850342 73.40443420]
[97.64611053 58.52115250]
[99.51372528 43.63787079]
[101.38134003 28.75459099]
[99.29611969 23.82798576]
[99.34857178 19.07934189]
[101.10085297 15.30691528]
[103.85791779 13.01212215]
[106.65023804 -1.72568369]
[109.44256592 -16.46348953]
[112.23489380 -31.20129585]
[98.06705475 -36.21855927]
[84.83119965 -43.33983231]
[72.83758545 -52.39818192]
[62.36736298 -63.18126297]
[53.66596985 -75.43630981]
[46.93737793 -88.87604523]
[42.33931351 -103.18541718]
[39.97956085 -118.02900696]
[39.91344452 -133.05883789]
[42.14250183 -147.92262268]
[46.61449051 -162.27189636]
[53.22457886 -175.77030945]
[61.81781006 -188.10144043]
[72.19275665 -198.97622681]
[84.10620880 -208.13973999]
[97.27890015 -215.37719727]
[111.40203857 -220.51892090]
[126.14456177 -223.44438171]
[141.16088867 -224.08502197]
[156.09901428 -222.42579651]
[170.60874939 -218.50563049]
[184.34999084 -212.41639709]
[197.00061035 -204.30082703]
[208.26406860 -194.34919739]
[217.87631226 -182.79475403]
[225.61204529 -169.90837097]
[231.28990173 -155.99211121]
[234.77680969 -141.37219238]
[235.99102783 -126.39133453]
[234.90406799 -111.40070343]
[231.54144287 -96.75170898]
[225.98196411 -82.78773499]
[218.35594177 -69.83612061]
[208.84216309 -58.20046997]
[197.66362000 -48.15354156]
[185.08238220 -39.93084717]
[171.39334106 -33.72513962]
[156.91741943 -29.68189049]
[141.99392700 -27.89587975]
[126.97269440 -28.40897179]
[124.18037415 -13.67116547]
[121.38804626 1.06664073]
[118.59572601 15.80444717]
[116.26461792 30.62220573]
[114.39700317 45.50548553]
[112.52939606 60.38876343]
[110.66178131 75.27204132]
[120.50262451 81.46203613]
[127.03154755 91.44474792]
[128.84901428 103.53958130]
[125.37551117 115.58171844]
[117.00170135 125.30960083]
[105.06078339 130.78901672]
[91.62014771 130.79464722]
[92.24412537 145.78166199]
[92.86810303 160.76867676]
[93.49208069 175.75569153]
[107.43856049 181.85954285]
[117.31163025 193.36647034]
[121.19367218 207.95928955]
[118.36646271 222.72979736]
[109.44337463 234.75842285]
[96.23728180 241.69126892]
[96.86125946 256.67828369]
[97.48523712 271.66531372]
[111.58966827 273.81777954]
[125.04562378 278.54885864]
[137.38616943 285.69271851]
[148.18341064 294.99975586]
[157.06327820 306.14544678]
[163.71855164 318.74163818]
[167.91941833 332.35000610]
[169.52148438 346.49728394]
[168.47067261 360.69186401]
[164.80506897 374.44073486]
[158.65354919 387.26669312]
[150.23126221 398.72482300]
[139.83206177 408.41806030]
[127.81831360 416.01080322]
[114.60820770 421.24066162]
[100.66123962 423.92739868]
[100.66123962 438.92739868]
[100.66123962 453.92739868]
[100.66123962 468.92739868]
[100.66123962 483.92739868]
[100.66123962 498.92739868]
[100.66123962 513.92736816]
[100.66123962 528.92736816]
[100.66123962 543.92736816]
[100.66123962 558.92736816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 125]
[25 124]
[26 123]
[32 117]
[33 116]
[34 115]
[35 114]
[36 46]
[37 45]
[50 107]
[51 106]
[52 105]
[53 104]
[57 103]
[58 102]
[59 101]
[60 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
