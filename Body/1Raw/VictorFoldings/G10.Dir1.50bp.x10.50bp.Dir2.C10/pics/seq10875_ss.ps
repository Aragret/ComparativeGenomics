%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAxxxxxxxxxxAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.54141235 90.42497253]
[153.28968811 77.89344025]
[140.29930115 85.39344025]
[127.30892181 92.89344025]
[114.31854248 100.39344025]
[107.16197205 112.40489960]
[93.18145752 112.59693909]
[80.19107819 120.09693909]
[67.20069885 127.59693909]
[54.21031570 135.09693909]
[41.21993637 142.59693909]
[28.22955513 150.09693909]
[29.10512543 169.22590637]
[20.24906158 186.11265564]
[4.15241671 196.18298340]
[-14.74519539 196.75566101]
[-31.27996826 187.75585938]
[-43.61125183 196.29631042]
[-55.94253540 204.83677673]
[-68.27381897 213.37722778]
[-70.85111237 228.96995544]
[-83.74772644 238.10520935]
[-99.31233215 235.36320496]
[-108.31072235 222.37072754]
[-105.40431976 206.83598328]
[-92.31742859 197.97546387]
[-76.81427765 201.04594421]
[-64.48299408 192.50549316]
[-52.15171051 183.96502686]
[-39.82042694 175.42457581]
[-42.55612183 164.58174133]
[-41.82966232 153.39595032]
[-37.69482803 142.94834900]
[-30.53560829 134.25373840]
[-21.03060722 128.16209412]
[-10.08874226 125.27539062]
[1.23766017 125.88823700]
[11.85407734 129.95783997]
[20.72955513 137.10655212]
[33.71993637 129.60655212]
[46.71031570 122.10655975]
[59.70069885 114.60655975]
[72.69107819 107.10655975]
[85.68145752 99.60655975]
[92.83802795 87.59510040]
[106.81854248 87.40306091]
[119.80892181 79.90306091]
[132.79930115 72.40306091]
[145.78968811 64.90306091]
[139.06292725 51.49108124]
[133.13487244 37.70743942]
[128.02598572 23.59965324]
[123.75384521 9.21635342]
[120.33319092 -5.39287710]
[117.77581787 -20.17767715]
[116.09054565 -35.08708191]
[115.28317261 -50.06969452]
[115.35649109 -65.07386017]
[116.31024170 -80.04786682]
[118.14114380 -94.94009399]
[120.84287262 -109.69919586]
[124.40612793 -124.27429962]
[128.81863403 -138.61515808]
[134.06515503 -152.67234802]
[140.12760925 -166.39739990]
[146.98512268 -179.74299622]
[154.61402893 -192.66314697]
[162.98805237 -205.11329651]
[172.07830811 -217.05053711]
[181.85346985 -228.43371582]
[192.27983093 -239.22358704]
[203.32145691 -249.38296509]
[214.94027710 -258.87683105]
[227.09625244 -267.67245483]
[239.74746704 -275.73950195]
[252.85031128 -283.05017090]
[266.35961914 -289.57925415]
[280.22882080 -295.30426025]
[294.41012573 -300.20544434]
[308.85458374 -304.26593018]
[323.51248169 -307.47167969]
[338.33325195 -309.81167603]
[353.26577759 -311.27783203]
[368.25863647 -311.86511230]
[383.26010132 -311.57147217]
[398.21850586 -310.39794922]
[413.08221436 -308.34857178]
[427.80007935 -305.43038940]
[442.32128906 -301.65350342]
[456.59579468 -297.03091431]
[470.57443237 -291.57852173]
[484.20898438 -285.31518555]
[497.45245361 -278.26245117]
[510.25918579 -270.44464111]
[522.58502197 -261.88870239]
[534.38751221 -252.62413025]
[545.62591553 -242.68287659]
[556.26153564 -232.09919739]
[566.25769043 -220.90957642]
[575.57989502 -209.15260315]
[584.19604492 -196.86877441]
[592.07647705 -184.10047913]
[599.19390869 -170.89169312]
[605.52392578 -157.28796387]
[611.04467773 -143.33618164]
[615.73712158 -129.08445740]
[619.58502197 -114.58191681]
[622.57519531 -99.87853241]
[624.69732666 -85.02500916]
[625.94403076 -70.07254791]
[626.31109619 -55.07269287]
[625.79724121 -40.07714462]
[624.40417480 -25.13760567]
[622.13671875 -10.30556870]
[619.00280762 4.36783218]
[615.01306152 18.83201599]
[610.18133545 33.03712082]
[604.52429199 46.93418121]
[598.06140137 60.47528839]
[590.81494141 73.61376190]
[582.80993652 86.30431366]
[574.07391357 98.50319672]
[564.63708496 110.16835022]
[554.53186035 121.25957489]
[543.79315186 131.73863220]
[532.45794678 141.56938171]
[520.56536865 150.71797180]
[508.15634155 159.15281677]
[495.27368164 166.84487915]
[481.96179199 173.76763916]
[468.26660156 179.89721680]
[454.23526001 185.21247864]
[439.91616821 189.69511414]
[425.35867310 193.32968140]
[410.61297607 196.10362244]
[395.72988892 198.00740051]
[380.76074219 199.03442383]
[365.75711060 199.18118286]
[350.77072144 198.44715881]
[335.85324097 196.83488464]
[321.05609131 194.34991455]
[306.43029785 191.00082397]
[292.02627563 186.79913330]
[277.89364624 181.75935364]
[264.08114624 175.89884949]
[250.63639832 169.23782349]
[237.60575867 161.79922485]
[225.03411865 153.60871887]
[212.96482849 144.69451904]
[201.43949890 135.08737183]
[190.49786377 124.82038879]
[180.17762756 113.92896271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[5 46]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[17 30]
[18 29]
[19 28]
[20 27]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
