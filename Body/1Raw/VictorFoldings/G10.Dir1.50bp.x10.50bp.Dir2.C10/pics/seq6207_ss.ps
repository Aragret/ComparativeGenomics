%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUxxxxxxxxxxACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-35.78288651 128.95336914]
[-50.60064316 131.28446960]
[-65.41840363 133.61557007]
[-80.23616028 135.94668579]
[-95.05391693 138.27778625]
[-107.48399353 148.06571960]
[-121.25907135 142.40032959]
[-136.07682800 144.73143005]
[-150.89457703 147.06254578]
[-165.71234131 149.39364624]
[-168.17939758 164.34506226]
[-177.37095642 177.45581055]
[-192.07707214 185.72314453]
[-209.76911926 186.88404846]
[-227.02906799 179.97868347]
[-239.46850586 188.36083984]
[-251.90794373 196.74298096]
[-264.34738159 205.12512207]
[-263.20306396 220.44132996]
[-269.88458252 234.27073669]
[-282.59469604 242.89331055]
[-297.91439819 243.98962402]
[-311.72280884 237.26477051]
[-320.30551147 224.52770996]
[-321.35379028 209.20463562]
[-314.58569336 195.41737366]
[-301.82177734 186.87464905]
[-286.49551392 185.87438965]
[-272.72952271 192.68568420]
[-260.29010010 184.30354309]
[-247.85064697 175.92138672]
[-235.41120911 167.53924561]
[-236.49961853 160.11865234]
[-250.44102478 154.58352661]
[-238.67646790 145.27743530]
[-239.76487732 137.85684204]
[-254.08747864 133.40002441]
[-268.41006470 128.94320679]
[-282.73266602 124.48638916]
[-297.10086060 120.17881012]
[-311.51306152 116.02091980]
[-325.22531128 123.87905884]
[-340.45574951 119.65901947]
[-348.16848755 105.86447144]
[-343.78765869 90.67948914]
[-329.91232300 83.11303711]
[-314.77450562 87.65416718]
[-307.35519409 101.60870361]
[-292.94296265 105.76659393]
[-285.59695435 104.59121704]
[-278.27584839 110.16379547]
[-263.95324707 114.62061310]
[-249.63066101 119.07742310]
[-235.30805969 123.53424072]
[-216.74501038 110.31963348]
[-195.33062744 108.90268707]
[-177.53799438 118.33287048]
[-168.04344177 134.57588196]
[-153.22569275 132.24478149]
[-138.40792847 129.91368103]
[-123.59017181 127.58257294]
[-112.21995544 117.96137238]
[-97.38502502 123.46002960]
[-82.56726074 121.12892151]
[-67.74950409 118.79782104]
[-52.93174744 116.46671295]
[-38.11399078 114.13561249]
[-38.69642258 93.78775787]
[-36.29720306 73.57345581]
[-30.96790695 53.92726517]
[-22.82310486 35.27153015]
[-12.03788757 18.00730896]
[1.15588510 2.50574160]
[16.47457886 -10.89992523]
[33.58887482 -21.92149925]
[52.13085938 -30.32204247]
[71.70191956 -35.92096329]
[91.88131714 -38.59789658]
[112.23525238 -38.29529190]
[132.32615662 -35.01966095]
[151.72212219 -28.84141731]
[170.00619507 -19.89338112]
[178.25848389 -32.41934204]
[186.51077271 -44.94530487]
[194.76306152 -57.47126770]
[203.01535034 -69.99723053]
[199.58627319 -85.42503357]
[208.14102173 -98.71381378]
[223.60421753 -101.97958374]
[236.80181885 -93.28481293]
[239.90391541 -77.78795624]
[231.07009888 -64.68302155]
[215.54130554 -61.74494171]
[207.28901672 -49.21897888]
[199.03672791 -36.69301605]
[190.78443909 -24.16705513]
[182.53215027 -11.64109230]
[192.20155334 -3.79866934]
[201.12951660 4.87844372]
[209.24426270 14.32046986]
[216.48051453 24.45148277]
[222.78010559 35.19001389]
[228.09237671 46.44970703]
[232.37458801 58.14002228]
[235.59233093 70.16695404]
[237.71971130 82.43378448]
[252.67996216 81.34247589]
[267.64019775 80.25115967]
[277.78192139 68.13005066]
[293.53128052 66.81363678]
[305.54449463 77.08293152]
[306.69430542 92.84533691]
[296.29858398 104.74930573]
[280.52490234 105.73241425]
[268.73150635 95.21141052]
[253.77127075 96.30271912]
[238.81101990 97.39403534]
[238.53756714 109.09031677]
[237.28031921 120.72205353]
[235.04821777 132.20663452]
[231.85711670 143.46250916]
[227.72966003 154.40975952]
[222.69517517 164.97062683]
[216.78941345 175.07011414]
[210.05429077 184.63652039]
[202.53765869 193.60191345]
[194.29289246 201.90260315]
[185.37852478 209.47967529]
[175.85784912 216.27929688]
[165.79850769 222.25320435]
[155.27192688 227.35896301]
[144.35282898 231.56031799]
[133.11877441 234.82742310]
[121.64954376 237.13711548]
[110.02657318 238.47294617]
[98.33240509 238.82545471]
[86.65007782 238.19213867]
[75.06254578 236.57749939]
[63.65210342 233.99298096]
[52.49977493 230.45695496]
[41.68475342 225.99453735]
[31.28384399 220.63739014]
[21.37090111 214.42356873]
[12.01632118 207.39721680]
[3.28653073 199.60820007]
[-4.75647640 191.11186218]
[-12.05558586 181.96850586]
[-18.55896378 172.24307251]
[-24.22043037 162.00462341]
[-28.99978256 151.32588196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[7 61]
[8 60]
[9 59]
[10 58]
[15 32]
[16 31]
[17 30]
[18 29]
[36 54]
[37 53]
[38 52]
[39 51]
[40 49]
[41 48]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
