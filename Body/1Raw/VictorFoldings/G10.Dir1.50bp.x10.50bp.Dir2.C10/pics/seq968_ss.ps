%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAxxxxxxxxxxCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[173.57760620 469.15762329]
[173.57760620 454.15762329]
[173.57760620 439.15762329]
[173.57760620 424.15762329]
[173.57760620 409.15762329]
[173.57760620 394.15762329]
[173.57760620 379.15762329]
[173.57760620 364.15762329]
[173.57760620 349.15762329]
[173.57760620 334.15762329]
[171.40077209 319.31643677]
[160.33444214 309.34716797]
[163.78282166 293.90634155]
[159.47523499 279.53814697]
[155.16764832 265.16998291]
[150.86006165 250.80178833]
[137.87234497 247.55908203]
[128.11601257 238.23568726]
[124.22546387 225.20057678]
[127.32450867 211.84359741]
[136.70454407 201.69401550]
[132.69680786 187.23933411]
[118.70443726 182.20429993]
[110.26006317 169.74810791]
[110.77556610 154.53010559]
[120.26271820 142.39338684]
[116.25497437 127.93869019]
[103.31963348 131.40390015]
[90.40878296 129.30482483]
[79.75685120 122.26265717]
[73.10119629 111.73119354]
[71.40030670 99.70354462]
[74.70220947 88.33706665]
[82.17980957 79.56661987]
[75.83267975 65.97566223]
[69.48554993 52.38471603]
[63.13842010 38.79376221]
[56.09328461 25.55117798]
[48.36920166 12.69277573]
[40.64511490 -0.16562685]
[32.92103195 -13.02402878]
[25.19694710 -25.88243103]
[17.47286224 -38.74083328]
[9.74877644 -51.59923553]
[-4.97563553 -46.73215103]
[-20.40550423 -45.24877548]
[-35.77368546 -47.21976089]
[-50.31678391 -52.54410172]
[-63.31308746 -60.95429230]
[-74.11836243 -72.02976227]
[-82.19779205 -85.21791840]
[-87.15248108 -99.86171722]
[-88.73908997 -115.23239136]
[-86.88183594 -130.56571960]
[-81.67607880 -145.10000610]
[-73.38344574 -158.11395264]
[-62.41865921 -168.96244812]
[-70.40857697 -181.65737915]
[-78.39849091 -194.35231018]
[-93.66008759 -199.29833984]
[-99.17348480 -214.36425781]
[-90.70928192 -227.99278259]
[-74.76048279 -229.72927856]
[-63.56164551 -218.24165344]
[-65.70355988 -202.34222412]
[-57.71364594 -189.64729309]
[-49.72372818 -176.95236206]
[-36.07294464 -181.93345642]
[-21.67684555 -183.95439148]
[-7.17008638 -182.92350769]
[6.80725241 -178.88374329]
[19.63792229 -172.01084900]
[30.75476074 -162.60575867]
[39.66575623 -151.08139038]
[45.97584152 -137.94453430]
[49.40437698 -123.77355957]
[49.79766846 -109.19294739]
[47.13582230 -94.84579468]
[41.53376007 -81.36540985]
[33.23624039 -69.34739685]
[22.60717964 -59.32332230]
[30.33126450 -46.46492004]
[38.05534744 -33.60651779]
[45.77943420 -20.74811363]
[53.50351715 -7.88971186]
[61.22760391 4.96869040]
[68.95169067 17.82709312]
[75.39815521 4.28297663]
[89.95680237 0.67109245]
[101.98644257 9.63143539]
[102.69438171 24.61472130]
[91.56317139 34.66937637]
[76.72937012 32.44663239]
[83.07649994 46.03758621]
[89.42362976 59.62853622]
[95.77075958 73.21949005]
[110.78930664 73.24412537]
[124.39441681 81.54909515]
[132.13626099 96.52795410]
[146.15298462 91.18643951]
[160.16969299 85.84493256]
[166.40338135 71.32195282]
[181.11132812 65.53820801]
[195.56758118 71.92508698]
[201.19549561 86.69336700]
[194.65614319 101.08129120]
[179.82919312 106.55275726]
[165.51119995 99.86164093]
[151.49449158 105.20315552]
[137.47778320 110.54467010]
[130.70967102 123.93095398]
[134.71740723 138.38563538]
[149.09971619 143.90426636]
[157.37797546 156.68409729]
[156.55340576 171.71020508]
[147.15150452 183.23158264]
[151.15924072 197.68627930]
[167.05664062 203.37176514]
[176.36045837 217.26133728]
[175.58374023 233.79502869]
[165.22824097 246.49420166]
[169.53582764 260.86239624]
[173.84341431 275.23056030]
[178.15100098 289.59875488]
[189.52542114 300.59570312]
[185.76895142 315.00885010]
[190.15794373 300.66531372]
[199.61918640 289.02551270]
[212.76344299 281.79858398]
[227.66067505 280.04565430]
[242.12342834 284.02413940]
[254.02810669 293.14987183]
[261.62667847 306.08285522]
[263.80337524 320.92407227]
[260.23861694 335.49432373]
[251.45584106 347.65420532]
[238.74462891 355.61822510]
[223.97146606 358.21694946]
[209.30554199 355.06884766]
[196.90032959 346.63610840]
[188.57760620 334.15762329]
[188.57760620 349.15762329]
[188.57760620 364.15762329]
[188.57760620 379.15762329]
[188.57760620 394.15762329]
[188.57760620 409.15762329]
[188.57760620 424.15762329]
[188.57760620 439.15762329]
[188.57760620 454.15762329]
[188.57760620 469.15762329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[13 124]
[14 123]
[15 122]
[16 121]
[21 117]
[22 116]
[26 112]
[27 111]
[34 96]
[35 95]
[36 94]
[37 93]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[57 67]
[58 66]
[59 65]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
