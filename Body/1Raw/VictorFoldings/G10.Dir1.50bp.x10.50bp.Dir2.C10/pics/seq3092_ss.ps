%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACAxxxxxxxxxxGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-40.92773819 292.46768188]
[-53.07993317 282.95071411]
[-63.06266022 294.14648438]
[-73.04538727 305.34225464]
[-83.02811432 316.53802490]
[-93.01084137 327.73379517]
[-102.99356842 338.92956543]
[-112.97628784 350.12533569]
[-122.95901489 361.32107544]
[-132.94174194 372.51684570]
[-142.92446899 383.71261597]
[-146.33369446 399.16213989]
[-160.57888794 403.51229858]
[-170.56161499 414.70806885]
[-180.54434204 425.90380859]
[-183.34439087 442.06216431]
[-198.82913208 447.46163940]
[-211.06919861 436.54776001]
[-207.47305298 420.54779053]
[-191.74009705 415.92111206]
[-181.75737000 404.72534180]
[-171.77465820 393.52957153]
[-169.07945251 378.88082886]
[-154.12023926 373.72988892]
[-144.13751221 362.53411865]
[-134.15478516 351.33834839]
[-124.17205811 340.14260864]
[-114.18933105 328.94683838]
[-104.20660400 317.75106812]
[-94.22387695 306.55529785]
[-84.24114990 295.35952759]
[-74.25842285 284.16375732]
[-64.27569580 272.96801758]
[-74.55192566 262.59170532]
[-84.17395782 251.60603333]
[-93.10573578 240.05216980]
[-101.31378174 227.97341919]
[-108.76734161 215.41503906]
[-115.43847656 202.42410278]
[-121.30218506 189.04930115]
[-126.33648682 175.34075928]
[-130.52252197 161.34985352]
[-133.84458923 147.12901306]
[-136.29025269 132.73153687]
[-137.85032654 118.21140289]
[-138.51899719 103.62300873]
[-138.29371643 89.02103424]
[-137.17536926 74.46020508]
[-135.16812134 59.99509811]
[-132.27949524 45.67992020]
[-128.52032471 31.56832695]
[-123.90470886 17.71320534]
[-118.44992828 4.16647959]
[-112.17643738 -9.02107811]
[-105.10774231 -21.80004311]
[-97.27033234 -34.12252045]
[-88.69358826 -45.94232941]
[-79.40966034 -57.21517181]
[-69.45332336 -67.89879608]
[-58.86191177 -77.95316315]
[-47.67510605 -87.34059143]
[-35.93484116 -96.02590179]
[-23.68511581 -103.97653198]
[-10.97183800 -111.16269684]
[2.15734363 -117.55746460]
[15.65322304 -123.13685608]
[29.46522141 -127.87996674]
[43.54157257 -131.76902771]
[57.82951736 -134.78944397]
[72.27551270 -136.92991638]
[86.82541656 -138.18241882]
[101.42469025 -138.54225159]
[116.01863098 -138.00805664]
[130.55253601 -136.58186340]
[144.97192383 -134.26899719]
[159.22277832 -131.07812500]
[173.25167847 -127.02120209]
[187.00602722 -122.11344910]
[200.43431091 -116.37325287]
[213.48616028 -109.82212830]
[226.11270142 -102.48461914]
[238.26658630 -94.38823700]
[249.90226746 -85.56331635]
[260.97613525 -76.04293060]
[271.44671631 -65.86277008]
[281.27471924 -55.06098557]
[292.97433472 -64.44815063]
[304.67398071 -73.83531189]
[316.37359619 -83.22247314]
[328.07321167 -92.60963440]
[339.77285767 -101.99679565]
[351.27465820 -111.62532043]
[362.57363892 -121.49104309]
[373.87265015 -131.35676575]
[381.82699585 -146.32890320]
[398.41598511 -142.83013916]
[399.64624023 -125.92089081]
[383.73837280 -120.05776215]
[372.43936157 -110.19203949]
[361.14038086 -100.32631683]
[359.93060303 -95.64529419]
[355.72824097 -91.69921875]
[349.16000366 -90.29717255]
[337.46038818 -80.91001129]
[325.76074219 -71.52285004]
[314.06112671 -62.13568497]
[302.36151123 -52.74852371]
[290.66189575 -43.36136246]
[299.53417969 -30.73081779]
[307.57104492 -17.55292892]
[314.73886108 -3.88286686]
[321.00762939 10.22213268]
[326.35104370 24.70301628]
[330.74679565 39.49915314]
[334.17645264 54.54859543]
[336.62564087 69.78833771]
[338.08410645 85.15456390]
[338.54580688 100.58294678]
[338.00872803 116.00889587]
[336.47515869 131.36781311]
[333.95150757 146.59539795]
[330.44833374 161.62789917]
[325.98034668 176.40237427]
[320.56619263 190.85696411]
[314.22857666 204.93116760]
[306.99404907 218.56602478]
[298.89285278 231.70448303]
[289.95892334 244.29150391]
[280.22967529 256.27441406]
[269.74584961 267.60302734]
[258.55133057 278.22991943]
[246.69299316 288.11059570]
[234.22047424 297.20370483]
[221.18598938 305.47113037]
[207.64413452 312.87832642]
[193.65158081 319.39419556]
[179.26693726 324.99151611]
[164.55039978 329.64685059]
[149.56361389 333.34069824]
[134.36932373 336.05758667]
[119.03112793 337.78613281]
[103.61325073 338.51913452]
[88.18024445 338.25350952]
[72.79672241 336.99032593]
[57.52710342 334.73492432]
[42.43530655 331.49673462]
[27.58452225 327.28930664]
[13.03692818 322.13027954]
[-1.14656782 316.04122925]
[-14.90658188 309.04763794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[15 20]
[86 108]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
