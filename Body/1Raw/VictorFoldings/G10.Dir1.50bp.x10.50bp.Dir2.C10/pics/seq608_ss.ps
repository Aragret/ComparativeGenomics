%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUxxxxxxxxxxGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-75.14359283 238.24003601]
[-87.22357941 247.13238525]
[-99.30357361 256.02474976]
[-105.83044434 270.43688965]
[-120.66698456 271.75082397]
[-132.74697876 280.64318848]
[-144.82696533 289.53552246]
[-156.90695190 298.42788696]
[-168.98693848 307.32022095]
[-162.97354126 321.13278198]
[-160.18501282 335.93722534]
[-160.76119995 350.99099731]
[-164.67324829 365.53897095]
[-171.72488403 378.85147095]
[-181.56242371 390.26068115]
[-193.69242859 399.19436646]
[-207.50643921 405.20443726]
[-222.31156921 407.98937988]
[-237.36518860 407.40951538]
[-251.91221619 403.49395752]
[-265.22299194 396.43908691]
[-276.62982178 386.59878540]
[-285.56057739 374.46664429]
[-291.56729126 360.65115356]
[-294.34866333 345.84536743]
[-293.76516724 330.79187012]
[-289.84606934 316.24578857]
[-282.78799438 302.93673706]
[-272.94491577 291.53228760]
[-260.81057739 282.60446167]
[-246.99365234 276.60110474]
[-232.18717957 273.82333374]
[-217.13385010 274.41046143]
[-202.58871460 278.33309937]
[-189.28135681 285.39440918]
[-177.87928772 295.24023438]
[-165.79930115 286.34790039]
[-153.71931458 277.45553589]
[-141.63932800 268.56320190]
[-129.55934143 259.67083740]
[-123.89649963 245.89471436]
[-108.19592285 243.94474792]
[-96.11593628 235.05239868]
[-84.03594208 226.16004944]
[-92.74383545 212.40730286]
[-100.42592621 198.05628967]
[-107.04131317 183.18342590]
[-112.55480194 167.86782837]
[-116.93704987 152.19105530]
[-120.16471863 136.23649597]
[-122.22064972 120.08908081]
[-123.09388733 103.83475494]
[-122.77979279 87.56001282]
[-121.28002930 71.35148621]
[-118.60258484 55.29542923]
[-114.76170349 39.47729111]
[-109.77783203 23.98126793]
[-103.67749786 8.88982582]
[-96.49316406 -5.71671581]
[-88.26306915 -19.76061821]
[-79.03100586 -33.16713715]
[-68.84611511 -45.86492538]
[-57.76260757 -57.78639984]
[-45.83946228 -68.86811066]
[-33.14014053 -79.05108643]
[-19.73222923 -88.28112030]
[-5.68708467 -96.50910187]
[8.92053986 -103.69123840]
[24.01290131 -109.78929901]
[39.50967789 -114.77082825]
[55.32839203 -118.60932159]
[71.38485718 -121.28434753]
[87.59361267 -122.78166199]
[103.86839294 -123.09330750]
[120.12258911 -122.21761322]
[136.26968384 -120.15925598]
[152.22375488 -116.92917633]
[167.89988708 -112.54457092]
[183.21464539 -107.02877045]
[198.08651733 -100.41113281]
[212.43635559 -92.72688293]
[220.42626953 -105.42181396]
[228.28370667 -118.19917297]
[236.00778198 -131.05757141]
[243.73187256 -143.91598511]
[251.45596313 -156.77438354]
[251.19911194 -173.17152405]
[265.40805054 -181.35919189]
[279.46585083 -172.91462708]
[278.91104126 -156.52487183]
[264.31436157 -149.05029297]
[256.59027100 -136.19189453]
[248.86619568 -123.33348846]
[241.14210510 -110.47509003]
[240.38896179 -103.07384491]
[233.12120056 -97.43190002]
[225.13128662 -84.73696899]
[236.46194458 -76.53250885]
[247.25619507 -67.63412476]
[257.47161865 -58.07681656]
[267.06805420 -47.89813614]
[276.00775146 -37.13809586]
[284.25561523 -25.83899689]
[291.77920532 -14.04524994]
[298.54898071 -1.80321372]
[304.53826904 10.83898926]
[309.72357178 23.83166695]
[314.08447266 37.12374496]
[317.60388184 50.66297913]
[320.26791382 64.39614868]
[322.06613159 78.26926422]
[322.99142456 92.22779846]
[323.04022217 106.21688843]
[322.21228027 120.18154144]
[320.51086426 134.06686401]
[317.94265747 147.81826782]
[314.51776123 161.38171387]
[310.24966431 174.70388794]
[305.15509033 187.73240662]
[299.25411987 200.41607666]
[292.56988525 212.70503235]
[285.12872314 224.55094910]
[276.95986938 235.90730286]
[268.09539795 246.72941589]
[258.57019043 256.97479248]
[248.42167664 266.60308838]
[237.68974304 275.57653809]
[226.41658020 283.85983276]
[214.64649963 291.42037964]
[202.42578125 298.22851562]
[189.80242920 304.25747681]
[176.82608032 309.48352051]
[163.54776001 313.88610840]
[150.01963806 317.44796753]
[136.29489136 320.15509033]
[122.42749023 321.99682617]
[108.47192383 322.96594238]
[94.48305511 323.05862427]
[80.51587677 322.27450562]
[66.62528992 320.61666870]
[52.86588287 318.09164429]
[39.29175568 314.70932007]
[25.95625877 310.48303223]
[12.91181278 305.42938232]
[0.20969257 299.56823730]
[-12.10017204 292.92263794]
[-23.96939468 285.51867676]
[-35.35131836 277.38546753]
[-46.20120239 268.55502319]
[-56.47640228 259.06201172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[81 97]
[82 96]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
