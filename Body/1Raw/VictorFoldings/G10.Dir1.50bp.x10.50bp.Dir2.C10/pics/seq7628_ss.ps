%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCxxxxxxxxxxCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-36.90723419 255.62149048]
[-48.30487442 244.80090332]
[-58.84989548 233.14784241]
[-68.48167419 220.72929382]
[-77.14482880 207.61666870]
[-90.23798370 214.93577576]
[-98.50849152 228.42314148]
[-113.39317322 227.87959290]
[-126.48632812 235.19869995]
[-139.57948303 242.51779175]
[-152.67263794 249.83689880]
[-165.76579285 257.15600586]
[-178.85894775 264.47512817]
[-191.95210266 271.79421997]
[-205.04525757 279.11331177]
[-208.81085205 284.67459106]
[-214.04606628 287.08789062]
[-218.83883667 286.45159912]
[-232.22511292 293.21969604]
[-245.61140442 299.98782349]
[-245.26504517 315.24700928]
[-251.58151245 329.14178467]
[-263.30667114 338.91336060]
[-278.11248779 342.62152100]
[-293.05926514 339.53005981]
[-305.17926025 330.25280762]
[-312.06610107 316.63168335]
[-312.35238647 301.37127686]
[-305.98123169 287.50146484]
[-294.21768188 277.77615356]
[-279.39736938 274.12631226]
[-264.46292114 277.27661133]
[-252.37951660 286.60153198]
[-238.99322510 279.83343506]
[-225.60694885 273.06530762]
[-212.36436462 266.02017212]
[-199.27120972 258.70108032]
[-186.17805481 251.38195801]
[-173.08489990 244.06285095]
[-159.99174500 236.74374390]
[-146.89859009 229.42463684]
[-133.80543518 222.10554504]
[-120.71228027 214.78643799]
[-113.37828064 201.82257080]
[-97.55708313 201.84262085]
[-84.46392822 194.52351379]
[-90.56528473 181.52612305]
[-95.75218201 168.13751221]
[-99.99972534 154.42193604]
[-103.28753662 140.44520569]
[-105.59983826 126.27439880]
[-106.92553711 111.97750092]
[-107.25826263 97.62313080]
[-106.59642792 83.28016663]
[-104.94320679 69.01743317]
[-102.30652618 54.90337753]
[-98.69905090 41.00572205]
[-94.13807678 27.39116478]
[-88.64550781 14.12503052]
[-82.24768066 1.27098203]
[-74.97531891 -11.10929871]
[-66.86329651 -22.95640182]
[-57.95056152 -34.21347809]
[-48.27986908 -44.82650757]
[-37.89763260 -54.74456406]
[-26.85367012 -63.92005157]
[-15.20097923 -72.30894470]
[-2.99547648 -79.87097931]
[9.70426750 -86.56987762]
[22.83731079 -92.37348175]
[36.34062958 -97.25395203]
[50.14943314 -101.18786621]
[64.19744873 -104.15634918]
[78.41727448 -106.14514923]
[92.74066162 -107.14472961]
[107.09889221 -107.15029144]
[121.42304993 -106.16180420]
[135.64440918 -104.18402100]
[149.69471741 -101.22641754]
[163.50656128 -97.30319977]
[177.01365662 -92.43318939]
[190.15119934 -86.63975525]
[202.85612488 -79.95069885]
[215.06747437 -72.39811707]
[226.72666931 -64.01825714]
[237.77772522 -54.85132980]
[248.16764832 -44.94131851]
[257.84655762 -34.33578110]
[266.76800537 -23.08560944]
[274.88919067 -11.24479294]
[282.17117310 1.12985039]
[288.57894897 13.97893906]
[294.08178711 27.24081421]
[308.30856323 22.48699951]
[322.53533936 17.73318481]
[329.73892212 12.00951004]
[337.10778809 13.03180218]
[351.43038940 8.57498646]
[365.75299072 4.11817122]
[367.49188232 -11.01114559]
[375.23965454 -24.12189865]
[387.65396118 -32.94256973]
[402.58401489 -35.94492722]
[417.44302368 -32.60879517]
[429.65658569 -23.51217461]
[437.10864258 -10.23111153]
[438.50808716 4.93336868]
[433.61245728 19.35392761]
[423.26989746 30.53211784]
[409.27239990 36.53125000]
[394.04507446 36.31193924]
[380.22613525 29.91217804]
[370.20980835 18.44076920]
[355.88720703 22.89758492]
[341.56460571 27.35440063]
[327.28915405 31.95996475]
[313.06237793 36.71377945]
[298.83560181 41.46759415]
[302.69894409 56.70130157]
[305.39694214 72.18393707]
[306.91409302 87.82649231]
[307.24166870 103.53903961]
[306.37780762 119.23123169]
[304.32742310 134.81286621]
[301.10238647 150.19435120]
[296.72116089 165.28727722]
[291.20895386 180.00485229]
[284.59747314 194.26246643]
[276.92471313 207.97814941]
[268.23480225 221.07305908]
[258.57769775 233.47190857]
[248.00889587 245.10342407]
[236.58918762 255.90071106]
[224.38421631 265.80169678]
[211.46412659 274.74948120]
[197.90322876 282.69262695]
[183.77947998 289.58541870]
[169.17407227 295.38830566]
[154.17095947 300.06784058]
[138.85643005 303.59719849]
[123.31850433 305.95602417]
[107.64651489 307.13079834]
[91.93056488 307.11474609]
[76.26100922 305.90798950]
[60.72793198 303.51742554]
[45.42063522 299.95681763]
[30.42712021 295.24664307]
[15.83358669 289.41397095]
[1.72393608 282.49234009]
[-11.82071495 274.52154541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[18 35]
[19 34]
[20 33]
[93 118]
[94 117]
[95 116]
[97 115]
[98 114]
[99 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
