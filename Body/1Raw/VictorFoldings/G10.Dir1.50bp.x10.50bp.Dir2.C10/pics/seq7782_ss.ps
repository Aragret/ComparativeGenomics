%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCxxxxxxxxxxCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.68851471 418.38735962]
[115.68851471 403.38735962]
[115.68851471 388.38735962]
[115.68851471 373.38735962]
[115.68851471 358.38735962]
[115.68851471 343.38735962]
[115.68851471 328.38735962]
[115.68851471 313.38735962]
[115.68851471 298.38735962]
[115.68851471 283.38735962]
[99.76071167 279.71624756]
[85.14324951 272.38366699]
[72.66485596 261.80108643]
[63.03397751 248.56430054]
[56.79859161 233.41995239]
[54.31500626 217.22341919]
[55.72750854 200.89042664]
[60.95999527 185.34541321]
[69.72004700 171.46903992]
[81.51528931 160.04843140]
[95.68104553 151.73249817]
[111.41780090 146.99497986]
[110.48217010 132.02418518]
[95.82865906 134.14962769]
[81.36678314 129.75860596]
[69.91238403 119.43402863]
[55.50016785 123.59191132]
[41.08795166 127.74980164]
[26.67573738 131.90768433]
[13.13327122 142.10758972]
[-0.41693991 131.91798401]
[5.62338352 116.07655334]
[22.51785088 117.49547577]
[36.93006516 113.33758545]
[51.34228134 109.17969513]
[65.75450134 105.02181244]
[66.84580994 90.06156158]
[53.18956757 83.85615540]
[39.53332520 77.65074921]
[35.08428192 78.25694275]
[31.09274673 77.45774841]
[27.95328140 75.58007812]
[25.90906334 73.04726410]
[25.03334236 70.31954193]
[11.94018841 63.00043869]
[-1.15296590 55.68133545]
[-15.70668125 61.40177155]
[-30.51597786 56.37994766]
[-38.58835983 42.98701477]
[-36.11229706 27.54670525]
[-24.25690651 17.34946251]
[-8.61994457 17.21011353]
[3.41529489 27.19445229]
[6.16613960 42.58818054]
[19.25929451 49.90728378]
[32.35244751 57.22639084]
[45.73873520 63.99450684]
[59.39497375 70.19991302]
[73.05121613 76.40531921]
[84.37571716 71.83769989]
[95.40575409 71.77751923]
[96.96333313 56.85860825]
[98.52091217 41.93969727]
[100.07849121 27.02078438]
[101.63607788 12.10187244]
[103.19365692 -2.81704021]
[89.05112457 -8.05533504]
[76.65609741 -16.64684105]
[66.78771973 -28.05148697]
[60.06632996 -41.55236816]
[56.91444397 -56.30080414]
[57.53019333 -71.36970520]
[61.87486649 -85.81181335]
[69.67535400 -98.71929932]
[80.44132233 -109.28078461]
[93.49599457 -116.83235931]
[108.01875305 -120.89932251]
[123.09668732 -121.22603607]
[137.78198242 -117.79195404]
[151.15150452 -110.81294250]
[162.36485291 -100.72770691]
[170.71711731 -88.17022705]
[175.68328857 -73.92986298]
[176.95117188 -58.90177917]
[174.44110107 -44.03065491]
[168.31082153 -30.25130463]
[158.94570923 -18.42990494]
[146.93446350 -9.30956078]
[133.03210449 -3.46358418]
[118.11256409 -1.25945914]
[116.55498505 13.65945339]
[114.99740601 28.57836533]
[113.43982697 43.49727631]
[111.88224030 58.41619110]
[110.32466125 73.33509827]
[126.85726929 84.22979736]
[133.36880493 104.68485260]
[148.27070618 102.97216797]
[163.17260742 101.25947571]
[178.07450867 99.54678345]
[192.97640991 97.83409882]
[207.87831116 96.12140656]
[211.37832642 81.37265015]
[219.71421814 68.71214294]
[231.87940979 59.66868210]
[246.40486145 55.33432388]
[261.53659058 56.23246384]
[275.44735718 62.25463867]
[286.45736694 72.67364502]
[293.23709106 86.23134613]
[294.96783447 101.29056549]
[291.44067383 116.03284454]
[283.08145142 128.67797852]
[270.89962769 137.69900513]
[256.36618042 142.00657654]
[241.23614502 141.08056641]
[227.33651733 135.03276062]
[216.34573364 124.59347534]
[209.59100342 111.02330780]
[194.68910217 112.73600006]
[179.78720093 114.44869232]
[164.88529968 116.16137695]
[149.98339844 117.87406921]
[135.08149719 119.58676147]
[125.45296478 131.08856201]
[126.38859558 146.05935669]
[139.97053528 148.08181763]
[152.87924194 152.74829102]
[164.60563660 159.87248230]
[174.68768311 169.17120361]
[182.72868347 180.27561951]
[188.41276550 192.74594116]
[191.51741028 206.08874512]
[191.92207336 219.77659607]
[189.61291504 233.26884460]
[184.68322754 246.03298950]
[177.32972717 257.56567383]
[167.84460449 267.41259766]
[156.60403442 275.18634033]
[144.05316162 280.58163452]
[130.68852234 283.38735962]
[130.68852234 298.38735962]
[130.68852234 313.38735962]
[130.68852234 328.38735962]
[130.68852234 343.38735962]
[130.68852234 358.38735962]
[130.68852234 373.38735962]
[130.68852234 388.38735962]
[130.68852234 403.38735962]
[130.68852234 418.38735962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 126]
[23 125]
[26 36]
[27 35]
[28 34]
[29 33]
[37 59]
[38 58]
[39 57]
[44 56]
[45 55]
[46 54]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[102 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
