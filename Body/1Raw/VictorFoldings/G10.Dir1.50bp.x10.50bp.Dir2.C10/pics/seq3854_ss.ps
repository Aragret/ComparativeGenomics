%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUGAxxxxxxxxxxCUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.85759735 397.53927612]
[84.85759735 382.53927612]
[84.85759735 367.53927612]
[84.85759735 352.53927612]
[84.85759735 337.53927612]
[84.85759735 322.53927612]
[84.85759735 307.53927612]
[84.85759735 292.53927612]
[84.85759735 277.53927612]
[84.85759735 262.53927612]
[69.81460571 258.94125366]
[56.05538177 251.85671997]
[44.37528992 241.69049072]
[35.45061111 229.02571106]
[29.79940605 214.59033203]
[27.75142670 199.21527100]
[29.42889214 183.78662109]
[34.73919678 169.19456482]
[43.38001633 156.28201294]
[54.85650635 145.79588318]
[68.50965881 138.34394836]
[83.55411530 134.35960388]
[83.25011444 119.36268616]
[86.67656708 91.52204895]
[80.48307800 77.86039734]
[74.28958893 64.19875336]
[68.09609222 50.53709793]
[61.90260696 36.87545013]
[55.57098770 23.27726555]
[49.10188675 9.74394512]
[41.95564270 -3.44435167]
[34.15059280 -16.25376892]
[26.34554100 -29.06318665]
[18.54049110 -41.87260437]
[10.73544121 -54.68202209]
[-2.84373951 -48.27593613]
[-17.02692413 -43.34954453]
[-31.65340996 -39.95866394]
[-46.55746460 -38.14172363]
[-61.57021332 -37.91930389]
[-76.52155304 -39.29392624]
[-91.24206543 -42.25001907]
[-105.56496429 -46.75408173]
[-119.32796478 -52.75508499]
[-132.37510681 -60.18503189]
[-144.55856323 -68.95973206]
[-155.74029541 -78.97976685]
[-165.79359436 -90.13159943]
[-174.60455322 -102.28886414]
[-182.07333374 -115.31381989]
[-188.11531067 -129.05888367]
[-192.66201782 -143.36830139]
[-195.66194153 -158.07994080]
[-197.08110046 -173.02711487]
[-196.90341187 -188.04046631]
[-195.13087463 -202.94985962]
[-191.78358459 -217.58638000]
[-186.89945984 -231.78417969]
[-180.53384399 -245.38238525]
[-172.75888062 -258.22692871]
[-163.66264343 -270.17224121]
[-153.34822083 -281.08300781]
[-141.93246460 -290.83557129]
[-129.54473877 -299.31945801]
[-116.32538605 -306.43850708]
[-102.42420959 -312.11206055]
[-87.99871826 -316.27587891]
[-73.21235657 -318.88272095]
[-58.23267365 -319.90307617]
[-43.22939682 -319.32540894]
[-28.37252045 -317.15621948]
[-13.83039093 -313.42010498]
[0.23222052 -308.15939331]
[13.65597439 -301.43368530]
[26.28876877 -293.31921387]
[37.98746490 -283.90792847]
[48.61950302 -273.30642700]
[58.06442261 -261.63485718]
[66.21520233 -249.02545166]
[72.97947693 -235.62109375]
[78.28061676 -221.57368469]
[82.05855560 -207.04235840]
[84.27047729 -192.19178772]
[84.89131927 -177.19023132]
[83.91405487 -162.20767212]
[81.34974670 -147.41387939]
[77.22746277 -132.97647095]
[71.59390259 -119.05902100]
[64.51290131 -105.81925201]
[56.06469345 -93.40716553]
[46.34500504 -81.96340179]
[35.46396255 -71.61763000]
[23.54485893 -62.48707581]
[31.34990883 -49.67765427]
[39.15496063 -36.86823654]
[46.96001053 -24.05882072]
[54.76506042 -11.24940205]
[61.09529877 -24.84822845]
[75.62384033 -28.57937813]
[87.72333527 -19.71359062]
[88.54324341 -4.73601580]
[77.48381042 5.39754057]
[62.63520813 3.27484703]
[69.10430908 16.80816841]
[74.86032867 21.51431656]
[75.56425476 30.68195915]
[81.75774384 44.34360886]
[87.95123291 58.00526047]
[94.14472198 71.66690826]
[100.33821869 85.32855988]
[112.19985199 94.51014709]
[126.97779846 97.08159637]
[141.75573730 99.65304565]
[156.67802429 94.39604950]
[167.89048767 104.20064545]
[182.66842651 106.77209473]
[197.44636536 109.34354401]
[210.22619629 100.04560089]
[225.82429504 102.59016418]
[234.98660278 115.46757507]
[232.27726746 131.03790283]
[219.30371094 140.06353760]
[203.76289368 137.18974304]
[194.87492371 124.12148285]
[180.09696960 121.55004120]
[165.31903076 118.97859192]
[151.45376587 124.41951752]
[139.18429565 114.43099213]
[124.40634918 111.85954285]
[109.62840271 109.28809357]
[98.24703217 119.05867767]
[98.55103302 134.05560303]
[112.80121613 137.10227966]
[126.00367737 143.25253296]
[137.49237061 152.19239807]
[146.68856812 163.46725464]
[153.12992859 176.50495911]
[156.49383545 190.64491272]
[156.61349487 205.17147827]
[153.48623657 219.35023499]
[147.27342224 232.46507263]
[138.29220581 243.85443115]
[126.99925995 252.94458008]
[113.96762848 259.27859497]
[99.85759735 262.53927612]
[99.85759735 277.53927612]
[99.85759735 292.53927612]
[99.85759735 307.53927612]
[99.85759735 322.53927612]
[99.85759735 337.53927612]
[99.85759735 352.53927612]
[99.85759735 367.53927612]
[99.85759735 382.53927612]
[99.85759735 397.53927612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[22 132]
[23 131]
[24 110]
[25 109]
[26 108]
[27 107]
[28 106]
[29 104]
[30 103]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[111 130]
[112 129]
[113 128]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
