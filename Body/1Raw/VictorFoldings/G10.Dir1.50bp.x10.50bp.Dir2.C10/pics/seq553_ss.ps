%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAxxxxxxxxxxAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-12.75680923 249.40856934]
[-15.52040482 264.98654175]
[-29.57230568 269.92550659]
[-39.08066559 281.52682495]
[-48.58902359 293.12817383]
[-58.09738159 304.72952271]
[-67.60574341 316.33087158]
[-77.11409760 327.93218994]
[-86.62245941 339.53353882]
[-96.13081360 351.13488770]
[-105.63917542 362.73623657]
[-100.14465332 377.07867432]
[-102.57333374 392.24432373]
[-112.27191162 404.15371704]
[-126.63151550 409.60324097]
[-141.78947449 407.12704468]
[-153.66839600 397.39117432]
[-159.07289124 383.01455688]
[-156.54919434 367.86444092]
[-146.77613831 356.01608276]
[-132.38265991 350.65667725]
[-117.24051666 353.22787476]
[-107.73215485 341.62652588]
[-98.22380066 330.02517700]
[-88.71543884 318.42385864]
[-79.20708466 306.82250977]
[-69.69872284 295.22116089]
[-60.19036484 283.61981201]
[-50.68200684 272.01849365]
[-41.17364883 260.41714478]
[-39.09015274 245.66897583]
[-24.35815048 239.90020752]
[-31.75683594 232.95545959]
[-38.76830292 225.61996460]
[-45.37194443 217.91529846]
[-51.54835129 209.86407471]
[-57.27937317 201.48997498]
[-62.54817200 192.81762695]
[-67.33925629 183.87248230]
[-71.63854980 174.68083191]
[-75.43341064 165.26972961]
[-78.71269226 155.66679382]
[-81.46675873 145.90025330]
[-83.68751526 135.99882507]
[-85.36843109 125.99159241]
[-86.50457001 115.90797424]
[-87.09259033 105.77761078]
[-87.13076782 95.63026428]
[-86.61898041 85.49575806]
[-85.55874634 75.40388489]
[-83.95317841 65.38429260]
[-81.80698395 55.46643066]
[-79.12648010 45.67945099]
[-75.91954041 36.05211258]
[-72.19559479 26.61270905]
[-67.96558380 17.38898468]
[-63.24194336 8.40804482]
[-58.03854752 -0.30371636]
[-52.37069321 -8.72069550]
[-46.25503922 -16.81815529]
[-39.70955658 -24.57229996]
[-32.75348282 -31.96033859]
[-25.40726089 -38.96055984]
[-17.69247818 -45.55239105]
[-9.63181114 -51.71646118]
[-1.24894810 -57.43465042]
[7.43147516 -62.69015503]
[16.38394737 -67.46752930]
[25.58215904 -71.75273895]
[34.99907684 -75.53318024]
[44.60702515 -78.79775238]
[54.37776566 -81.53685760]
[64.28258514 -83.74243927]
[74.29238129 -85.40802765]
[84.37772369 -86.52871704]
[94.50897980 -87.10121918]
[104.65637207 -87.12385559]
[114.79007721 -86.59654999]
[124.88031769 -85.52085876]
[134.89744568 -83.89993286]
[144.81199646 -81.73855591]
[154.59486389 -79.04306030]
[164.21728516 -75.82138062]
[173.65097046 -72.08298492]
[182.86820984 -67.83885193]
[191.84190369 -63.10145187]
[200.54566956 -57.88471985]
[208.95396423 -52.20397949]
[217.04205322 -46.07593155]
[224.78614807 -39.51857758]
[235.22596741 -50.28938675]
[245.66578674 -61.06019592]
[252.34802246 -76.64172363]
[269.17044067 -74.53401947]
[271.80203247 -57.78555679]
[256.43658447 -50.62038422]
[245.99678040 -39.84957504]
[235.55696106 -29.07876587]
[256.76400757 -2.28423715]
[272.74655151 27.91913605]
[282.97192383 60.52476501]
[287.09936523 94.44599152]
[302.09854126 94.60202789]
[317.09774780 94.75806427]
[332.09692383 94.91410065]
[341.87850952 86.44210815]
[354.40817261 86.91772461]
[362.95297241 95.53710175]
[377.94567871 96.00514221]
[392.93835449 96.47318268]
[407.93106079 96.94122314]
[420.56112671 87.04873657]
[436.13616943 90.89547729]
[442.70837402 105.53055573]
[435.23608398 119.72720337]
[419.45144653 122.59495544]
[407.46301270 111.93392181]
[392.47033691 111.46588135]
[377.47763062 110.99784088]
[362.48492432 110.52979279]
[347.52957153 119.65869904]
[331.94088745 109.91328430]
[316.94171143 109.75724792]
[301.94250488 109.60121155]
[286.94332886 109.44517517]
[285.58447266 124.40129089]
[283.03100586 139.20033264]
[279.29940796 153.74705505]
[274.41363525 167.94779968]
[268.40518188 181.71116638]
[261.31271362 194.94856262]
[253.18186951 207.57478333]
[244.06500244 219.50854492]
[234.02079773 230.67303467]
[223.11390686 240.99639893]
[211.41453552 250.41215515]
[198.99800110 258.85974121]
[185.94421387 266.28472900]
[172.33720398 272.63934326]
[158.26457214 277.88272095]
[143.81687927 281.98104858]
[129.08715820 284.90795898]
[114.17018890 286.64465332]
[99.16201019 287.17990112]
[84.15923309 286.51028442]
[69.25841522 284.64010620]
[54.55547714 281.58142090]
[40.14506912 277.35391235]
[26.11994171 271.98474121]
[12.57037830 265.50854492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[90 98]
[91 97]
[92 96]
[102 125]
[103 124]
[104 123]
[105 122]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
