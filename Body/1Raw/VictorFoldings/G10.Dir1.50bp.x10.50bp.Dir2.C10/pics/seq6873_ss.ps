%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAxxxxxxxxxxCAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.79920959 406.43490601]
[95.79920959 391.43490601]
[95.79920959 376.43490601]
[95.79920959 361.43490601]
[95.79920959 346.43490601]
[95.79920959 331.43490601]
[95.79920959 316.43490601]
[95.79920959 301.43490601]
[95.79920959 286.43490601]
[95.79920959 271.43490601]
[81.79919434 267.93823242]
[69.04070282 261.17642212]
[58.27305222 251.54147339]
[50.12986755 239.59420776]
[45.09178925 226.03173828]
[43.45813751 211.64674377]
[45.32910538 197.28111267]
[50.59963989 183.77674866]
[58.96532440 171.92616272]
[69.93995667 162.42596436]
[82.88381958 155.83598328]
[97.04093933 152.54617310]
[97.35299683 137.54942322]
[97.66505432 122.55266571]
[85.31347656 114.04158020]
[71.41092682 119.67353821]
[61.75873566 132.93125916]
[45.48188019 130.93225098]
[39.32459259 115.73291016]
[49.62096405 102.96902466]
[65.77896881 105.77098083]
[79.68152618 100.13902283]
[88.69905090 88.15219116]
[90.25663757 73.23327637]
[91.81421661 58.31436539]
[93.37179565 43.39545441]
[94.77410126 28.46114731]
[96.02097321 13.51305962]
[96.95660400 -1.45773208]
[97.58058167 -16.44474792]
[98.20455933 -31.43176460]
[98.82853699 -46.41878128]
[99.45251465 -61.40579605]
[100.07649231 -76.39281464]
[100.70046997 -91.37982941]
[101.32444763 -106.36684418]
[101.94842529 -121.35385895]
[87.09485626 -123.54232025]
[72.55142975 -127.27143860]
[58.47747421 -132.50035095]
[45.02719879 -139.17176819]
[32.34797287 -147.21260071]
[20.57871437 -156.53474426]
[9.84837627 -167.03605652]
[0.27452409 -178.60147095]
[-8.03794479 -191.10429382]
[-14.99795437 -204.40753174]
[-20.52924728 -218.36541748]
[-24.57122040 -232.82501221]
[-27.07958603 -247.62791443]
[-28.02686310 -262.61190796]
[-27.40267181 -277.61285400]
[-25.21385002 -292.46636963]
[-21.48438072 -307.00970459]
[-16.25512695 -321.08352661]
[-9.58338070 -334.53366089]
[-1.54224408 -347.21267700]
[7.78018141 -358.98171997]
[18.28175354 -369.71179199]
[29.84741211 -379.28536987]
[42.35043716 -387.59753418]
[55.65383911 -394.55722046]
[69.61185455 -400.08816528]
[84.07155609 -404.12979126]
[98.87451935 -406.63778687]
[113.85854340 -407.58471680]
[128.85946655 -406.96014404]
[143.71292114 -404.77096558]
[158.25617981 -401.04113770]
[172.32987976 -395.81155396]
[185.77983093 -389.13949585]
[198.45866394 -381.09802246]
[210.22746277 -371.77532959]
[220.95729065 -361.27349854]
[230.53057861 -349.70761108]
[238.84243774 -337.20437622]
[245.80180359 -323.90081787]
[251.33242798 -309.94265747]
[255.37368774 -295.48284912]
[257.88134766 -280.67984009]
[258.82788086 -265.69577026]
[258.20297241 -250.69487000]
[256.01342773 -235.84147644]
[252.28324890 -221.29830933]
[247.05331421 -207.22473145]
[240.38090515 -193.77494812]
[232.33915710 -181.09631348]
[223.01615906 -169.32772827]
[212.51406860 -158.59815979]
[200.94795227 -149.02514648]
[188.44451904 -140.71359253]
[175.14077759 -133.75454712]
[161.18249512 -128.22427368]
[146.72259521 -124.18335724]
[131.91950989 -121.67607117]
[116.93544006 -120.72988129]
[116.31146240 -105.74286652]
[115.68748474 -90.75585175]
[115.06350708 -75.76883698]
[114.43952942 -60.78181839]
[113.81555176 -45.79480362]
[113.19157410 -30.80778694]
[112.56759644 -15.82077122]
[111.94361877 -0.83375472]
[114.50564575 3.26643014]
[114.47432709 9.03100491]
[110.96906281 14.75993443]
[109.72218323 29.70802116]
[112.31718445 36.68022537]
[108.29071045 44.95303345]
[106.73312378 59.87194824]
[105.17554474 74.79086304]
[103.61796570 89.70977020]
[109.98670197 90.25498199]
[116.17018890 94.75603485]
[119.83186340 102.91532135]
[118.98549652 113.14282227]
[112.66180420 122.86472321]
[112.34974670 137.86148071]
[112.03769684 152.85823059]
[127.05567169 157.16221619]
[140.44595337 165.18823242]
[151.30545044 176.38829041]
[158.90348816 190.00053406]
[162.73092651 205.10112000]
[162.53434753 220.66685486]
[158.33279419 235.64456177]
[150.41609192 249.02233887]
[139.32482910 259.89788818]
[125.81351471 267.53942871]
[110.79920959 271.43490601]
[110.79920959 286.43490601]
[110.79920959 301.43490601]
[110.79920959 316.43490601]
[110.79920959 331.43490601]
[110.79920959 346.43490601]
[110.79920959 361.43490601]
[110.79920959 376.43490601]
[110.79920959 391.43490601]
[110.79920959 406.43490601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 130]
[23 129]
[24 128]
[25 32]
[26 31]
[33 123]
[34 122]
[35 121]
[36 120]
[37 118]
[38 117]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[46 107]
[47 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
