%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAxxxxxxxxxxAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.02080536 306.52572632]
[120.02080536 291.52572632]
[120.02080536 276.52572632]
[120.02080536 261.52572632]
[120.02080536 246.52571106]
[120.02080536 231.52571106]
[120.02080536 216.52571106]
[120.02080536 201.52571106]
[120.02080536 186.52571106]
[120.02080536 171.52571106]
[116.92248535 156.84918213]
[110.85946655 143.12913513]
[104.79645538 129.40907288]
[97.56163025 129.69770813]
[90.47077942 128.23284912]
[83.94257355 125.10097504]
[78.36248779 120.48701477]
[74.05998230 114.66340637]
[59.56438446 118.52056122]
[45.06879044 122.37772369]
[30.57319260 126.23487854]
[23.41078949 137.01234436]
[11.20954323 139.90173340]
[0.67243135 133.87873840]
[-10.90100574 144.66604614]
[-25.09933853 140.16531372]
[-39.67204285 143.72007751]
[-47.32646179 148.82514954]
[-54.58486938 147.19384766]
[-69.22837067 150.44467163]
[-80.94364166 161.92005920]
[-96.66437531 157.25201416]
[-100.21842194 141.24261475]
[-87.94969177 130.36097717]
[-72.47919464 135.80117798]
[-57.83569717 132.55035400]
[-43.22680283 129.14736938]
[-28.65410042 125.59261322]
[-18.12300110 115.05955505]
[-2.88233066 119.30603027]
[9.09026527 106.51318359]
[26.71603394 111.73928833]
[41.21163177 107.88212585]
[55.70722580 104.02496338]
[70.20281982 100.16780853]
[71.01271820 93.09800720]
[73.47579956 86.42182922]
[77.45158386 80.52004242]
[82.71333313 75.72920990]
[88.96096039 72.32257843]
[95.83816528 70.49442291]
[102.95272064 70.34900665]
[108.14813232 56.27748871]
[113.34355164 42.20597076]
[118.53896332 28.13444901]
[117.78712463 21.46045113]
[120.19797516 16.22412872]
[124.25429535 13.59320259]
[130.03056335 -0.25001484]
[135.80683899 -14.09323215]
[133.00480652 -32.26266861]
[147.29501343 -42.40119171]
[152.78204346 -56.36157990]
[158.26908875 -70.32196808]
[156.11616516 -85.99600983]
[167.97286987 -95.01087189]
[173.45991516 -108.97126007]
[178.94694519 -122.93164825]
[166.19337463 -130.91044617]
[155.12322998 -141.09703064]
[146.11354065 -153.14445496]
[139.47119141 -166.64236450]
[135.42239380 -181.13104248]
[134.10505676 -196.11701965]
[135.56405640 -211.08985901]
[139.74971008 -225.53959656]
[146.51942444 -238.97409058]
[155.64263916 -250.93576050]
[166.80863953 -261.01718140]
[179.63708496 -268.87500000]
[193.69107056 -274.24160767]
[208.49191284 -276.93417358]
[223.53549194 -276.86099243]
[238.30943298 -274.02459717]
[252.31054688 -268.52154541]
[265.06195068 -260.53930664]
[276.12936401 -250.34974670]
[285.13580322 -238.29991150]
[291.77450562 -224.80020142]
[295.81939697 -210.31042480]
[297.13269043 -195.32409668]
[295.66964722 -180.35165405]
[291.48013306 -165.90304565]
[284.70678711 -152.47038269]
[275.58035278 -140.51116943]
[264.41162109 -130.43275452]
[251.58105469 -122.57837677]
[237.52563477 -117.21558380]
[222.72407532 -114.52700806]
[207.68051147 -114.60423279]
[192.90733337 -117.44461823]
[187.42030334 -103.48423004]
[181.93327332 -89.52383423]
[184.47865295 -74.84833527]
[172.22947693 -64.83493805]
[166.74244690 -50.87454987]
[161.25541687 -36.91416168]
[165.80278015 -25.66121864]
[161.29478455 -13.96092606]
[149.65005493 -8.31696033]
[143.87379456 5.52625751]
[138.09751892 19.36947441]
[132.61048889 33.32986450]
[127.41506958 47.40138626]
[122.21965027 61.47290421]
[117.02423859 75.54442596]
[129.78314209 99.07022858]
[118.51651001 123.34606171]
[124.57952118 137.06611633]
[130.64253235 150.78617859]
[132.59851074 135.91424561]
[138.59204102 122.16369629]
[148.15534973 110.60761261]
[160.54214478 102.14785767]
[174.78572083 97.44463348]
[189.77452087 96.86497498]
[204.33879089 100.45413208]
[217.34191895 107.93199158]
[227.76914978 118.71498108]
[234.80671692 131.96159363]
[237.90541077 146.63803101]
[236.82341003 161.59896851]
[231.64514160 175.67680359]
[222.77471924 187.77290344]
[210.90441895 196.94328308]
[196.96060181 202.47227478]
[182.03143311 203.92840576]
[167.28202820 201.19801331]
[153.86343384 194.49418640]
[142.82284546 184.34010315]
[135.02079773 171.52571106]
[135.02079773 186.52571106]
[135.02079773 201.52571106]
[135.02079773 216.52571106]
[135.02079773 231.52571106]
[135.02079773 246.52571106]
[135.02079773 261.52572632]
[135.02079773 276.52572632]
[135.02079773 291.52572632]
[135.02079773 306.52572632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 120]
[12 119]
[13 118]
[18 45]
[19 44]
[20 43]
[21 42]
[24 40]
[26 38]
[27 37]
[29 36]
[30 35]
[52 116]
[53 115]
[54 114]
[55 113]
[58 112]
[59 111]
[60 110]
[62 107]
[63 106]
[64 105]
[66 103]
[67 102]
[68 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
