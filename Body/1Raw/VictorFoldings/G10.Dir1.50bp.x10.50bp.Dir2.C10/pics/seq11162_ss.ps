%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACxxxxxxxxxxUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.81315613 219.65261841]
[63.05729675 217.48982239]
[55.45933151 214.82485962]
[48.05173874 211.66914368]
[40.86616898 208.03614807]
[32.87625504 220.73107910]
[24.88633728 233.42601013]
[16.89642143 246.12094116]
[8.90650558 258.81585693]
[0.91658896 271.51080322]
[-7.07332706 284.20571899]
[-7.15765572 300.60467529]
[-21.53385353 308.49496460]
[-35.41292191 299.75976562]
[-34.51726532 283.38510132]
[-19.76825714 276.21582031]
[-11.77834034 263.52087402]
[-3.78842449 250.82595825]
[4.20149183 238.13102722]
[12.19140816 225.43609619]
[20.18132401 212.74116516]
[28.17123985 200.04623413]
[3.19737387 176.14375305]
[-14.15013504 146.24247742]
[-22.50460625 112.69809723]
[-21.20784950 78.15332794]
[-35.78055191 74.59856415]
[-50.35325623 71.04380798]
[-64.92595673 67.48904419]
[-79.56945801 64.23822021]
[-94.27742004 61.29273605]
[-108.98538208 58.34725189]
[-120.39971924 68.69225311]
[-135.53988647 70.31356812]
[-148.57742310 62.79780579]
[-154.61711121 49.20883560]
[-169.32507324 46.26335526]
[-184.03303528 43.31787109]
[-198.74099731 40.37238693]
[-213.44895935 37.42690659]
[-228.80293274 43.18777847]
[-241.29537964 32.56372070]
[-238.07516479 16.48385239]
[-222.45494080 11.48976326]
[-210.50347900 22.71894455]
[-195.79551697 25.66442680]
[-181.08755493 28.60990906]
[-166.37959290 31.55539131]
[-151.67163086 34.50087357]
[-140.86480713 24.28566170]
[-125.93850708 22.37006760]
[-112.59027100 29.69659233]
[-106.03990173 43.63928986]
[-91.33193970 46.58477402]
[-76.62397766 49.53025436]
[-72.17545319 47.63655090]
[-66.48577881 48.56334686]
[-61.37119675 52.91633987]
[-46.79849243 56.47110367]
[-32.22579193 60.02586365]
[-17.65308762 63.58062744]
[-14.06732368 53.55362701]
[-9.62880802 43.87385178]
[-4.37072229 34.61367035]
[1.66762340 25.84230614]
[8.44108772 17.62533379]
[15.89903450 10.02418327]
[23.98570633 3.09568000]
[32.64065170 -3.10838103]
[41.79916763 -8.54161835]
[51.39278030 -13.16341400]
[61.34977722 -16.93921661]
[71.59571838 -19.84079742]
[82.05400085 -21.84646606]
[92.64644623 -22.94122696]
[103.29386902 -23.11689758]
[113.91666412 -22.37216377]
[124.43542480 -20.71259308]
[134.77149963 -18.15059090]
[144.84764099 -14.70531368]
[154.58850098 -10.40251541]
[162.04341125 -23.41882515]
[169.49832153 -36.43513489]
[176.95323181 -49.45144272]
[171.38450623 -64.06388092]
[176.56010437 -78.82013702]
[190.03628540 -86.75276184]
[205.44999695 -84.11621094]
[215.52336121 -72.15538788]
[215.50004578 -56.51782227]
[205.39105225 -44.58709717]
[189.96954346 -41.99653244]
[182.51463318 -28.98022461]
[175.05972290 -15.96391392]
[167.60481262 -2.94760466]
[177.95756531 4.65201712]
[187.46266174 13.28839111]
[196.01673889 22.86761093]
[203.52679443 33.28551865]
[209.91117859 44.42883682]
[215.10044861 56.17639923]
[219.03819275 68.40047455]
[221.68157959 80.96813965]
[223.00189209 93.74274445]
[222.98477173 106.58538055]
[237.88667297 108.29807281]
[252.78857422 110.01076508]
[267.69046021 111.72344971]
[284.37121582 103.99478149]
[298.07360840 114.91470337]
[313.00790405 116.31700897]
[327.94223022 117.71931458]
[339.95193481 107.44593048]
[355.70175171 108.75698090]
[365.84759521 120.87464142]
[364.37008667 136.60971069]
[352.14584351 146.62686157]
[336.42727661 144.98309326]
[326.53991699 132.65362549]
[311.60562134 131.25131226]
[296.67129517 129.84901428]
[287.11981201 137.33743286]
[274.62841797 136.24929810]
[265.97778320 126.62535858]
[251.07588196 124.91266632]
[236.17398071 123.19997406]
[221.27207947 121.48728943]
[219.60891724 129.36541748]
[217.43453979 137.11804199]
[214.75825500 144.71200562]
[211.59147644 152.11488342]
[207.94776917 159.29502869]
[203.84268188 166.22172546]
[199.29376221 172.86540222]
[194.32046509 179.19764709]
[188.94404602 185.19140625]
[183.18748474 190.82106018]
[177.07536316 196.06253052]
[170.63381958 200.89343262]
[163.89039612 205.29310608]
[156.87388611 209.24275208]
[149.61431885 212.72550964]
[142.14268494 215.72645569]
[134.49093628 218.23280334]
[126.69176483 220.23381042]
[118.77851868 221.72093201]
[110.78501892 222.68783569]
[102.74541473 223.13035583]
[94.69407654 223.04660034]
[86.66542053 222.43696594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[26 61]
[27 60]
[28 59]
[29 58]
[30 55]
[31 54]
[32 53]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[81 95]
[82 94]
[83 93]
[84 92]
[105 127]
[106 126]
[107 125]
[108 124]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
