%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCxxxxxxxxxxGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.81749725 281.26568604]
[96.19351959 266.27868652]
[95.56954193 251.29167175]
[94.94556427 236.30465698]
[94.32158661 221.31762695]
[93.69760895 206.33061218]
[93.07363129 191.34359741]
[92.44965363 176.35658264]
[78.32485199 171.30783081]
[68.34212494 182.50360107]
[58.35939789 193.69935608]
[48.37667084 204.89512634]
[38.39394379 216.09089661]
[28.41121864 227.28665161]
[29.56506920 243.04876709]
[19.17237854 254.95538330]
[3.39894843 255.94252014]
[-8.39712620 245.42453003]
[-9.21744347 229.64155579]
[1.42467713 217.95733643]
[17.21545410 217.30392456]
[27.19817924 206.10816956]
[37.18090439 194.91239929]
[47.16363144 183.71662903]
[57.14635849 172.52087402]
[67.12908173 161.32510376]
[59.13916779 148.63017273]
[44.72695160 152.78805542]
[30.31473732 156.94595337]
[16.77227020 167.14584351]
[3.22205973 156.95623779]
[9.26238346 141.11480713]
[26.15684891 142.53373718]
[40.56906509 138.37583923]
[54.98128128 134.21795654]
[48.62843323 113.26558685]
[50.95014572 92.86217499]
[60.52084732 76.24248505]
[74.84673309 65.63597870]
[90.91036987 61.97548294]
[90.28639221 46.98846436]
[89.66241455 32.00144958]
[88.88256836 17.02173424]
[87.94693756 2.05094337]
[87.01131439 -12.91984844]
[72.01146698 -13.58071136]
[57.16684723 -15.83224297]
[42.64565659 -19.64892960]
[28.61243057 -24.98752785]
[15.22617340 -31.78754425]
[2.63856411 -39.97193146]
[-9.00777054 -49.44795227]
[-19.58086777 -60.10823822]
[-28.96092796 -71.83200073]
[-37.04166794 -84.48639679]
[-43.73152161 -97.92804718]
[-48.95469666 -112.00463867]
[-52.65200043 -126.55668640]
[-54.78154755 -141.41929626]
[-55.31920624 -156.42405701]
[-54.25888443 -171.40097046]
[-51.61259842 -186.18032837]
[-47.41032791 -200.59465027]
[-41.69968796 -214.48065186]
[-34.54539108 -227.68095398]
[-26.02849197 -240.04600525]
[-16.24550056 -251.43569946]
[-5.30726433 -261.72097778]
[6.66227961 -270.78530884]
[19.52750587 -278.52600098]
[33.14264297 -284.85531616]
[47.35342026 -289.70153809]
[61.99881744 -293.00976562]
[76.91289520 -294.74252319]
[91.92665863 -294.88015747]
[106.86999512 -293.42114258]
[121.57358551 -290.38195801]
[135.87083435 -285.79708862]
[149.59971619 -279.71847534]
[162.60470581 -272.21496582]
[174.73841858 -263.37161255]
[185.86338806 -253.28860474]
[195.85356140 -242.08018494]
[204.59571838 -229.87335205]
[211.99082947 -216.80642700]
[217.95509338 -203.02748108]
[222.42092896 -188.69261169]
[225.33775330 -173.96426392]
[226.67247009 -159.00930786]
[226.41000366 -143.99720764]
[224.55331421 -129.09805298]
[221.12342834 -114.48066711]
[216.15921021 -100.31067657]
[209.71691895 -86.74863434]
[201.86953735 -73.94821167]
[192.70600891 -62.05444336]
[182.33012390 -51.20210266]
[170.85948181 -41.51414871]
[158.42404175 -33.10035324]
[145.16471863 -26.05605507]
[131.23171997 -20.46106911]
[116.78295135 -16.37879181]
[101.98210144 -13.85547638]
[102.91773224 1.11531484]
[103.85336304 16.08610725]
[107.43270874 22.60791016]
[104.64942932 31.37747192]
[105.27340698 46.36448669]
[105.89738464 61.35150528]
[135.64672852 72.67826843]
[150.41503906 105.64320374]
[136.16415405 143.47076416]
[150.39093018 148.22457886]
[164.61770630 152.97839355]
[178.84448242 157.73220825]
[189.84141541 147.08674622]
[204.52917480 142.78230286]
[219.53263855 145.80801392]
[231.40409851 155.46861267]
[237.41558838 169.54414368]
[236.18571472 184.80015564]
[227.99710083 197.73092651]
[214.73141479 205.36508179]
[199.43702698 205.94831848]
[185.62846375 199.34663391]
[176.47883606 187.07704163]
[174.09066772 171.95899963]
[159.86389160 167.20518494]
[145.63711548 162.45137024]
[131.41033936 157.69755554]
[125.41691589 162.20631409]
[135.62298584 173.19885254]
[145.82907104 184.19140625]
[158.55354309 192.13418579]
[159.20559692 207.12001038]
[147.21913147 216.13803101]
[133.00090027 211.35871887]
[128.89558411 196.93023682]
[121.16283417 184.07704163]
[113.43008423 171.22384644]
[107.43666840 175.73260498]
[108.06064606 190.71961975]
[108.68462372 205.70663452]
[109.30860138 220.69364929]
[109.93257904 235.68067932]
[110.55655670 250.66769409]
[111.18053436 265.65469360]
[111.80451202 280.64172363]
[118.50450134 296.21563721]
[105.39397430 306.96505737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[27 35]
[28 34]
[29 33]
[40 109]
[41 108]
[42 107]
[43 105]
[44 104]
[45 103]
[112 130]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
