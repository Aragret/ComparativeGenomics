%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAAGAACCxxxxxxxxxxGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.02255249 137.27227783]
[109.33541107 123.84535980]
[104.08410645 109.78877258]
[98.37944794 123.66165161]
[92.67478180 137.53453064]
[86.97011566 151.40740967]
[81.26545715 165.28028870]
[83.98278046 181.45274353]
[71.16516876 191.68215942]
[55.99827194 185.44537354]
[54.08449936 169.15827942]
[67.39257812 159.57563782]
[73.09723663 145.70274353]
[78.80190277 131.82986450]
[84.50656128 117.95699310]
[90.21122742 104.08410645]
[87.30375671 89.36858368]
[76.75173950 78.70767975]
[66.19972229 68.04676819]
[55.64770889 57.38586044]
[45.09569550 46.72495270]
[34.54367828 36.06404114]
[23.99166489 25.40313339]
[13.43964958 14.74222469]
[2.88763452 4.08131599]
[6.43205214 18.65653801]
[5.98820829 33.64997101]
[1.58782434 47.99000549]
[-6.45459604 60.65173721]
[-17.56424713 70.73020935]
[-30.94710541 77.50510406]
[-45.64667130 80.49219513]
[-60.61234665 79.47799683]
[-74.77450562 74.53499603]
[-87.12095642 66.01647949]
[-96.76927185 54.53127670]
[-103.02988434 40.90025330]
[-105.45532227 26.09764290]
[-103.87224579 11.18141460]
[-98.39379120 -2.78234434]
[-89.41151428 -14.79561996]
[-77.56740570 -23.99980354]
[-63.70796967 -29.73705482]
[-48.82376862 -31.59732628]
[-33.97860336 -29.44765663]
[-20.23348236 -23.44169044]
[-8.57384300 -14.01191330]
[-13.70414543 -28.10730171]
[-18.83444786 -42.20269012]
[-23.96475029 -56.29808044]
[-29.09505081 -70.39347076]
[-43.92005920 -67.85202789]
[-58.96061325 -67.99874878]
[-73.73322296 -70.82891083]
[-87.76300812 -76.25154114]
[-100.59896851 -84.09232330]
[-111.82848358 -94.09921265]
[-121.09056854 -105.95052338]
[-128.08749390 -119.26528168]
[-132.59431458 -133.61547852]
[-134.46618652 -148.53982544]
[-133.64291382 -163.55854797]
[-130.15097046 -178.18885803]
[-124.10260773 -191.96046448]
[-115.69225311 -204.43064880]
[-105.19026184 -215.19857788]
[-92.93424225 -223.91807556]
[-79.31815338 -230.30885315]
[-64.77971649 -234.16548157]
[-49.78627396 -235.36398315]
[-34.81980133 -233.86581421]
[-20.36140823 -229.71917725]
[-6.87587690 -223.05732727]
[5.20329189 -214.09443665]
[15.48780155 -203.11860657]
[23.64704895 -190.48269653]
[29.41874695 -176.59286499]
[32.61735916 -161.89562988]
[33.14006424 -146.86344910]
[30.97006035 -131.97953796]
[26.17710114 -117.72235107]
[18.91526413 -104.55020142]
[9.41798401 -92.88652039]
[-2.00943971 -83.10624695]
[-14.99966240 -75.52377319]
[-9.86935997 -61.42838287]
[-4.73905802 -47.33299255]
[0.39124417 -33.23760605]
[5.52154636 -19.14221573]
[13.54854298 -6.47069931]
[24.10055923 4.19020939]
[34.65257263 14.85111809]
[45.20458984 25.51202774]
[55.75660324 36.17293549]
[66.30861664 46.83384323]
[76.86063385 57.49475479]
[87.41265106 68.15566254]
[97.96466064 78.81657410]
[97.47540283 63.82455444]
[98.55308533 48.86331558]
[101.18595123 34.09619141]
[105.34525299 19.68438339]
[110.98559570 5.78522635]
[118.04539490 -7.44954634]
[126.44758606 -19.87545586]
[136.10044861 -31.35684776]
[146.89859009 -41.76838684]
[158.72413635 -50.99641037]
[171.44798279 -58.94017792]
[184.93125916 -65.51296997]
[199.02673340 -70.64302826]
[213.58053589 -74.27436066]
[228.43380737 -76.36731720]
[243.42437744 -76.89904785]
[258.38861084 -75.86374664]
[273.16314697 -73.27272797]
[287.58666992 -69.15425873]
[301.50173950 -63.55331421]
[314.75646973 -56.53103256]
[327.20611572 -48.16407776]
[338.71481323 -38.54378510]
[349.15689087 -27.77517891]
[358.41839600 -15.97581863]
[366.39816284 -3.27451420]
[373.00912476 10.19007683]
[378.17910767 24.27096367]
[381.85162354 38.81443024]
[383.98666382 53.66170883]
[384.56085205 68.65071869]
[383.56796265 83.61782074]
[381.01879883 98.39962006]
[376.94119263 112.83476257]
[371.37969971 126.76565552]
[364.39498901 140.04020691]
[356.06332397 152.51351929]
[346.47567749 164.04942322]
[335.73669434 174.52197266]
[323.96362305 183.81683350]
[311.28497314 191.83256531]
[297.83917236 198.48164368]
[283.77297974 203.69148254]
[269.23995972 207.40519714]
[254.39878845 209.58227539]
[239.41146851 210.19892883]
[224.44161987 209.24842834]
[209.65264893 206.74114990]
[195.20602417 202.70446777]
[181.25942993 197.18244934]
[167.96514893 190.23536682]
[155.46827698 181.93907166]
[143.90527344 172.38414001]
[133.40234375 161.67486572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
