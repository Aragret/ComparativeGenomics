%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAAxxxxxxxxxxAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-61.00877380 189.81027222]
[-74.39505768 196.57838440]
[-87.78134155 203.34649658]
[-96.60575104 216.47816467]
[-111.45494080 215.31588745]
[-124.84122467 222.08399963]
[-138.22750854 228.85211182]
[-151.61380005 235.62022400]
[-165.00007629 242.38835144]
[-178.38636780 249.15646362]
[-191.77264404 255.92457581]
[-196.55445862 267.94906616]
[-207.89576721 273.29635620]
[-219.44972229 269.57974243]
[-232.97392273 276.06790161]
[-246.49810791 282.55606079]
[-260.02230835 289.04421997]
[-273.54647827 295.53237915]
[-287.07067871 302.02056885]
[-285.86309814 317.15020752]
[-290.20626831 331.69329834]
[-299.51281738 343.68298340]
[-312.52410889 351.49777222]
[-327.48046875 354.08074951]
[-342.35916138 351.08264160]
[-355.14797974 342.90887451]
[-364.11734009 330.66488647]
[-368.05422974 316.00659180]
[-366.42617798 300.91641235]
[-359.45336914 287.43515015]
[-348.07885742 277.38604736]
[-333.84091187 272.12814331]
[-318.66513062 272.37252808]
[-304.60388184 278.08618164]
[-293.55883789 288.49636841]
[-280.03463745 282.00820923]
[-266.51046753 275.52005005]
[-252.98626709 269.03186035]
[-239.46208191 262.54370117]
[-225.93789673 256.05554199]
[-216.86590576 241.06558228]
[-198.54075623 242.53828430]
[-185.15447998 235.77017212]
[-171.76818848 229.00205994]
[-158.38191223 222.23394775]
[-144.99562073 215.46583557]
[-131.60934448 208.69772339]
[-118.22305298 201.92959595]
[-110.35612488 189.28204346]
[-94.54946136 189.96022034]
[-81.16317749 183.19209290]
[-67.77688599 176.42398071]
[-73.21697235 163.13153076]
[-77.60580444 149.45593262]
[-80.91674042 135.48017883]
[-83.12969208 121.28909302]
[-84.23123169 106.96881104]
[-84.21466064 92.60623169]
[-83.08010101 78.28852844]
[-80.83441925 64.10259247]
[-77.49124908 50.13451385]
[-73.07088470 36.46907043]
[-67.60015106 23.18919945]
[-61.11225128 10.37549210]
[-53.64656067 -1.89428198]
[-45.24838638 -13.54565907]
[-35.96869659 -24.50792694]
[-25.86381149 -34.71455383]
[-14.99505901 -44.10359573]
[-3.42839980 -52.61807251]
[8.76596737 -60.20631027]
[21.51403618 -66.82225037]
[34.73843384 -72.42575073]
[48.35890961 -76.98278809]
[62.29279327 -80.46572113]
[76.45552063 -82.85340118]
[90.76113892 -84.13134766]
[105.12283325 -84.29180145]
[119.45343018 -83.33377838]
[133.66596985 -81.26309967]
[147.67419434 -78.09233856]
[161.39306641 -73.84073639]
[174.73936462 -68.53408813]
[187.63204956 -62.20460129]
[199.99290466 -54.89069748]
[211.74690247 -46.63675690]
[222.82270813 -37.49288177]
[233.26252747 -48.26368713]
[243.70233154 -59.03449631]
[240.08815002 -74.03253937]
[245.17782593 -88.59614563]
[257.34729004 -98.07812500]
[272.71328735 -99.45281982]
[286.37258911 -92.28155518]
[293.96655273 -78.85266876]
[293.07199097 -63.45125961]
[283.97436523 -50.99187088]
[269.57666016 -45.45024109]
[254.47314453 -48.59468460]
[244.03332520 -37.82387543]
[233.59352112 -27.05306816]
[242.03912354 -17.53552246]
[249.80810547 -7.45808840]
[256.86346436 3.13122749]
[263.17163086 14.18198299]
[268.70248413 25.64153671]
[273.42971802 37.45530319]
[277.33084106 49.56700134]
[280.38720703 61.91894531]
[282.58428955 74.45228577]
[283.91162109 87.10732269]
[284.36291504 99.82377625]
[283.93594360 112.54107666]
[282.63281250 125.19863129]
[280.45968628 137.73614502]
[277.42691040 150.09390259]
[273.54898071 162.21304321]
[287.45153809 167.84500122]
[301.35409546 173.47695923]
[315.25665283 179.10891724]
[331.41464233 176.30696106]
[341.71102905 189.07084656]
[335.55374146 204.27018738]
[319.27688599 206.26919556]
[309.62469482 193.01147461]
[295.72213745 187.37951660]
[281.81958008 181.74755859]
[267.91702271 176.11560059]
[260.21719360 191.21490479]
[251.16323853 205.54327393]
[240.83168030 218.97961426]
[229.30982971 231.41033936]
[216.69506836 242.73042297]
[203.09400940 252.84414673]
[188.62162781 261.66607666]
[173.40022278 269.12161255]
[157.55844116 275.14776611]
[141.23019409 279.69357300]
[124.55346680 282.72064209]
[107.66921997 284.20339966]
[90.72016144 284.12930298]
[73.84952545 282.49893188]
[57.19991302 279.32614136]
[40.91204071 274.63769531]
[25.12357140 268.47323608]
[9.96794796 260.88485718]
[-4.42673731 251.93672180]
[-17.93882179 241.70442200]
[-30.45410538 230.27445984]
[-41.86680984 217.74343872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[5 48]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[87 101]
[88 100]
[89 99]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
