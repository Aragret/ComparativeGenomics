%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACxxxxxxxxxxAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[26.73933983 268.17385864]
[20.19146919 281.66925049]
[13.64359760 295.16464233]
[14.58067131 310.95806885]
[2.06371331 319.03118896]
[-4.48415756 332.52655029]
[-11.03202820 346.02194214]
[-17.57989883 359.51733398]
[-24.12776947 373.01272583]
[-25.60209656 389.90243530]
[-42.23989487 393.16125488]
[-49.97716904 378.07580566]
[-37.62315369 366.46484375]
[-31.07528305 352.96945190]
[-24.52741241 339.47409058]
[-17.97954178 325.97869873]
[-11.43167114 312.48330688]
[-12.83709145 297.65515137]
[0.14821392 288.61676025]
[6.69608450 275.12139893]
[13.24395466 261.62600708]
[-5.28172302 250.21762085]
[-22.32639313 236.69612122]
[-37.65028763 221.25169373]
[-51.03783798 204.10162354]
[-62.30072784 185.48713684]
[-71.28051758 165.67008972]
[-77.85088348 144.92926025]
[-81.91941071 123.55640411]
[-83.42885590 101.85217285]
[-98.42174530 101.39025116]
[-113.41462708 100.92832184]
[-128.40751648 100.46640015]
[-135.87870789 113.82453918]
[-148.70828247 122.17082214]
[-163.94810486 123.58734131]
[-178.09616089 117.74859619]
[-187.90135193 105.99627686]
[-191.11048889 91.03098297]
[-186.98616028 76.29163361]
[-176.47608948 65.16521454]
[-161.99542236 60.20850754]
[-146.87171936 62.56052017]
[-134.58027649 71.68077850]
[-127.94558716 85.47351074]
[-112.95270538 85.93544006]
[-97.95981598 86.39736176]
[-82.96693420 86.85929108]
[-80.83960724 69.23291779]
[-77.01824951 51.89476013]
[-71.53867340 35.00722885]
[-64.45219421 18.72852325]
[-55.82519531 3.21113205]
[-45.73849487 -11.39958286]
[-34.28658295 -24.96675491]
[-21.57673073 -37.36329269]
[-7.72800207 -48.47307205]
[7.12987566 -58.19202423]
[22.85771942 -66.42910004]
[39.30819702 -73.10713959]
[56.32721329 -78.16358948]
[73.75533295 -81.55107880]
[72.21804047 -96.47209167]
[70.68074799 -111.39311218]
[55.85272598 -114.32929230]
[42.54971313 -121.50712585]
[31.95460892 -132.28836060]
[25.00951958 -145.71435547]
[22.33200073 -160.59126282]
[24.16013145 -175.59623718]
[30.33135796 -189.39505005]
[40.29693985 -200.76072693]
[53.17074203 -208.68263245]
[67.80803680 -212.45635986]
[82.90728760 -211.74635315]
[97.12586975 -206.61573792]
[109.19949341 -197.52073669]
[118.05456543 -185.27005005]
[122.90370178 -170.95301819]
[123.31571960 -155.84271240]
[119.25399780 -141.28269958]
[111.07968140 -128.56767273]
[99.51963043 -118.82823181]
[85.60176849 -112.93040466]
[87.13906097 -98.00938416]
[88.67635345 -83.08837128]
[101.17669678 -83.43443298]
[113.67158508 -82.92803192]
[126.10292816 -81.57151031]
[138.41296387 -79.37117767]
[150.54449463 -76.33726501]
[162.44111633 -72.48386383]
[174.04757690 -67.82888031]
[185.30990601 -62.39395523]
[196.17578125 -56.20434189]
[206.59469604 -49.28880310]
[216.51823425 -41.67948151]
[225.90029907 -33.41173935]
[234.69725037 -24.52399445]
[242.86824036 -15.05755424]
[250.37528992 -5.05641079]
[257.18350220 5.43295717]
[263.26123047 16.36180305]
[268.58023071 27.67933846]
[273.11581421 39.33296585]
[276.84689331 51.26853180]
[279.75610352 63.43056488]
[281.82992554 75.76254272]
[283.05874634 88.20716095]
[283.43685913 100.70658112]
[282.96246338 113.20272064]
[297.86691284 114.89311981]
[312.77136230 116.58351898]
[323.14895630 105.04725647]
[338.33239746 101.84694672]
[352.48339844 108.21318054]
[360.16058350 121.69800568]
[358.41192627 137.11622620]
[347.90979004 148.53924561]
[332.69250488 151.57464600]
[318.61141968 145.05528259]
[311.08096313 131.48796082]
[296.17651367 129.79756165]
[281.27206421 128.10717773]
[279.22430420 139.09249878]
[276.51147461 149.93275452]
[273.14358521 160.58772278]
[269.13320923 171.01785278]
[264.49517822 181.18443298]
[259.24673462 191.04974365]
[253.40731812 200.57719421]
[246.99862671 209.73139954]
[240.04444885 218.47839355]
[232.57055664 226.78573608]
[224.60472107 234.62257385]
[216.17648315 241.95985413]
[207.31713867 248.77032471]
[198.05952454 255.02871704]
[188.43803406 260.71182251]
[178.48835754 265.79852295]
[168.24742126 270.26998901]
[157.75320435 274.10955811]
[147.04469299 277.30303955]
[136.16159058 279.83859253]
[125.14430237 281.70675659]
[114.03369904 282.90060425]
[102.87102509 283.41574097]
[91.69768524 283.25024414]
[80.55516815 282.40469360]
[69.48480225 280.88229370]
[58.52767563 278.68862915]
[47.72444916 275.83184814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[30 48]
[31 47]
[32 46]
[33 45]
[62 86]
[63 85]
[64 84]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
