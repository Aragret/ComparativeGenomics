%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAxxxxxxxxxxUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-53.64903641 330.33480835]
[-65.74261475 321.79162598]
[-75.04393768 333.55963135]
[-84.34526062 345.32760620]
[-93.64658356 357.09558105]
[-102.94790649 368.86355591]
[-112.24923706 380.63153076]
[-121.55056000 392.39953613]
[-130.85188293 404.16751099]
[-140.15321350 415.93548584]
[-133.42483521 429.63555908]
[-133.31561279 444.89828491]
[-139.84722900 458.69323730]
[-151.72279358 468.28143311]
[-166.58444214 471.75912476]
[-181.48136902 468.43579102]
[-193.45576477 458.97131348]
[-200.13012695 445.24484253]
[-200.17924500 429.98181152]
[-193.59336853 416.21267700]
[-181.68013000 406.67132568]
[-166.80490112 403.25219727]
[-151.92118835 406.63415527]
[-142.61985779 394.86618042]
[-133.31854248 383.09820557]
[-124.01721191 371.33023071]
[-114.71588898 359.56222534]
[-105.41456604 347.79425049]
[-96.11324310 336.02627563]
[-86.81192017 324.25830078]
[-77.51059723 312.49032593]
[-88.90750885 302.42553711]
[-99.73474121 291.75030518]
[-109.95963287 280.49679565]
[-119.55135345 268.69897461]
[-128.48097229 256.39242554]
[-136.72155762 243.61422729]
[-144.24827576 230.40293884]
[-151.03840637 216.79838562]
[-157.07148743 202.84161377]
[-162.32931519 188.57470703]
[-166.79603577 174.04067993]
[-170.45817566 159.28337097]
[-173.30470276 144.34727478]
[-175.32702637 129.27745056]
[-176.51905823 114.11932373]
[-176.87718201 98.91862488]
[-176.40032959 83.72118378]
[-175.08995056 68.57283783]
[-172.94996643 53.51926422]
[-169.98686218 38.60586166]
[-166.20954895 23.87760735]
[-161.62944031 9.37891388]
[-156.26033020 -4.84649372]
[-150.11842346 -18.75571632]
[-143.22222900 -32.30680847]
[-135.59255981 -45.45890427]
[-127.25240326 -58.17234039]
[-118.22692871 -70.40877533]
[-108.54335022 -82.13131714]
[-98.23086548 -93.30459595]
[-87.32057953 -103.89493561]
[-75.84539795 -113.87038422]
[-63.83991241 -123.20086670]
[-51.34033585 -131.85824585]
[-38.38436508 -139.81640625]
[-25.01107216 -147.05136108]
[-11.26078129 -153.54129028]
[2.82503796 -159.26660156]
[17.20390701 -164.21005249]
[31.83246422 -168.35671997]
[46.66659164 -171.69410706]
[61.66156006 -174.21215820]
[76.77214050 -175.90325928]
[91.95277405 -176.76232910]
[107.15766907 -176.78675842]
[122.34098816 -175.97648621]
[137.45692444 -174.33396912]
[152.45991516 -171.86412048]
[167.30468750 -168.57443237]
[181.94648743 -164.47479248]
[196.34117126 -159.57759094]
[210.44532776 -153.89756775]
[224.21640015 -147.45187378]
[237.61288452 -140.25993347]
[245.41793823 -153.06935120]
[253.22297668 -165.87876892]
[261.02804565 -178.68818665]
[258.65585327 -194.55490112]
[269.68701172 -206.20365906]
[285.65930176 -204.69854736]
[294.32015991 -191.19415283]
[289.02575684 -176.04988098]
[273.83746338 -170.88314819]
[266.03240967 -158.07373047]
[258.22735596 -145.26431274]
[250.42230225 -132.45489502]
[262.63381958 -124.08119965]
[274.38024902 -115.06667328]
[285.62796021 -105.43709564]
[296.34484863 -95.22000122]
[306.50018311 -84.44461823]
[316.06497192 -73.14175415]
[325.01187134 -61.34373093]
[333.31527710 -49.08429718]
[340.95141602 -36.39850998]
[347.89849854 -23.32264519]
[354.13662720 -9.89410019]
[359.64797974 3.84872246]
[364.41677856 17.86651993]
[368.42941284 32.11920547]
[371.67434692 46.56601715]
[374.14236450 61.16564178]
[375.82638550 75.87632751]
[376.72158813 90.65599823]
[376.82540894 105.46239471]
[376.13757324 120.25316620]
[374.66000366 134.98602295]
[372.39697266 149.61882019]
[369.35494995 164.10971069]
[365.54260254 178.41726685]
[360.97085571 192.50056458]
[355.65277100 206.31933594]
[349.60357666 219.83403015]
[342.84057617 233.00604248]
[335.38305664 245.79766846]
[327.25241089 258.17233276]
[318.47183228 270.09466553]
[309.06649780 281.53054810]
[299.06326294 292.44729614]
[288.49072266 302.81369019]
[277.37915039 312.60003662]
[265.76031494 321.77841187]
[253.66740417 330.32254028]
[241.13505554 338.20797729]
[228.19908142 345.41217041]
[214.89646912 351.91455078]
[201.26528931 357.69650269]
[187.34449768 362.74148560]
[173.17391968 367.03506470]
[158.79408264 370.56497192]
[144.24609375 373.32110596]
[129.57157898 375.29559326]
[114.81249237 376.48278809]
[100.01104736 376.87930298]
[85.20956421 376.48397827]
[70.45037842 375.29794312]
[55.77570343 373.32464600]
[41.22750092 370.56964111]
[26.84737968 367.04089355]
[12.67645931 362.74844360]
[-1.24473131 357.70458984]
[-14.87637901 351.92373657]
[-28.17950249 345.42242432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
