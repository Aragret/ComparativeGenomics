%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUAxxxxxxxxxxUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 465.41278076]
[92.50000000 450.41278076]
[92.50000000 435.41278076]
[92.50000000 420.41278076]
[92.50000000 405.41278076]
[92.50000000 390.41278076]
[92.50000000 375.41278076]
[92.50000000 360.41278076]
[92.50000000 345.41278076]
[92.50000000 330.41278076]
[77.84561920 327.32327271]
[64.14855957 321.25192261]
[52.00850296 312.46185303]
[41.95753098 301.33532715]
[34.43677902 288.35705566]
[29.77709579 274.09313965]
[28.18446350 259.16625977]
[29.73092079 244.22865295]
[34.35128784 229.93350220]
[41.84592056 216.90638733]
[51.88933182 205.71797180]
[64.04432678 196.85890198]
[77.78102875 190.71841431]
[92.50000000 187.56710815]
[92.50000000 172.56710815]
[92.50000000 157.56710815]
[92.50000000 142.56710815]
[92.50000000 127.56710052]
[80.54731750 120.92339325]
[73.05160522 109.48574066]
[58.09136200 110.57704926]
[43.13111115 111.66836548]
[28.17086220 112.75967407]
[16.63631439 123.91017914]
[0.74602097 121.70152283]
[-7.31034327 107.82800293]
[-1.35262549 92.93219757]
[14.04892254 88.44088745]
[27.07955170 97.79942322]
[42.03980255 96.70811462]
[57.00004959 95.61680603]
[71.96029663 94.52548981]
[77.32164764 82.62509918]
[87.41661835 74.35134125]
[100.13810730 71.43120575]
[104.14585114 56.97651672]
[108.15358734 42.52182770]
[92.73983765 31.20634460]
[82.99581146 14.79963493]
[80.44580078 -4.07173395]
[85.46522522 -22.40052795]
[97.22573853 -37.27805710]
[113.83176422 -46.35576630]
[111.65492249 -61.19697189]
[109.47808838 -76.03817749]
[107.30125427 -90.87938690]
[105.12441254 -105.72058868]
[100.37059784 -119.94737244]
[86.96999359 -128.35772705]
[87.66835785 -143.23596191]
[80.48584747 -156.40454102]
[66.21274567 -164.47984314]
[66.34020996 -180.87849426]
[80.73711395 -188.73097229]
[94.59315491 -179.95930481]
[93.65443420 -163.58705139]
[100.83694458 -150.41847229]
[113.72380829 -142.95001221]
[113.53918457 -127.12987518]
[114.43909454 -142.10285950]
[120.06725311 -156.00695801]
[129.83586121 -167.39001465]
[142.72470093 -175.06323242]
[157.38764954 -178.22518921]
[172.29331970 -176.54565430]
[185.88497925 -170.20005798]
[196.74313354 -159.85112000]
[203.73374939 -146.57966614]
[206.12672424 -131.77177429]
[203.67216492 -116.97396851]
[196.62640381 -103.73171997]
[185.72528076 -93.42803955]
[172.10734558 -87.13904572]
[157.19480896 -85.52154541]
[142.54513550 -88.74447632]
[129.68833923 -96.47123718]
[119.96562195 -107.89743042]
[122.14245605 -93.05622101]
[124.31929016 -78.21501923]
[126.49613190 -63.37380981]
[128.67297363 -48.53260422]
[135.64399719 -47.92335129]
[142.44931030 -46.29426575]
[148.94058228 -43.68086624]
[154.97625732 -40.14012527]
[160.42478943 -35.74923706]
[165.16737366 -30.60391998]
[169.10061646 -24.81635475]
[183.11732483 -30.15786743]
[197.13404846 -35.49937820]
[201.05638123 -50.51253510]
[213.07545471 -60.32688904]
[228.56968689 -61.16861725]
[241.58122253 -52.71405792]
[247.10687256 -38.21416473]
[243.02189636 -23.24444389]
[230.89706421 -13.56105232]
[215.39460754 -12.88745689]
[202.47555542 -21.48266602]
[188.45884705 -16.14115334]
[174.44213867 -10.79964161]
[175.24874878 4.05725098]
[171.40586853 18.46309662]
[163.27301025 30.99597740]
[151.63415527 40.41273499]
[137.62210083 45.77227020]
[122.60827637 46.52956772]
[118.60054016 60.98425674]
[114.59279633 75.43894958]
[125.72834015 87.58036041]
[128.30828857 103.85175323]
[121.47470093 118.84230042]
[107.50000000 127.56710052]
[107.50000000 142.56710815]
[107.50000000 157.56710815]
[107.50000000 172.56710815]
[107.50000000 187.56710815]
[122.21897125 190.71841431]
[135.95567322 196.85890198]
[148.11067200 205.71797180]
[158.15408325 216.90638733]
[165.64871216 229.93350220]
[170.26907349 244.22865295]
[171.81553650 259.16625977]
[170.22290039 274.09313965]
[165.56321716 288.35705566]
[158.04246521 301.33532715]
[147.99150085 312.46185303]
[135.85144043 321.25192261]
[122.15438080 327.32327271]
[107.50000000 330.41278076]
[107.50000000 345.41278076]
[107.50000000 360.41278076]
[107.50000000 375.41278076]
[107.50000000 390.41278076]
[107.50000000 405.41278076]
[107.50000000 420.41278076]
[107.50000000 435.41278076]
[107.50000000 450.41278076]
[107.50000000 465.41278076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[26 125]
[27 124]
[28 123]
[30 42]
[31 41]
[32 40]
[33 39]
[45 119]
[46 118]
[47 117]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 69]
[60 67]
[61 66]
[98 111]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
