%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUAxxxxxxxxxxGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.25492096 232.47370911]
[94.94286346 217.47695923]
[94.63081360 202.48020935]
[94.31875610 187.48345947]
[94.00669861 172.48669434]
[93.69464111 157.48994446]
[93.38258362 142.49319458]
[93.07052612 127.49643707]
[92.75847626 112.49968719]
[85.30356598 99.48337555]
[72.52620697 91.62595367]
[59.74884796 83.76852417]
[46.97148895 75.91110229]
[34.19413376 68.05367279]
[19.69853592 64.19651031]
[4.70584059 64.66455841]
[-10.28685570 65.13259888]
[-25.27955246 65.60063934]
[-31.18297005 68.80332184]
[-36.94137955 68.53490448]
[-40.90281677 65.76316833]
[-55.90200806 65.60713196]
[-70.90119171 65.45109558]
[-58.50949097 73.90364838]
[-50.20648575 86.39604950]
[-47.21134949 101.09397888]
[-49.96387100 115.83927155]
[-58.05988312 128.46681213]
[-70.31061554 137.12242126]
[-84.91722870 140.53515625]
[-99.73497009 138.20393372]
[-112.58807373 130.47103882]
[-121.58925629 118.47192383]
[-125.41683960 103.96849060]
[-123.50879669 89.09033966]
[-116.14529419 76.02210236]
[-104.40754700 66.68264771]
[-90.01972961 62.44340134]
[-104.34233093 57.98658371]
[-118.66492462 53.52976990]
[-133.03311157 49.22218323]
[-147.44532776 45.06429672]
[-163.22503662 49.52893448]
[-174.79112244 37.90320969]
[-170.24540710 22.14667130]
[-154.26411438 18.46829796]
[-143.28744507 30.65208054]
[-128.87522888 34.80996704]
[-121.52919769 33.63459778]
[-114.20811462 39.20717239]
[-99.88551331 43.66398621]
[-85.56291962 48.12080383]
[-70.74515533 50.45190811]
[-55.74597168 50.60794449]
[-40.74678040 50.76398087]
[-25.74759293 50.60794449]
[-10.75489712 50.13990021]
[4.23779869 49.67185974]
[19.23049545 49.20381546]
[6.25042820 41.68598175]
[-4.92271471 31.67794037]
[-13.81886292 19.60074806]
[-20.06374359 5.96251297]
[-23.39462090 -8.66298676]
[-23.67136574 -23.66043472]
[-20.88232994 -38.39886093]
[-15.14485645 -52.25820541]
[-6.70032692 -64.65538025]
[4.09598446 -75.06881714]
[16.78985977 -83.06040955]
[30.84724998 -88.29393768]
[45.67673874 -90.54921722]
[60.65442276 -89.73136902]
[75.15017700 -85.87479401]
[88.55413818 -79.14175415]
[100.30238342 -69.81551361]
[109.90064240 -58.28844452]
[116.94510651 -45.04550171]
[121.13940430 -30.64383888]
[122.30707550 -15.68935585]
[120.39898682 -0.81121027]
[115.49542236 13.36465168]
[107.80268097 26.24183083]
[97.64440918 37.27856445]
[85.44798279 46.01052094]
[71.72651672 52.07033539]
[57.05729294 55.20306015]
[42.05155945 55.27631378]
[54.82891464 63.13373947]
[67.60627747 70.99116516]
[80.38362885 78.84859467]
[93.16098785 86.70601654]
[119.86691284 80.11716461]
[134.68467712 77.78606415]
[149.50242615 75.45495605]
[164.32019043 73.12385559]
[179.13793945 70.79274750]
[193.14730835 58.88823700]
[209.26916504 65.75013733]
[224.03523254 63.11127472]
[238.60792542 59.55651474]
[252.93052673 55.09969711]
[267.25311279 50.64288330]
[281.57571411 46.18606567]
[294.90307617 35.70664215]
[308.66232300 45.61215210]
[302.95288086 61.57580948]
[286.03253174 60.50866318]
[271.70993042 64.96547699]
[257.38732910 69.42229462]
[243.06474304 73.87911224]
[255.57374573 82.15709686]
[258.75390625 96.81610870]
[250.79968262 109.53343201]
[236.22711182 113.08876038]
[223.30984497 105.46353149]
[219.38168335 90.98701477]
[226.67408752 77.87733459]
[211.90803528 80.51619720]
[204.70455933 90.28437042]
[192.37654114 92.57328796]
[181.46905518 85.61051178]
[166.65129089 87.94161224]
[151.83352661 90.27271271]
[137.01577759 92.60382080]
[122.19801331 94.93492126]
[136.31941223 99.99320221]
[150.44081116 105.05147552]
[165.42901611 105.64614105]
[178.69717407 112.64299011]
[187.65379333 124.67540741]
[190.54948425 139.39324951]
[186.81864929 153.92187500]
[177.19001770 165.42358398]
[163.54420471 171.65190125]
[148.54647827 171.39030457]
[135.12617493 164.68991089]
[125.90448761 152.85942078]
[122.68258667 138.21018982]
[115.21891022 125.19891357]
[107.75522614 112.18762970]
[108.06728363 127.18437958]
[108.37934113 142.18113708]
[108.69139862 157.17788696]
[109.00344849 172.17463684]
[109.31550598 187.17140198]
[109.62756348 202.16815186]
[109.93962097 217.16490173]
[110.25167847 232.16165161]
[112.84267426 251.36938477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[15 59]
[16 58]
[17 57]
[18 56]
[21 55]
[22 54]
[23 53]
[38 52]
[39 51]
[40 50]
[41 48]
[42 47]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[99 119]
[100 118]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
