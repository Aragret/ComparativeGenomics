%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCxxxxxxxxxxCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.86345673 265.15731812]
[114.86345673 250.15731812]
[114.86345673 235.15731812]
[114.86345673 220.15731812]
[114.86345673 205.15731812]
[114.86345673 190.15731812]
[114.86345673 175.15731812]
[114.86345673 160.15731812]
[114.86345673 145.15731812]
[114.86345673 130.15731812]
[108.35530090 126.42985535]
[95.33898926 118.97494507]
[88.83084106 115.24748993]
[75.89278412 122.83740234]
[62.95472717 130.42730713]
[50.01667023 138.01721191]
[45.92651367 153.04747009]
[32.69736481 160.56040955]
[18.39352608 156.56843567]
[5.45546961 164.15835571]
[-7.48258638 171.74826050]
[-9.91258907 187.19587708]
[-21.73751259 197.42843628]
[-37.37398911 197.61442566]
[-49.43895340 187.66603088]
[-52.23569870 172.28057861]
[-44.44368744 158.72259521]
[-29.74206734 153.39376831]
[-15.07249451 158.81019592]
[-2.13443875 151.22029114]
[10.80361748 143.63038635]
[14.29854393 129.19705200]
[27.31145096 121.31549835]
[42.42676163 125.07916260]
[55.36481857 117.48925018]
[68.30287170 109.89934540]
[81.24092865 102.30944061]
[80.61749268 94.83539581]
[65.66938782 96.08202362]
[64.42300415 81.13388824]
[79.37062073 79.88730621]
[78.74717712 72.41326141]
[64.73046875 67.07174683]
[50.71375275 61.73023987]
[34.61753845 64.86773682]
[24.05786133 52.32081604]
[29.89760971 36.99667358]
[46.12935638 34.65947342]
[56.05526733 47.71352386]
[70.07198334 53.05503845]
[84.08869171 58.39654922]
[98.16020966 53.20113373]
[105.34272003 40.03255081]
[112.52523041 26.86396980]
[119.70774078 13.69538689]
[89.10245514 -1.02652335]
[83.21316528 -49.39311218]
[80.42084503 -64.13092041]
[77.62851715 -78.86872864]
[74.83619690 -93.60652924]
[59.79442596 -94.89018250]
[45.65717697 -100.18553162]
[33.47352219 -109.09963226]
[24.14757347 -120.97099304]
[18.37137604 -134.91868591]
[16.57356262 -149.90769958]
[18.88754463 -164.82574463]
[25.14160728 -178.56581116]
[34.87165833 -190.10827637]
[47.35566330 -198.59663391]
[61.66722488 -203.40098572]
[76.74433136 -204.16481018]
[91.46816254 -200.83143616]
[104.74610901 -193.64820862]
[115.59285736 -183.14819336]
[123.20352173 -170.11053467]
[127.01332092 -155.50273132]
[126.73954773 -140.40876770]
[122.40252686 -125.94872284]
[114.32408905 -113.19563293]
[103.10369873 -103.09584808]
[89.57399750 -96.39885712]
[92.36632538 -81.66104889]
[95.15865326 -66.92324066]
[97.95097351 -52.18544006]
[104.98673248 -49.58773041]
[110.18238068 -63.65916443]
[124.25373077 -58.46327972]
[119.05825043 -44.39231491]
[126.09400940 -41.79460526]
[137.79364014 -51.18177032]
[149.49325562 -60.56893158]
[161.19288635 -69.95609283]
[172.89250183 -79.34325409]
[184.59213257 -88.73041534]
[193.16239929 -103.35871124]
[209.59149170 -99.17288971]
[210.11727905 -82.22709656]
[193.97929382 -77.03079224]
[182.27966309 -67.64363098]
[170.58004761 -58.25646973]
[158.88041687 -48.86930847]
[147.18080139 -39.48214340]
[135.48117065 -30.09498405]
[138.00555420 -23.03258133]
[143.05430603 -8.90777874]
[145.57868958 -1.84537756]
[160.57788086 -2.00141406]
[175.57705688 -2.15745068]
[185.36308289 -14.35449123]
[200.70973206 -17.35691643]
[214.37077332 -9.74707127]
[219.89590454 4.88190651]
[214.67631531 19.62266159]
[201.17652893 27.51506042]
[185.77075195 24.83255386]
[175.73309326 12.84173775]
[160.73391724 12.99777412]
[145.73472595 13.15381050]
[132.87632751 20.87789536]
[125.69380951 34.04647827]
[118.51130676 47.21506119]
[111.32879639 60.38364410]
[119.57541656 47.85395050]
[130.87100220 37.98431396]
[144.39363098 31.49289131]
[159.15933228 28.85203552]
[174.09367371 30.25390434]
[188.10998535 35.59648895]
[200.18835449 44.49104309]
[209.44989014 56.29035187]
[215.22071838 70.13584900]
[217.08088684 85.02005768]
[214.89506531 99.85993958]
[208.82229614 113.57567596]
[199.30445862 125.16925049]
[187.03411865 133.79704285]
[172.90412903 138.83126831]
[157.94265747 139.90560913]
[143.23835754 136.94187927]
[129.86344910 130.15731812]
[129.86344910 145.15731812]
[129.86344910 160.15731812]
[129.86344910 175.15731812]
[129.86344910 190.15731812]
[129.86344910 205.15731812]
[129.86344910 220.15731812]
[129.86344910 235.15731812]
[129.86344910 250.15731812]
[129.86344910 265.15731812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 37]
[14 36]
[15 35]
[16 34]
[19 31]
[20 30]
[21 29]
[42 51]
[43 50]
[44 49]
[52 123]
[53 122]
[54 121]
[55 120]
[57 85]
[58 84]
[59 83]
[60 82]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
