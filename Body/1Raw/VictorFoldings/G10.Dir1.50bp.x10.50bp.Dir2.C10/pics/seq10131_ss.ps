%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAxxxxxxxxxxCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[138.92770386 472.64199829]
[138.92770386 457.64199829]
[138.92770386 442.64199829]
[138.92770386 427.64199829]
[138.92770386 412.64199829]
[138.92770386 397.64199829]
[138.92770386 382.64199829]
[138.92770386 367.64199829]
[138.92770386 352.64199829]
[138.92770386 337.64199829]
[123.88595581 334.04449463]
[110.12767029 326.96099854]
[98.44801331 316.79629517]
[89.52311707 304.13330078]
[83.87094879 289.69970703]
[81.82127380 274.32623291]
[83.49638367 258.89865112]
[88.80381775 244.30697632]
[97.44147491 231.39389038]
[108.91478729 220.90625000]
[122.56504059 213.45179749]
[137.60720825 209.46398926]
[129.61021423 196.89825439]
[137.06254578 182.94212341]
[136.75456238 167.94529724]
[133.69616699 153.26039124]
[127.99150848 139.38751221]
[122.28684998 125.51463318]
[113.04421234 130.75305176]
[102.77430725 132.81544495]
[92.52168274 131.58670044]
[83.29998016 127.28178406]
[75.99169159 120.41509247]
[71.26385498 111.74069214]
[69.50767517 102.17027283]
[70.80749512 92.67756653]
[74.94137573 84.19934082]
[81.41242981 77.54293823]
[75.14302063 63.91595459]
[68.31945038 50.55785751]
[60.95320892 37.49116135]
[53.58697128 24.42446709]
[46.22072983 11.35777092]
[38.85449219 -1.70892358]
[31.48825073 -14.77561855]
[21.49715424 -25.96391487]
[9.34382057 -34.75575638]
[-2.80951214 -43.54759979]
[-14.96284485 -52.33944321]
[-29.66815186 -47.38630295]
[-44.46628189 -52.05480957]
[-53.66705322 -64.54982758]
[-53.73258209 -80.06676483]
[-44.63766861 -92.63904572]
[-29.87949753 -97.43236542]
[-15.13288116 -92.60359955]
[-6.06819820 -80.00951385]
[-6.17100286 -64.49277496]
[5.98233032 -55.70093155]
[18.13566399 -46.90909195]
[30.28899574 -38.11724854]
[24.40882683 -51.91665268]
[22.39484215 -66.78083801]
[24.39098549 -81.64742279]
[30.25458908 -95.45387268]
[39.56657028 -107.21342468]
[51.66138840 -116.08559418]
[65.67460632 -121.43627167]
[80.60466766 -122.88304138]
[95.38450623 -120.32250214]
[108.95777893 -113.93765259]
[120.35437775 -104.18482971]
[128.75976562 -91.76108551]
[133.57321167 -77.55436707]
[134.45066833 -62.58005524]
[131.32943726 -47.90838623]
[124.43259430 -34.58796692]
[114.25305939 -23.57083511]
[101.51840210 -15.64440155]
[87.13877106 -11.37518120]
[72.14190674 -11.06830406]
[57.59967041 -14.74570274]
[44.55494690 -22.14185715]
[51.92118454 -9.07516289]
[59.28742599 3.99153185]
[66.65366364 17.05822754]
[74.01990509 30.12492180]
[81.38614655 43.19161606]
[84.11375427 44.05831528]
[86.65071869 46.09130096]
[88.53830719 49.21920013]
[89.35385895 53.20146561]
[88.77000427 57.64654922]
[95.03940582 71.27352905]
[106.33448792 70.33563232]
[117.57947540 73.84398651]
[127.02837372 81.60139465]
[133.08839417 92.72962189]
[145.92204285 84.96449280]
[153.34994507 70.34400940]
[169.73785400 69.73683167]
[178.22727966 83.76756287]
[170.08505249 98.00259399]
[153.68717957 97.79814148]
[140.85353088 105.56327820]
[136.15972900 119.80996704]
[141.86439514 133.68284607]
[147.56906128 147.55572510]
[149.96624756 132.74851990]
[156.74510193 119.36767578]
[167.26589966 108.67595673]
[180.53578186 101.68236542]
[195.30242920 99.04689026]
[210.17233276 101.01824951]
[223.74217224 107.41040039]
[234.73133850 117.62010193]
[242.10278320 130.68386841]
[245.16084290 145.36883545]
[243.61694336 160.28916931]
[237.61676025 174.03680420]
[227.72656250 185.31439209]
[214.87966919 193.05761719]
[200.28849792 196.53576660]
[185.33000183 195.42057800]
[171.41586304 189.81730652]
[159.85916138 180.25474548]
[151.75140381 167.63731384]
[152.05938721 182.63415527]
[160.07839966 196.27255249]
[152.60404968 209.15600586]
[166.85636902 212.19932556]
[180.06153870 218.34707642]
[191.55325317 227.28532410]
[200.75251770 238.55947876]
[207.19676208 251.59732056]
[210.56315613 265.73812866]
[210.68475342 280.26605225]
[207.55879211 294.44650269]
[201.34658813 307.56320190]
[192.36531067 318.95428467]
[181.07174683 328.04586792]
[168.03906250 334.38088989]
[153.92770386 337.64199829]
[153.92770386 352.64199829]
[153.92770386 367.64199829]
[153.92770386 382.64199829]
[153.92770386 397.64199829]
[153.92770386 412.64199829]
[153.92770386 427.64199829]
[153.92770386 442.64199829]
[153.92770386 457.64199829]
[153.92770386 472.64199829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 130]
[24 128]
[25 127]
[26 108]
[27 107]
[28 106]
[38 94]
[39 93]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[46 61]
[47 60]
[48 59]
[49 58]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
