%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGxxxxxxxxxxACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUAGCUAAAGUGAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.22178650]
[92.50000000 237.22178650]
[92.50000000 222.22178650]
[92.50000000 207.22178650]
[92.50000000 192.22178650]
[92.50000000 177.22178650]
[92.50000000 162.22178650]
[92.50000000 147.22178650]
[92.50000000 132.22178650]
[92.50000000 117.22178650]
[85.43759918 114.69741058]
[71.31279755 109.64865112]
[64.25039673 107.12427521]
[54.74203491 118.72561646]
[52.61657333 134.98645020]
[37.36983871 141.02540588]
[24.68636322 130.63014221]
[27.61382294 114.49440765]
[43.14069366 109.21726227]
[52.64905167 97.61592102]
[39.83902740 105.41997528]
[25.43728447 101.22595215]
[18.82014275 87.76439667]
[24.29572678 73.79951477]
[38.29912949 68.42320251]
[51.71308517 75.13539124]
[41.27327347 64.36458588]
[30.83346176 53.59377670]
[20.39365005 42.82296753]
[14.05108356 40.61404037]
[10.37274837 36.17544174]
[9.75521183 31.38021851]
[-0.22751428 20.18445206]
[-10.21024036 8.98868656]
[-29.74005508 17.31235123]
[-50.93626404 17.84149170]
[-70.80675507 10.52121067]
[-86.55386353 -3.59674764]
[-95.96826172 -22.50505066]
[-97.73891449 -43.52617264]
[-91.63564301 -63.69154358]
[-103.89801025 -72.33065796]
[-116.16037750 -80.96977997]
[-128.42274475 -89.60889435]
[-140.68511963 -98.24800873]
[-152.94747925 -106.88712311]
[-165.20985413 -115.52624512]
[-183.55471802 -116.72850800]
[-190.35528564 -132.87632751]
[-202.79472351 -141.25848389]
[-219.30880737 -145.09533691]
[-220.19345093 -162.02618408]
[-204.16915894 -167.56318665]
[-194.41258240 -153.69792175]
[-181.97314453 -145.31578064]
[-170.00213623 -147.31631470]
[-159.55690002 -140.37974548]
[-156.57073975 -127.78861237]
[-144.30836487 -119.14949036]
[-132.04598999 -110.51037598]
[-119.78363037 -101.87126160]
[-107.52126312 -93.23214722]
[-95.25889587 -84.59302521]
[-82.99652100 -75.95391083]
[-75.86494446 -82.45893097]
[-67.71913147 -87.64667511]
[-58.79970932 -91.36195374]
[-49.37050247 -93.49308777]
[-39.71070862 -93.97530365]
[-30.10664749 -92.79266357]
[-20.84326935 -89.97859955]
[-12.19569683 -85.61498260]
[-4.42105627 -79.82972717]
[2.24916553 -72.79302979]
[7.61601496 -64.71240234]
[11.51900578 -55.82651520]
[13.84091949 -46.39815903]
[14.51132107 -36.70648575]
[13.50869846 -27.03872299]
[10.86114788 -17.68167877]
[6.64558744 -8.91322422]
[0.98552513 -0.99404031]
[10.96825123 10.20172596]
[20.95097733 21.39749146]
[31.16445732 32.38315582]
[41.60427094 43.15396500]
[52.04408264 53.92477417]
[62.48389435 64.69557953]
[119.30392456 85.20302582]
[134.06997681 82.56416321]
[148.83602905 79.92530060]
[163.60209656 77.28643799]
[178.36814880 74.64757538]
[193.13420105 72.00870514]
[191.28309631 62.97370529]
[194.53894043 52.44170761]
[203.50517273 43.08792114]
[217.02935791 36.59975433]
[223.46423340 30.02371979]
[230.90306091 30.12057495]
[244.55931091 23.91516876]
[256.47817993 11.85793209]
[271.36367798 19.97323036]
[267.68624878 36.52354431]
[250.76470947 37.57141113]
[237.10847473 43.77681732]
[223.51751709 50.12394714]
[209.99333191 56.61211014]
[212.47845459 71.40481567]
[227.38035583 73.11750793]
[242.28225708 74.83020020]
[257.18417358 76.54288483]
[268.41265869 65.65918732]
[284.01370239 64.59090424]
[296.62097168 73.84243774]
[300.28167725 89.04550171]
[293.26736450 103.02167511]
[278.88998413 109.17183685]
[263.93804932 104.59206390]
[255.47146606 91.44478607]
[240.56956482 89.73210144]
[225.66766357 88.01940918]
[210.76576233 86.30671692]
[195.77307129 86.77476501]
[181.00700378 89.41362762]
[166.24095154 92.05249023]
[151.47489929 94.69135284]
[136.70884705 97.33022308]
[121.94278717 99.96908569]
[136.16636658 104.73249054]
[151.16239929 104.38755035]
[164.42509460 111.39475250]
[172.59112549 123.97711945]
[173.58966064 138.94384766]
[167.16746521 152.49948120]
[154.95315552 161.20642090]
[140.04420471 162.85665894]
[126.22141266 157.03167725]
[116.99013519 145.20867920]
[114.69138336 130.38552856]
[107.50000000 117.22178650]
[107.50000000 132.22178650]
[107.50000000 147.22178650]
[107.50000000 162.22178650]
[107.50000000 177.22178650]
[107.50000000 192.22178650]
[107.50000000 207.22178650]
[107.50000000 222.22178650]
[107.50000000 237.22178650]
[107.50000000 252.22178650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 20]
[14 19]
[26 88]
[27 87]
[28 86]
[29 85]
[32 84]
[33 83]
[34 82]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[49 55]
[50 54]
[89 129]
[90 128]
[91 127]
[92 126]
[93 125]
[94 124]
[97 108]
[98 107]
[100 106]
[101 105]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
