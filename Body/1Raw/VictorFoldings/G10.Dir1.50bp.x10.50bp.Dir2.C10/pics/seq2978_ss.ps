%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCxxxxxxxxxxCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.86763763 287.96957397]
[114.86763763 272.96957397]
[114.86763763 257.96957397]
[114.86763763 242.96957397]
[114.86763763 227.96957397]
[114.86763763 212.96957397]
[114.86763763 197.96957397]
[114.86763763 182.96957397]
[114.86763763 167.96957397]
[114.86763763 152.96957397]
[111.61681366 138.32606506]
[105.26968384 124.73512268]
[98.92255402 111.14417267]
[97.76650238 121.70891571]
[96.48071289 132.25949097]
[95.06533051 142.79469299]
[88.83969116 157.33952332]
[74.03369904 158.96182251]
[67.80805969 173.50665283]
[53.00206757 175.12893677]
[44.12934113 189.57577515]
[27.79087830 185.04907227]
[27.61773491 168.09600830]
[43.86033630 163.23655701]
[49.23534775 149.34561157]
[64.89196777 147.06944275]
[70.26697540 133.17848206]
[85.92359161 130.90231323]
[84.75804138 123.49343872]
[70.75982666 118.10364532]
[82.42694092 108.67568207]
[81.26138306 101.26679993]
[67.13658142 96.21804047]
[53.01177979 91.16928864]
[38.88697815 86.12052917]
[24.76217461 81.07177734]
[10.63737106 76.02301788]
[1.20383704 87.86730957]
[-11.56573677 96.00466919]
[-26.28620338 99.55242920]
[-41.36079407 98.12575531]
[-55.15433121 91.87939453]
[-66.17060089 81.49091339]
[-73.21463013 68.08716583]
[-75.52233887 53.12210083]
[-72.84341431 38.21901321]
[-65.46842957 24.99447632]
[-54.19738007 14.88299084]
[-40.25285721 8.98137569]
[-25.14746475 7.92979240]
[-10.51972008 11.84230900]
[2.04366922 20.29452705]
[11.17992020 32.36960983]
[15.89799976 46.75774384]
[15.68612766 61.89821625]
[29.81093025 66.94696808]
[43.93573380 71.99572754]
[58.06053543 77.04448700]
[72.18534088 82.09323883]
[86.31014252 87.14199829]
[100.43494415 82.09323883]
[108.15902710 69.23484039]
[115.88311768 56.37643433]
[123.60720062 43.51803207]
[125.36290741 34.48645782]
[131.62809753 30.47484589]
[139.61801147 17.77991486]
[128.13854980 8.08619690]
[118.11997986 -3.11086559]
[109.75729370 -15.59331894]
[103.21328735 -29.11818886]
[98.61533356 -43.42220688]
[96.05294037 -58.22694778]
[95.57598877 -73.24422455]
[97.19374847 -88.18172455]
[100.87474060 -102.74868774]
[106.54730988 -116.66156769]
[114.10103607 -129.64953613]
[123.38889313 -141.45977783]
[134.23007202 -151.86241150]
[146.41357422 -160.65495300]
[159.70220947 -167.66622925]
[173.83734131 -172.75978088]
[188.54380798 -175.83645630]
[203.53535461 -176.83638000]
[218.52015686 -175.74006653]
[233.20652771 -172.56886292]
[247.30860901 -167.38450623]
[260.55187988 -160.28790283]
[272.67855835 -151.41719055]
[283.45263672 -140.94503784]
[292.66433716 -129.07530212]
[300.13436890 -116.03902435]
[305.71734619 -102.08995056]
[309.30456543 -87.49961853]
[310.82623291 -72.55201721]
[310.25268555 -57.53811646]
[307.59512329 -42.75016785]
[302.90527344 -28.47601509]
[296.27441406 -14.99351311]
[287.83163452 -2.56510305]
[277.74124146 8.56729317]
[266.19967651 18.18697929]
[253.43159485 26.10670662]
[239.68551636 32.17231369]
[225.22903442 36.26573563]
[210.34352112 38.30728531]
[195.31875610 38.25723267]
[180.44718933 36.11654663]
[166.01829529 31.92689323]
[152.31294250 25.76983261]
[144.32302856 38.46475983]
[136.46560669 51.24211884]
[128.74151611 64.10051727]
[121.01743317 76.95892334]
[113.29335022 89.81732941]
[112.51350403 104.79704285]
[118.86063385 118.38799286]
[125.20776367 131.97894287]
[126.82969666 117.06688690]
[132.34361267 103.11709595]
[141.35562134 91.12611389]
[153.22190857 81.95053864]
[167.09478760 76.24586487]
[181.98320007 74.41961670]
[196.82356262 76.60225677]
[210.55569458 82.63786316]
[222.19860840 92.09526062]
[230.92056274 104.29884338]
[236.09849548 118.37680817]
[237.36247253 133.32345581]
[234.62223816 148.07104492]
[228.07351685 161.56600952]
[218.18414307 172.84432983]
[205.66059875 181.10028076]
[191.39753723 185.74411011]
[176.41387939 186.44403076]
[161.78001404 183.15007019]
[148.54136658 176.09754944]
[137.64367676 165.79025269]
[129.86763000 152.96957397]
[129.86763000 167.96957397]
[129.86763000 182.96957397]
[129.86763000 197.96957397]
[129.86763000 212.96957397]
[129.86763000 227.96957397]
[129.86763000 242.96957397]
[129.86763000 257.96957397]
[129.86763000 272.96957397]
[129.86763000 287.96957397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 119]
[12 118]
[13 117]
[16 28]
[18 26]
[20 24]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[61 116]
[62 115]
[63 114]
[64 113]
[66 112]
[67 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
