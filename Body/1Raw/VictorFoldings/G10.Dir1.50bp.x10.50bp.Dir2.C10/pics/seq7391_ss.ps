%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACxxxxxxxxxxUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 280.95455933]
[92.50000000 265.95455933]
[92.50000000 250.95457458]
[92.50000000 235.95457458]
[92.50000000 220.95457458]
[92.50000000 205.95457458]
[92.50000000 190.95457458]
[92.50000000 175.95457458]
[92.50000000 160.95457458]
[92.50000000 145.95457458]
[82.51744080 143.15591431]
[73.40159607 138.21775818]
[62.96178818 148.98857117]
[52.52197266 159.75938416]
[42.08216095 170.53018188]
[42.57933426 186.32666016]
[31.70034218 197.79064941]
[15.89950085 198.12077332]
[4.55116940 187.12118530]
[4.38811111 171.31774902]
[15.50706482 160.08634949]
[31.31135368 160.09037781]
[41.75116730 149.31956482]
[52.19097900 138.54875183]
[62.63079071 127.77795410]
[54.29416275 108.89094543]
[54.94278717 88.25607300]
[64.44914246 69.92993164]
[80.94439697 57.51522064]
[101.18576813 53.45253754]
[103.97809601 38.71473312]
[106.77041626 23.97692490]
[98.13878632 11.01032829]
[101.18054199 -3.89612508]
[113.59540558 -12.04516029]
[116.38773346 -26.78296661]
[119.18005371 -41.52077103]
[121.97238159 -56.25857925]
[124.61124420 -71.02463531]
[127.09635925 -85.81734467]
[129.58148193 -100.61004639]
[119.19822693 -109.73075104]
[114.72895813 -122.69372559]
[117.24493408 -136.06236267]
[125.98040009 -146.34843445]
[138.56118774 -150.92224121]
[141.35351562 -165.66004944]
[144.14582825 -180.39785767]
[135.31072998 -190.61541748]
[134.01333618 -203.86474609]
[140.50570679 -215.26313782]
[152.21038818 -220.74011230]
[155.30871582 -235.41662598]
[158.40704346 -250.09315491]
[161.50535583 -264.76968384]
[161.97340393 -279.76239014]
[152.31529236 -292.29360962]
[158.12367249 -306.00900269]
[155.94683838 -320.85018921]
[153.77000427 -335.69140625]
[151.59315491 -350.53262329]
[149.41632080 -365.37380981]
[134.47586060 -367.67031860]
[120.87678528 -374.27008057]
[109.82833099 -384.58621216]
[102.31291199 -397.70147705]
[98.99879456 -412.44961548]
[100.18067169 -427.51928711]
[105.75344086 -441.57046509]
[115.22158813 -453.35372925]
[127.74320984 -461.82135010]
[142.20487976 -466.22036743]
[157.32069397 -466.15963745]
[171.74655151 -461.64456177]
[184.19972229 -453.07659912]
[193.57287598 -441.21759033]
[199.03254700 -427.12210083]
[200.09329224 -412.04342651]
[196.66076660 -397.32238770]
[189.04019165 -384.26794434]
[177.90919495 -374.04092407]
[164.25752258 -367.55065918]
[166.43437195 -352.70944214]
[168.61120605 -337.86825562]
[170.78804016 -323.02703857]
[172.96487427 -308.18582153]
[182.46728516 -296.71615601]
[176.81460571 -281.93920898]
[182.84487915 -295.67370605]
[192.94049072 -306.76776123]
[206.04708862 -314.06277466]
[220.79582214 -316.79681396]
[235.64633179 -314.68438721]
[249.04763794 -307.94607544]
[259.60012817 -297.28564453]
[266.20169067 -283.81643677]
[268.16290283 -268.94522095]
[265.27886963 -254.22506714]
[257.85086060 -241.19338989]
[246.65461731 -231.21119690]
[232.85948181 -225.32102966]
[217.90620422 -224.13803101]
[203.35649109 -227.78578186]
[190.72991943 -235.88328552]
[181.34519958 -247.58486938]
[176.18188477 -261.67135620]
[173.08355713 -246.99482727]
[169.98524475 -232.31831360]
[166.88691711 -217.64178467]
[176.65855408 -203.98992920]
[173.50180054 -187.15785217]
[158.88363647 -177.60552979]
[156.09130859 -162.86772156]
[153.29899597 -148.12991333]
[164.91716003 -136.57469177]
[167.40652466 -120.21103668]
[159.59527588 -105.43044281]
[144.37419128 -98.12493134]
[141.88906860 -83.33222198]
[139.40394592 -68.53951263]
[141.41040039 -61.37573242]
[136.71018982 -53.46625519]
[133.91786194 -38.72844696]
[131.12553406 -23.99064255]
[128.33320618 -9.25283623]
[136.90669250 2.87279415]
[134.28483582 17.85880280]
[121.50822449 26.76924896]
[118.71589661 41.50705719]
[115.92357635 56.24486160]
[125.83545685 61.26240158]
[134.27661133 68.48513794]
[140.76651001 77.50191498]
[144.93571472 87.79943085]
[146.54687500 98.79148102]
[145.50828552 109.85232544]
[141.87905884 120.35231781]
[135.86579895 129.69371033]
[127.81082153 137.34475708]
[118.17266083 142.86987305]
[107.50000000 145.95457458]
[107.50000000 160.95457458]
[107.50000000 175.95457458]
[107.50000000 190.95457458]
[107.50000000 205.95457458]
[107.50000000 220.95457458]
[107.50000000 235.95457458]
[107.50000000 250.95457458]
[107.50000000 265.95455933]
[107.50000000 280.95455933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 25]
[13 24]
[14 23]
[15 22]
[30 130]
[31 129]
[32 128]
[35 125]
[36 124]
[37 123]
[38 122]
[39 120]
[40 119]
[41 118]
[46 114]
[47 113]
[48 112]
[52 109]
[53 108]
[54 107]
[55 106]
[56 88]
[58 86]
[59 85]
[60 84]
[61 83]
[62 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
