%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUxxxxxxxxxxUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.20172119 364.95187378]
[129.20172119 349.95187378]
[129.20172119 334.95187378]
[129.20172119 319.95187378]
[129.20172119 304.95187378]
[129.20172119 289.95187378]
[129.20172119 274.95187378]
[129.20172119 259.95187378]
[129.20172119 244.95188904]
[129.20172119 229.95188904]
[147.06188965 197.06755066]
[138.49285889 184.75610352]
[129.92384338 172.44464111]
[126.47595978 171.47531128]
[123.34089661 168.75321960]
[121.35321045 164.45097351]
[121.23504639 159.11442566]
[113.43000031 146.30500793]
[105.62494659 133.49559021]
[97.81990051 120.68618011]
[83.41973877 116.48671722]
[69.95267487 123.09262848]
[63.58003235 129.72065735]
[56.14505768 129.69284058]
[42.54687500 136.02445984]
[35.72257614 150.54370117]
[20.08333778 154.12054443]
[7.62624264 144.01112366]
[7.90730810 127.97053528]
[20.71092606 118.30374146]
[36.21525574 122.42627716]
[49.81343842 116.09465790]
[63.34675980 109.62556458]
[76.81382751 103.01964569]
[81.88059235 88.90129852]
[75.68710327 75.23964691]
[69.49361420 61.57799530]
[63.30012131 47.91634369]
[56.96850204 34.31816101]
[50.49940491 20.78484154]
[44.03030777 7.25152016]
[37.56121063 -6.28180075]
[31.09211159 -19.81512260]
[24.62301254 -33.34844208]
[18.15391541 -46.88176346]
[3.61803198 -43.01597977]
[-11.37671947 -41.88740921]
[-26.31955147 -43.53302383]
[-40.70172119 -47.89531708]
[-54.03384018 -54.82432938]
[-65.86253357 -64.08277130]
[-75.78585052 -75.35417938]
[-83.46694183 -88.25371552]
[-88.64546967 -102.34130859]
[-91.14644623 -117.13667297]
[-90.88613892 -132.13568115]
[-87.87487793 -146.82754517]
[-82.21665192 -160.71218872]
[-74.10552979 -173.31730652]
[-63.81896973 -184.21438599]
[-51.70837402 -193.03332520]
[-58.17747116 -206.56665039]
[-64.64656830 -220.09997559]
[-71.11566925 -233.63328552]
[-84.93721008 -242.45922852]
[-83.93428802 -258.82766724]
[-69.13862610 -265.90017700]
[-55.77073288 -256.40115356]
[-57.58234787 -240.10238647]
[-51.11324692 -226.56906128]
[-44.64414978 -213.03575134]
[-38.17505264 -199.50242615]
[-23.70654678 -203.38862610]
[-8.76632214 -204.55026245]
[6.13691902 -202.94630432]
[20.49546051 -198.62992859]
[33.81987381 -191.74673462]
[45.65569687 -182.52983093]
[55.59893799 -171.29194641]
[63.30986023 -158.41487122]
[68.52459717 -144.33639526]
[71.06418610 -129.53546143]
[70.84067535 -114.51592255]
[67.86022186 -99.78929901]
[62.22289658 -85.85742950]
[54.11932373 -73.19534302]
[43.82425308 -62.23506165]
[31.68723679 -53.35086060]
[38.15633392 -39.81753922]
[44.62543106 -26.28421974]
[51.09452820 -12.75089836]
[57.56362915 0.78242207]
[64.03272247 14.31574249]
[70.50182343 27.84906387]
[76.25784302 32.55521011]
[76.96176910 41.72285461]
[83.15525818 55.38450623]
[89.34875488 69.04615784]
[95.54224396 82.70780182]
[100.85323334 82.29157257]
[106.01177979 83.45814514]
[110.56021881 86.08068848]
[114.10196686 89.90425110]
[116.33603668 94.57040405]
[117.08258820 99.65077972]
[116.29718018 104.68635559]
[114.07276154 109.22896576]
[110.62931824 112.88112640]
[118.43436432 125.69054413]
[126.23941803 138.49996948]
[134.04446411 151.30938721]
[142.23529053 163.87562561]
[150.80430603 176.18707275]
[159.37333679 188.49853516]
[171.68478394 197.06755066]
[186.20594788 200.82734680]
[200.72709656 204.58712769]
[215.24826050 208.34690857]
[229.76940918 212.10670471]
[243.26025391 203.87426758]
[258.60104370 207.67367554]
[266.69036865 221.25079346]
[262.72900391 236.55056763]
[249.06710815 244.49591064]
[233.81007385 240.37298584]
[226.00962830 226.62785339]
[211.48846436 222.86807251]
[196.96731567 219.10827637]
[182.44615173 215.34849548]
[167.92500305 211.58871460]
[161.99418640 216.17950439]
[172.93515015 226.44084167]
[183.87612915 236.70217896]
[194.81710815 246.96351624]
[208.58424377 252.91885376]
[215.39100647 266.28552246]
[212.11009216 280.92233276]
[200.24890137 290.10446167]
[185.25694275 289.61331177]
[174.02215576 279.67449951]
[171.70669556 264.85229492]
[164.51530457 251.68856812]
[157.32392883 238.52482605]
[150.13253784 225.36109924]
[144.20172119 229.95188904]
[144.20172119 244.95188904]
[144.20172119 259.95187378]
[144.20172119 274.95187378]
[144.20172119 289.95187378]
[144.20172119 304.95187378]
[144.20172119 319.95187378]
[144.20172119 334.95187378]
[144.20172119 349.95187378]
[144.20172119 364.95187378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 114]
[12 113]
[13 112]
[17 111]
[18 110]
[19 109]
[20 108]
[21 34]
[22 33]
[24 32]
[25 31]
[35 99]
[36 98]
[37 97]
[38 96]
[39 94]
[40 93]
[41 92]
[42 91]
[43 90]
[44 89]
[45 88]
[61 72]
[62 71]
[63 70]
[64 69]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
