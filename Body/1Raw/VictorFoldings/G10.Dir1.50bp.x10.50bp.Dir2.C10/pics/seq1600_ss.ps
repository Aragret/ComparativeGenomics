%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGxxxxxxxxxxCGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.12265015 240.58317566]
[109.81467438 225.58633423]
[109.50669098 210.58950806]
[109.19871521 195.59266663]
[108.89073944 180.59582520]
[108.58276367 165.59898376]
[108.27478027 150.60215759]
[107.96680450 135.60531616]
[107.65882874 120.60847473]
[94.09693146 114.19950104]
[82.31479645 123.48288727]
[70.53266144 132.76626587]
[58.75052261 142.04965210]
[46.96838379 151.33303833]
[35.18624496 160.61642456]
[23.40410995 169.89981079]
[17.35296440 184.51809692]
[2.56744409 186.31744385]
[-9.21469307 195.60083008]
[-12.52469635 211.29870605]
[-26.92563057 218.36926270]
[-41.37033081 211.38856506]
[-44.77805710 195.71160889]
[-34.53469849 183.36441040]
[-18.49807930 183.81869507]
[-6.71594143 174.53530884]
[-1.50753331 160.58103943]
[14.12072468 158.11767578]
[25.90286064 148.83428955]
[37.68499756 139.55090332]
[49.46713638 130.26751709]
[61.24927139 120.98413086]
[73.03141022 111.70074463]
[84.81354523 102.41736603]
[69.87430573 103.76613617]
[57.88721085 94.74895477]
[55.04121780 80.02141571]
[62.80572510 67.18738556]
[77.17189789 62.87308884]
[90.72245026 69.30601501]
[96.46125031 83.16688538]
[99.21749115 68.42228699]
[94.14771271 53.43536377]
[104.09189606 42.34652328]
[106.84813690 27.60192490]
[109.60438538 12.85732841]
[112.36062622 -1.88726807]
[110.85743713 -10.96119881]
[115.32779694 -16.90494347]
[118.38619232 -31.58984184]
[121.44458771 -46.27473831]
[113.34172058 -50.39350128]
[106.68920898 -57.36429977]
[102.49338531 -66.64260101]
[101.54680634 -77.33166504]
[104.30701447 -88.26831055]
[110.80976105 -98.14941406]
[102.65309906 -110.73785400]
[94.49642944 -123.32629395]
[86.33976746 -135.91473389]
[71.49748230 -142.88887024]
[70.38591766 -159.25030518]
[84.14856720 -168.16778564]
[98.62758636 -160.46778870]
[98.92820740 -144.07139587]
[107.08486938 -131.48295593]
[115.24153900 -118.89451599]
[123.39820099 -106.30608368]
[130.84135437 -105.38441467]
[129.71842957 -120.34232330]
[128.59550476 -135.30023193]
[127.47257233 -150.25814819]
[122.83662415 -164.52377319]
[128.05323792 -178.58744812]
[140.87084961 -186.37904358]
[155.75714111 -184.53559875]
[166.28695679 -173.85276794]
[167.91543579 -158.94142151]
[159.94001770 -146.23780823]
[155.20256042 -132.00556946]
[150.46511841 -117.77333069]
[145.72766113 -103.54109192]
[153.17082214 -102.61943054]
[164.15162659 -112.83814240]
[175.13241577 -123.05684662]
[186.11322021 -133.27555847]
[197.09402466 -143.49426270]
[208.07482910 -153.71296692]
[219.05563354 -163.93167114]
[229.82431030 -174.37368774]
[240.37632751 -185.03459167]
[250.92834473 -195.69549561]
[261.48034668 -206.35641479]
[265.11776733 -222.34707642]
[280.86260986 -226.93315125]
[292.51794434 -215.39688110]
[288.09375000 -199.60578918]
[272.14126587 -195.80439758]
[261.58926392 -185.14349365]
[251.03723145 -174.48257446]
[240.48521423 -163.82167053]
[239.61863708 -159.06790161]
[235.71763611 -154.82879639]
[229.27433777 -152.95086670]
[218.29353333 -142.73216248]
[207.31272888 -132.51345825]
[196.33193970 -122.29475403]
[185.35113525 -112.07604218]
[174.37033081 -101.85733795]
[163.38952637 -91.63862610]
[162.80018616 -56.64615250]
[136.12948608 -43.21634293]
[133.07109070 -28.53144455]
[130.01269531 -13.84654808]
[127.10522461 0.86897469]
[124.34897614 15.61357117]
[121.59273529 30.35816765]
[118.83649445 45.10276413]
[124.10342407 59.03505707]
[113.96208954 71.17852783]
[111.20584869 85.92312622]
[120.69361115 74.30493927]
[128.06990051 61.24391174]
[138.55509949 50.51727676]
[151.44483948 42.84560776]
[165.87324524 38.74425507]
[180.87107849 38.48873901]
[195.43081665 42.09621429]
[208.57440186 49.32435226]
[219.41891479 59.68759155]
[227.23583984 72.48976898]
[231.50006104 86.87088013]
[231.92515564 101.86485291]
[228.48252869 116.46445465]
[221.40347290 129.68893433]
[211.16351318 140.64991760]
[198.45053101 148.61109924]
[184.11856079 153.03767395]
[169.13035583 153.63226318]
[154.49275208 150.35493469]
[141.18908691 143.42585754]
[130.11581421 133.31381226]
[122.65567017 120.30049896]
[122.96364594 135.29733276]
[123.27162170 150.29417419]
[123.57959747 165.29101562]
[123.88758087 180.28785706]
[124.19555664 195.28468323]
[124.50353241 210.28152466]
[124.81150818 225.27836609]
[125.11948395 240.27520752]
[127.70526123 259.48364258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[18 26]
[19 25]
[41 121]
[42 120]
[44 118]
[45 117]
[46 116]
[47 115]
[49 114]
[50 113]
[51 112]
[57 68]
[58 67]
[59 66]
[60 65]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
