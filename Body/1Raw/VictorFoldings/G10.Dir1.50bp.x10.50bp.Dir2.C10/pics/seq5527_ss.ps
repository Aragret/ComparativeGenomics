%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAUAGCCUCAUCxxxxxxxxxxCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.62866211 364.62960815]
[139.62866211 349.62960815]
[139.62866211 334.62960815]
[139.62866211 319.62960815]
[139.62866211 304.62960815]
[139.62866211 289.62960815]
[139.62866211 274.62960815]
[139.62866211 259.62960815]
[139.62866211 244.62962341]
[139.62866211 229.62962341]
[123.15922546 223.41741943]
[111.64189148 211.19653320]
[106.90396118 195.93089294]
[109.23876953 180.93588257]
[117.47608948 169.16366577]
[108.80947876 156.92071533]
[100.14287567 144.67774963]
[91.47626495 132.43479919]
[78.18892670 125.47444153]
[63.18971634 125.32044983]
[48.19050598 125.16645050]
[33.19129562 125.01245117]
[18.47577286 127.91992950]
[4.66219091 133.76670837]
[-9.15139198 139.61349487]
[-22.96497536 145.46029663]
[-32.41049194 158.86604309]
[-48.71637726 157.11958313]
[-55.10853577 142.01751709]
[-45.01125717 129.09555054]
[-28.81176186 131.64671326]
[-14.99818039 125.79991913]
[-1.18459725 119.95313263]
[12.62898540 114.10634613]
[-2.21773529 111.96744537]
[-15.89305305 105.80419159]
[-27.32922173 96.09780121]
[-35.63332367 83.60612488]
[-40.15699005 69.30450439]
[-40.54701614 54.30957413]
[-36.77295685 39.79212189]
[-29.12947845 26.88563919]
[-18.21337509 16.59784889]
[-4.87695312 9.73199940]
[9.83849812 6.82416821]
[24.78402328 8.10139275]
[38.79269791 13.46394920]
[50.77075195 22.49313736]
[59.78295517 34.48397446]
[65.12564850 48.50023651]
[66.38169098 63.44755554]
[63.45300674 78.15887451]
[56.56826401 91.48554993]
[46.26501465 102.38706207]
[33.34529495 110.01324463]
[48.34450150 110.16724396]
[63.34371185 110.32123566]
[78.34291840 110.47523499]
[80.40130615 90.70064545]
[95.51408386 81.19916534]
[97.96701050 66.40108490]
[100.41994476 51.60300827]
[102.87287140 36.80492783]
[105.32579803 22.00684929]
[107.62667084 7.18436766]
[109.77525330 -7.66095495]
[111.92382812 -22.50627708]
[97.90653992 -28.03912163]
[85.54340363 -36.65593338]
[75.50112915 -47.89201355]
[68.32130432 -61.14142227]
[64.39111328 -75.68962860]
[63.92251587 -90.75206757]
[66.94077301 -105.51644897]
[73.28312683 -119.18653107]
[82.60752869 -131.02511597]
[94.41114044 -140.39376831]
[108.05739594 -146.78724670]
[122.81037140 -149.86074829]
[137.87446594 -149.44851685]
[152.43727112 -145.57281494]
[165.71345520 -138.44261169]
[176.98704529 -128.44247437]
[185.65007019 -116.11167145]
[191.23533630 -102.11518860]
[193.44165039 -87.20783997]
[192.15000916 -72.19357300]
[187.43009949 -57.88206863]
[179.53642273 -45.04513931]
[168.89469910 -34.37506485]
[156.07882690 -26.44726562]
[141.77993774 -21.68927956]
[126.76915741 -20.35769844]
[124.62057495 -5.51237583]
[122.47199249 9.33294678]
[124.63987732 16.44719124]
[120.12387848 24.45977783]
[117.67095184 39.25785828]
[115.21801758 54.05593491]
[112.76509094 68.85401154]
[110.31216431 83.65209198]
[118.87459564 91.97236633]
[121.24420929 104.38980103]
[115.77786255 116.56304932]
[103.71922302 123.76819611]
[112.38582611 136.01115417]
[121.05243683 148.25410461]
[129.71903992 160.49705505]
[152.04376221 157.15422058]
[172.88447571 170.31481934]
[180.71423340 195.86741638]
[195.42974854 198.77488708]
[212.68057251 192.41567993]
[225.45745850 204.40718079]
[240.22956848 207.01190186]
[252.09155273 196.82232666]
[267.72860718 196.69308472]
[279.75738525 206.68521118]
[282.49826050 222.08070374]
[274.65710449 235.61030579]
[259.93624878 240.88574219]
[245.28642273 235.41612244]
[237.62484741 221.78401184]
[222.85273743 219.17929077]
[212.72911072 225.87066650]
[200.36808777 223.77859497]
[192.52227783 213.49041748]
[177.80674744 210.58294678]
[172.01223755 215.34460449]
[183.53239441 224.95115662]
[195.05256653 234.55769348]
[206.57273865 244.16424561]
[220.21749878 250.39485168]
[226.97476196 263.78662109]
[223.87971497 278.46383667]
[212.29032898 287.98678589]
[197.29154968 288.17718506]
[185.46414185 278.95153809]
[181.99732971 264.35916138]
[174.80595398 251.19541931]
[167.61456299 238.03169250]
[160.42318726 224.86795044]
[154.62866211 229.62962341]
[154.62866211 244.62962341]
[154.62866211 259.62960815]
[154.62866211 274.62960815]
[154.62866211 289.62960815]
[154.62866211 304.62960815]
[154.62866211 319.62960815]
[154.62866211 334.62960815]
[154.62866211 349.62960815]
[154.62866211 364.62960815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 108]
[16 107]
[17 106]
[18 105]
[19 58]
[20 57]
[21 56]
[22 55]
[23 34]
[24 33]
[25 32]
[26 31]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[65 95]
[66 94]
[67 93]
[111 128]
[112 127]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
