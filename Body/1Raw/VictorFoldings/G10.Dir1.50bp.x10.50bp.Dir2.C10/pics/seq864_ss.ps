%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUxxxxxxxxxxCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.68512726 300.04061890]
[101.68512726 285.04061890]
[101.68512726 270.04061890]
[101.68512726 255.04063416]
[101.68512726 240.04063416]
[101.68512726 225.04063416]
[101.68512726 210.04063416]
[101.68512726 195.04063416]
[101.68512726 180.04063416]
[101.68512726 165.04063416]
[87.84191132 159.26435852]
[77.18028259 169.81564331]
[66.51865387 180.36694336]
[66.26895142 195.94177246]
[55.30623627 206.49040222]
[40.45955276 206.15635681]
[38.93859482 222.12715149]
[25.42561150 230.77462769]
[10.28660965 225.46517944]
[5.13493538 210.27177429]
[13.92251205 196.84947205]
[29.90826225 195.49473572]
[29.72868156 180.64537048]
[40.39078140 169.79298401]
[55.96736526 169.70530701]
[66.62899017 159.15402222]
[77.29061890 148.60272217]
[64.92770386 136.45814514]
[57.74866104 121.77388000]
[56.00458145 106.51076508]
[59.26681900 92.50346375]
[45.25010681 87.16194916]
[31.23339272 81.82044220]
[17.21667862 76.47892761]
[3.19996643 71.13741302]
[-10.81674671 65.79589844]
[-22.42925835 72.69570160]
[-35.70018768 71.64197540]
[-45.77864838 63.24560165]
[-49.11105347 50.75993729]
[-63.01361084 45.12797928]
[-76.91616821 39.49602127]
[-89.45990753 48.47700500]
[-104.86899567 49.22780609]
[-118.22643280 41.50884628]
[-125.26992035 27.78322029]
[-123.75190735 12.43072319]
[-114.15677643 0.35028183]
[-99.54631042 -4.60327911]
[-84.58264923 -0.84929591]
[-74.04064178 10.41434860]
[-71.28421021 25.59346771]
[-57.38165283 31.22542381]
[-43.47909927 36.85737991]
[-28.32109261 29.63984299]
[-12.30687809 35.70853043]
[-5.47523403 51.77918625]
[8.54147911 57.12070084]
[22.55819130 62.46221161]
[36.57490540 67.80372620]
[50.59161758 73.14524078]
[64.60832977 78.48674774]
[71.95841217 67.26403046]
[82.88771820 58.60651398]
[96.48471832 53.65497589]
[95.86074066 38.66796112]
[95.23676300 23.68094444]
[94.61278534 8.69392872]
[80.57729340 2.69662929]
[70.54034424 -8.80217266]
[66.49478912 -23.51938057]
[69.24387360 -38.53288651]
[78.24176788 -50.86174011]
[91.70192719 -58.05804443]
[106.95183563 -58.69297028]
[120.96360779 -52.64044571]
[130.95518494 -41.10220718]
[134.94276428 -26.36918068]
[132.13456726 -11.36661911]
[123.08820343 0.92670763]
[109.59980774 8.06995106]
[110.22377777 23.05696678]
[110.84775543 38.04398346]
[111.47173309 53.03099823]
[125.31495667 58.80727386]
[136.40626526 48.70862198]
[130.15997314 34.93041611]
[128.47909546 19.89612770]
[131.52833557 5.07866001]
[139.00894165 -8.07032108]
[150.18804932 -18.26261139]
[163.97044373 -24.49967766]
[179.00584412 -26.17047119]
[193.82127380 -23.11130714]
[206.96524048 -15.62189007]
[217.15003967 -4.43595791]
[223.37786865 9.35060596]
[225.03858948 24.38713455]
[221.96949768 39.20050430]
[214.47126770 52.33944702]
[203.27851868 62.51674652]
[189.48777771 68.73533630]
[174.45014954 70.38597870]
[159.63883972 67.30696106]
[146.50491333 59.79993820]
[135.41360474 69.89859009]
[150.02795410 98.14579010]
[143.33520508 131.62280273]
[157.97869873 134.87362671]
[172.62220764 138.12445068]
[180.74952698 125.32904816]
[192.76489258 116.08747101]
[207.21739197 111.51567841]
[222.36180115 112.16574860]
[236.36936951 117.95917511]
[247.54861450 128.19638062]
[254.54959106 141.64115906]
[256.52688599 156.67001343]
[253.24172974 171.46809387]
[245.09085083 184.24850464]
[233.05847168 193.46792603]
[218.59757996 198.01307678]
[203.45439148 197.33509827]
[189.45751953 191.51586914]
[178.29716492 181.25807190]
[171.32096863 167.80041504]
[169.37138367 152.76795959]
[154.72787476 149.51713562]
[140.08438110 146.26631165]
[134.23455811 150.95988464]
[145.52691650 160.83322144]
[156.81927490 170.70655823]
[170.29592896 177.29287720]
[174.89857483 191.56927490]
[167.80661011 204.78683472]
[153.36613464 208.84552002]
[140.42663574 201.25807190]
[136.91770935 186.67453003]
[129.72631836 173.51078796]
[122.53494263 160.34704590]
[116.68512726 165.04063416]
[116.68512726 180.04063416]
[116.68512726 195.04063416]
[116.68512726 210.04063416]
[116.68512726 225.04063416]
[116.68512726 240.04063416]
[116.68512726 255.04063416]
[116.68512726 270.04061890]
[116.68512726 285.04061890]
[116.68512726 300.04061890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 27]
[12 26]
[13 25]
[16 22]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[40 54]
[41 53]
[42 52]
[65 84]
[66 83]
[67 82]
[68 81]
[85 106]
[86 105]
[108 129]
[109 128]
[110 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
