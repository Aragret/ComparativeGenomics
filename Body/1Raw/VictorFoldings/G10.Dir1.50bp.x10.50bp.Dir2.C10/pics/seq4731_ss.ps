%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAxxxxxxxxxxGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.75046539 430.93273926]
[108.75046539 415.93273926]
[108.75046539 400.93273926]
[108.75046539 385.93273926]
[108.75046539 370.93273926]
[108.75046539 355.93273926]
[108.75046539 340.93273926]
[108.75046539 325.93273926]
[108.75046539 310.93273926]
[108.75046539 295.93273926]
[90.38346100 289.49047852]
[75.76840210 276.58981323]
[67.06913757 259.11047363]
[65.58502197 239.61218262]
[71.55693817 220.95997620]
[84.12850189 205.90315247]
[101.46884155 196.66999817]
[99.29200745 181.82879639]
[97.11516571 166.98759460]
[94.93833160 152.14639282]
[92.76149750 137.30517578]
[90.58465576 122.46397400]
[76.31432343 95.69509888]
[65.01531982 85.82937622]
[53.71631241 75.96365356]
[42.41730881 66.09792328]
[31.11830521 56.23220444]
[19.81929970 46.36648178]
[6.72614574 39.04737473]
[-7.59645176 34.59056091]
[-21.91904831 30.13374329]
[-36.24164581 25.67692757]
[-50.77658081 21.97076797]
[-65.48454285 19.02528381]
[-80.19250488 16.07980156]
[-94.90046692 13.13431931]
[-109.60842896 10.18883705]
[-119.68986511 21.77591133]
[-134.21939087 26.75471687]
[-149.28863525 23.78598022]
[-160.84405518 13.66827679]
[-165.77728271 -0.87678158]
[-162.76133728 -15.93664837]
[-152.60745239 -27.46029472]
[-138.04701233 -32.34791565]
[-122.99666595 -29.28476906]
[-111.50490570 -19.09482384]
[-106.66294861 -4.51912451]
[-91.95498657 -1.57364190]
[-77.24702454 1.37184060]
[-62.53906250 4.31732321]
[-47.83110046 7.26280546]
[-53.50586700 -6.62233162]
[-46.37505341 -19.81898117]
[-31.65071297 -22.68145752]
[-20.09514427 -13.11752510]
[-20.15453148 1.88235688]
[-31.78483009 11.35433102]
[-17.46223259 15.81114674]
[-3.13963604 20.26796150]
[11.18296146 24.72477722]
[1.26690817 13.46991730]
[-5.14890385 -0.08874621]
[-7.56377983 -14.89308262]
[-5.78926086 -29.78774834]
[0.03616895 -43.61035156]
[9.45788765 -55.28216553]
[21.74061584 -63.89231110]
[35.92580032 -68.76884460]
[50.90641403 -69.53119659]
[65.51335907 -66.11987305]
[78.60669708 -58.80109787]
[89.16461182 -48.14603424]
[96.36315918 -34.98620987]
[99.64055634 -20.34863091]
[98.74102783 -5.37562799]
[93.73477173 8.76429558]
[85.01248932 20.96764755]
[73.25487518 30.28206825]
[59.37949371 35.98065186]
[44.46920013 37.61867523]
[29.68502235 35.06747437]
[40.98402786 44.93320084]
[52.28303146 54.79892349]
[63.58203888 64.66464233]
[74.88104248 74.53036499]
[86.18004608 84.39609528]
[80.46157837 70.52890015]
[86.84276581 56.95390701]
[101.16912079 52.50917816]
[114.11339569 60.08847809]
[117.24816132 74.75726318]
[108.53289795 86.96512604]
[121.77548218 79.91999054]
[135.01806641 72.87485504]
[148.26065063 65.82971954]
[148.71293640 50.47748947]
[156.79437256 37.41664124]
[170.33113098 30.16047478]
[185.68186951 30.66086769]
[198.71731567 38.78321457]
[205.93101501 52.34264374]
[205.38250732 67.69174194]
[197.21934509 80.70166779]
[183.63737488 87.87282562]
[168.29006958 87.27621460]
[155.30578613 79.07230377]
[142.06320190 86.11743927]
[128.82061768 93.16257477]
[115.57803345 100.20771027]
[130.57711792 100.37385559]
[145.21910095 97.11618805]
[159.62318420 101.30214691]
[170.23864746 111.89987946]
[174.44869995 126.29693604]
[171.21553040 140.94435120]
[161.33613586 152.23139954]
[147.24586487 157.37574768]
[132.41809082 155.10925293]
[120.50796509 145.99064636]
[114.45146942 132.26788330]
[105.42586517 120.28713989]
[107.60269928 135.12834167]
[109.77953339 149.96954346]
[111.95637512 164.81076050]
[114.13320923 179.65196228]
[116.31005096 194.49316406]
[127.17520142 195.71080017]
[137.52694702 199.20249939]
[146.89538574 204.80599976]
[154.85607910 212.26329041]
[161.04924011 221.23242188]
[165.19596863 231.30326843]
[167.11090088 242.01622009]
[166.71040344 252.88319397]
[164.01626587 263.40985107]
[159.15454102 273.11807251]
[152.34960938 281.56774902]
[143.91389465 288.37661743]
[134.23348999 293.23760986]
[123.75046539 295.93273926]
[123.75046539 310.93273926]
[123.75046539 325.93273926]
[123.75046539 340.93273926]
[123.75046539 355.93273926]
[123.75046539 370.93273926]
[123.75046539 385.93273926]
[123.75046539 400.93273926]
[123.75046539 415.93273926]
[123.75046539 430.93273926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 127]
[18 126]
[19 125]
[20 124]
[21 123]
[22 122]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 61]
[30 60]
[31 59]
[32 58]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[93 110]
[94 109]
[95 108]
[96 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
