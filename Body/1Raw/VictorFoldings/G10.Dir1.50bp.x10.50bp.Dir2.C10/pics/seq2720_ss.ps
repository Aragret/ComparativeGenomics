%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACxxxxxxxxxxACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.29528809 88.50720978]
[127.77110291 94.99537659]
[114.24691010 101.48354340]
[106.19573975 112.91464996]
[92.24125671 112.04064941]
[78.71706390 118.52881622]
[65.19287109 125.01698303]
[56.09718704 137.96221924]
[41.27539444 136.49127197]
[27.75120354 142.97944641]
[27.31129456 152.81706238]
[23.30810738 161.75038147]
[16.34177971 168.54478455]
[7.41859961 172.27861023]
[-2.19422317 172.46797180]
[-11.14848328 169.12913513]
[-18.20406723 162.77015686]
[-32.22077942 168.11166382]
[-46.23749161 173.45318604]
[-60.25420380 178.79469299]
[-74.27091980 184.13621521]
[-88.28762817 189.47772217]
[-89.07942200 204.68603516]
[-95.99432373 218.25453186]
[-107.83428955 227.83238220]
[-122.54797363 231.76014709]
[-137.58613586 229.35734558]
[-150.34333801 221.04026794]
[-158.60929871 208.24989319]
[-160.95190430 193.20222473]
[-156.96527100 178.50437927]
[-147.34013367 166.70283508]
[-133.74406433 159.84228516]
[-118.53270721 159.11137390]
[-104.34149170 164.63670349]
[-93.62914276 175.46101379]
[-79.61243439 170.11949158]
[-65.59571838 164.77798462]
[-51.57900620 159.43647766]
[-37.56229401 154.09495544]
[-23.54557991 148.75344849]
[-16.89896393 129.48277283]
[2.01770091 121.13936615]
[21.26303864 129.45524597]
[34.78722763 122.96708679]
[42.91557312 110.48593140]
[58.70470810 111.49279022]
[72.22889709 105.00462341]
[85.75308990 98.51645660]
[93.80426025 87.08535004]
[107.75874329 87.95935059]
[121.28293610 81.47118378]
[134.80712891 74.98301697]
[128.49240112 58.55650711]
[123.61915588 41.64665604]
[120.22370148 24.37969208]
[118.33132172 6.88450480]
[117.95605469 -10.70831585]
[119.10064697 -28.26746178]
[121.75646973 -45.66188049]
[125.90363312 -62.76175690]
[131.51112366 -79.43947601]
[138.53700256 -95.57058716]
[146.92878723 -111.03471375]
[156.62377930 -125.71647644]
[167.54954529 -139.50633240]
[179.62448120 -152.30139160]
[192.75842285 -164.00622559]
[206.85328674 -174.53349304]
[221.80384827 -183.80471802]
[237.49845886 -191.75073242]
[253.81994629 -198.31230164]
[270.64648438 -203.44052124]
[287.85244751 -207.09716797]
[305.30941772 -209.25505066]
[322.88708496 -209.89810181]
[340.45422363 -209.02162170]
[357.87976074 -206.63220215]
[375.03363037 -202.74774170]
[391.78781128 -197.39732361]
[408.01730347 -190.62094116]
[423.60095215 -182.46923828]
[431.59088135 -195.16416931]
[439.58078003 -207.85910034]
[447.57070923 -220.55401611]
[455.56060791 -233.24894714]
[453.41870117 -249.14837646]
[464.61755371 -260.63601685]
[480.56634521 -258.89950562]
[489.03054810 -245.27098083]
[483.51715088 -230.20506287]
[468.25555420 -225.25903320]
[460.26562500 -212.56410217]
[452.27572632 -199.86917114]
[444.28579712 -187.17424011]
[436.29589844 -174.47932434]
[446.94906616 -166.69863892]
[457.07608032 -158.24417114]
[466.63430786 -149.15142822]
[475.58367920 -139.45858765]
[483.88653564 -129.20631409]
[491.50799561 -118.43766022]
[498.41607666 -107.19784546]
[504.58169556 -95.53404999]
[509.97900391 -83.49525452]
[514.58526611 -71.13200378]
[518.38116455 -58.49621964]
[521.35064697 -45.64094925]
[523.48132324 -32.62017822]
[524.76416016 -19.48858643]
[525.19384766 -6.30131721]
[524.76843262 6.88624907]
[523.48974609 20.01873016]
[521.36309814 33.04097366]
[518.39746094 45.89828491]
[514.60522461 58.53667068]
[510.00234985 70.90304565]
[504.60806274 82.94547272]
[498.44506836 94.61336517]
[491.53918457 105.85771179]
[483.91940308 116.63129425]
[475.61773682 126.88883972]
[466.66900635 136.58726501]
[457.11080933 145.68583679]
[446.98321533 154.14631653]
[436.32876587 161.93315125]
[425.19223022 169.01364136]
[413.62030029 175.35803223]
[401.66162109 180.93965149]
[389.36639404 185.73504639]
[376.78622437 189.72406006]
[363.97393799 192.88992310]
[350.98333740 195.21931458]
[337.86898804 196.70242310]
[324.68597412 197.33302307]
[311.48962402 197.10842896]
[298.33535767 196.02955627]
[285.27844238 194.10093689]
[272.37371826 191.33064270]
[259.67535400 187.73027039]
[247.23670959 183.31494141]
[235.11000061 178.10316467]
[223.34619141 172.11680603]
[211.99467468 165.38101196]
[201.10314941 157.92402649]
[190.71734619 149.77714539]
[180.88092041 140.97459412]
[171.63516235 131.55329895]
[163.01893616 121.55281830]
[155.06843567 111.01513672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[5 49]
[6 48]
[7 47]
[9 45]
[10 44]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
