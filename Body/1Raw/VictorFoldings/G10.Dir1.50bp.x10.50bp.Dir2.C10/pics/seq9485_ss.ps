%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGxxxxxxxxxxCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.41134644]
[92.50000000 239.41134644]
[92.50000000 224.41134644]
[92.50000000 209.41134644]
[92.50000000 194.41134644]
[92.50000000 179.41134644]
[92.50000000 164.41134644]
[92.50000000 149.41134644]
[92.50000000 134.41134644]
[92.50000000 119.41133881]
[87.16954803 114.13533020]
[83.36157990 128.64393616]
[68.89275360 132.60032654]
[58.23207855 122.04808044]
[62.04035568 107.53956604]
[76.50863647 103.58332062]
[71.17818451 98.30731201]
[56.17897415 98.46130371]
[41.17976379 98.61530304]
[26.18055344 98.76930237]
[11.18134403 98.92330170]
[6.23976326 112.31501007]
[-2.96461725 123.18622589]
[-15.30604267 130.23898315]
[-29.28586769 132.64045715]
[-43.21453094 130.12113953]
[-55.41574478 123.00505066]
[-64.42824554 112.16812897]
[-69.18077087 98.93049622]
[-84.17997742 98.77650452]
[-99.17918396 98.62250519]
[-114.17839813 98.46850586]
[-120.89542389 112.17414093]
[-132.89921570 121.60132599]
[-147.80639648 124.87829590]
[-162.65715027 121.35440063]
[-174.50285339 111.72930908]
[-180.99150085 97.91410065]
[-180.83480835 82.65178680]
[-174.06385803 68.97271729]
[-162.02304077 59.59287262]
[-147.10307312 56.37463379]
[-132.26631165 59.95698166]
[-120.45861053 69.62863922]
[-114.02439880 83.46929932]
[-99.02519226 83.62329102]
[-84.02597809 83.77729034]
[-69.02677155 83.93128967]
[-63.05453491 69.28340149]
[-51.90032578 58.01264954]
[-37.24440002 51.85870361]
[-21.31059265 51.78730011]
[-6.52892017 57.83877563]
[4.83503389 69.11746216]
[11.02734756 83.92408752]
[26.02655792 83.77008820]
[41.02576828 83.61609650]
[56.02497482 83.46209717]
[71.02418518 83.30809784]
[85.89550018 77.37213135]
[98.67598724 80.15631104]
[105.39608765 88.05000305]
[115.94810486 77.38909912]
[126.50011444 66.72818756]
[137.05212402 56.06727982]
[147.60414124 45.40636826]
[138.09526062 33.78746796]
[129.85299683 21.23825264]
[122.96765900 7.89622021]
[117.51468658 -6.09244490]
[113.55381775 -20.57447624]
[111.12845612 -35.39120102]
[110.26517487 -50.38027954]
[110.97343445 -65.37747955]
[113.24546814 -80.21849060]
[117.05638885 -94.74069977]
[122.36444092 -108.78499603]
[129.11146545 -122.19750977]
[137.22354126 -134.83126831]
[146.61178589 -146.54786682]
[157.17332458 -157.21891785]
[168.79246521 -166.72752380]
[181.34187317 -174.96948242]
[194.68408203 -181.85449219]
[208.67286682 -187.30712891]
[223.15499878 -191.26765442]
[237.97178650 -193.69265747]
[252.96087646 -194.55557251]
[267.95806885 -193.84693909]
[282.79901123 -191.57455444]
[297.32113647 -187.76327515]
[311.36529541 -182.45487976]
[324.77764893 -175.70753479]
[337.41122437 -167.59515381]
[349.12759399 -158.20663452]
[359.79840088 -147.64482117]
[369.30670166 -136.02545166]
[377.54837036 -123.47584534]
[384.43304443 -110.13347626]
[389.88534546 -96.14454651]
[393.84552002 -81.66232300]
[396.27014160 -66.84548187]
[397.13272095 -51.85635757]
[396.42370605 -36.85919189]
[394.15097046 -22.01829147]
[390.33932495 -7.49626732]
[385.03060913 6.54777241]
[378.28292847 19.95995331]
[370.17022705 32.59332275]
[360.78143311 44.30946350]
[350.21936035 54.98000717]
[338.59976196 64.48803711]
[326.04995728 72.72939301]
[312.70742798 79.61375427]
[298.71835327 85.06571198]
[284.23602295 89.02552795]
[269.41912842 91.44980621]
[254.42999268 92.31199646]
[239.43284607 91.60264587]
[224.59199524 89.32952881]
[210.07006836 85.51754761]
[196.02615356 80.20847321]
[182.61413574 73.46047211]
[169.98097229 65.34748077]
[158.26506042 55.95838547]
[147.71304321 66.61929321]
[137.16102600 77.28020477]
[126.60900879 87.94110870]
[116.05699158 98.60202026]
[127.79852295 89.26732635]
[142.26828003 85.31436157]
[157.12500000 87.38274384]
[169.96475220 95.13779449]
[178.70999146 107.32469940]
[181.94569397 121.97154999]
[179.14830017 136.70840454]
[170.77046204 149.15072632]
[158.16773987 157.28530884]
[143.37933350 159.79591370]
[128.79809570 156.27630615]
[116.78336334 147.29597473]
[109.27919006 134.30801392]
[107.50000000 119.41133881]
[107.50000000 134.41134644]
[107.50000000 149.41134644]
[107.50000000 164.41134644]
[107.50000000 179.41134644]
[107.50000000 194.41134644]
[107.50000000 209.41134644]
[107.50000000 224.41134644]
[107.50000000 239.41134644]
[107.50000000 254.41134644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[29 48]
[30 47]
[31 46]
[32 45]
[62 129]
[63 128]
[64 127]
[65 126]
[66 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
