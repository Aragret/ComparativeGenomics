%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUxxxxxxxxxxGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 300.31466675]
[92.50000000 285.31466675]
[92.50000000 270.31466675]
[92.50000000 255.31466675]
[92.50000000 240.31466675]
[92.50000000 225.31466675]
[92.50000000 210.31466675]
[92.50000000 195.31466675]
[92.50000000 180.31466675]
[92.50000000 165.31466675]
[85.75717163 164.18252563]
[79.16839600 162.35623169]
[72.80491638 159.85551453]
[66.73556519 156.70742798]
[61.02599335 152.94602966]
[55.73793793 148.61198425]
[50.92860413 143.75218201]
[46.65000153 138.41917419]
[42.94840622 132.67063904]
[39.86385345 126.56876373]
[37.42970276 120.17952728]
[22.72174072 123.12500763]
[8.01377964 126.07049561]
[-3.99837518 136.36703491]
[-17.99719620 131.27957153]
[-32.70515823 134.22505188]
[-42.10488892 148.94178772]
[-58.90322495 152.27346802]
[-72.65599060 142.64437866]
[-87.29949188 145.89520264]
[-99.01476288 157.37059021]
[-114.73548889 152.70252991]
[-118.28954315 136.69314575]
[-106.02081299 125.81149292]
[-90.55031586 131.25169373]
[-75.90681458 128.00086975]
[-70.55190277 116.23984528]
[-59.22166061 109.62925720]
[-45.95955276 110.78874207]
[-35.65063858 119.51708984]
[-20.94267845 116.57160950]
[-9.98253536 106.48574829]
[5.06829691 111.36253357]
[19.77625847 108.41704559]
[34.48421860 105.47156525]
[36.64501572 82.43863678]
[46.65047073 61.58017349]
[63.26170349 45.47887802]
[84.42189789 36.12842560]
[107.51097870 34.68659592]
[129.67005920 41.33192062]
[137.92234802 28.80595970]
[146.17463684 16.27999687]
[140.00135803 0.56558299]
[144.34466553 -15.57806110]
[157.30979919 -25.86742783]
[173.68663025 -26.41942406]
[181.67654419 -39.11435318]
[177.31846619 -43.24252701]
[174.19506836 -49.02423859]
[172.89279175 -56.05027008]
[173.85375977 -63.71466827]
[174.16581726 -78.71141815]
[174.47787476 -93.70817566]
[174.78993225 -108.70492554]
[160.33767700 -113.06784821]
[147.59907532 -121.16912079]
[137.51940918 -132.40757751]
[130.84666443 -145.94924927]
[128.07598877 -160.78926086]
[129.41300964 -175.82638550]
[134.75848389 -189.94476318]
[143.71574402 -202.09671021]
[155.62011719 -211.38047791]
[169.58822632 -217.10716248]
[184.58351135 -218.85177612]
[199.49325562 -216.48489380]
[213.21104431 -210.18211365]
[224.71891785 -200.41117859]
[233.16293335 -187.89714050]
[237.91647339 -173.56861877]
[238.62681580 -158.48889160]
[235.24121094 -143.77699280]
[228.01092529 -130.52461243]
[217.47248840 -119.71517181]
[204.40791321 -112.15081787]
[189.78668213 -108.39286804]
[189.47462463 -93.39611816]
[189.16256714 -78.39936066]
[188.85050964 -63.40261078]
[201.02235413 -54.63640213]
[215.14715576 -59.68515778]
[229.27195740 -64.73391724]
[243.39675903 -69.78266907]
[257.52154541 -74.83142853]
[264.60449219 -80.70372772]
[271.99307251 -79.83495331]
[286.21984863 -84.58876801]
[300.44662476 -89.34258270]
[314.67340088 -94.09639740]
[328.90017700 -98.85021210]
[343.12695312 -103.60402679]
[349.95938110 -117.85511780]
[364.89520264 -123.02203369]
[379.07324219 -116.03932190]
[384.08197021 -101.04971313]
[376.94973755 -86.94627380]
[361.90802002 -82.09632111]
[347.88076782 -89.37725067]
[333.65399170 -84.62343597]
[319.42721558 -79.86962128]
[305.20043945 -75.11580658]
[290.97366333 -70.36199188]
[276.74688721 -65.60817719]
[262.57031250 -60.70662689]
[248.44551086 -55.65786743]
[234.32070923 -50.60911179]
[220.19590759 -45.56035614]
[206.07110596 -40.51160049]
[194.37147522 -31.12443733]
[186.38156128 -18.42950821]
[192.48114014 -6.51350784]
[191.87503052 6.96774197]
[184.61499023 18.47175598]
[172.51533508 24.92243195]
[158.70059204 24.53228760]
[150.44830322 37.05825043]
[142.19601440 49.58420944]
[150.50910950 57.91572952]
[157.20344543 67.59597778]
[162.06451416 78.31473541]
[164.93650818 89.72846222]
[165.72740173 101.47138214]
[164.41181946 113.16714478]
[161.03193665 124.44091797]
[155.69607544 134.93139648]
[148.57524109 144.30238342]
[139.89764404 152.25354004]
[129.94139099 158.53005981]
[119.02556610 162.93078613]
[107.50000000 165.31466675]
[107.50000000 180.31466675]
[107.50000000 195.31466675]
[107.50000000 210.31466675]
[107.50000000 225.31466675]
[107.50000000 240.31466675]
[107.50000000 255.31466675]
[107.50000000 270.31466675]
[107.50000000 285.31466675]
[107.50000000 300.31466675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 45]
[22 44]
[23 43]
[25 41]
[26 40]
[29 36]
[30 35]
[51 128]
[52 127]
[53 126]
[57 121]
[58 120]
[62 90]
[63 89]
[64 88]
[65 87]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
