%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUxxxxxxxxxxCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.49108887 243.82328796]
[95.17903137 228.82652283]
[94.86697388 213.82977295]
[94.55491638 198.83302307]
[94.24285889 183.83627319]
[93.93080902 168.83950806]
[93.61875153 153.84275818]
[93.30669403 138.84600830]
[92.99463654 123.84925079]
[78.81807709 118.94770050]
[69.30972290 130.54904175]
[74.80423737 144.89149475]
[72.37555695 160.05714417]
[62.67698288 171.96652222]
[48.31738281 177.41606140]
[33.15941620 174.93984985]
[21.28049850 165.20399475]
[15.87600231 150.82737732]
[18.39970779 135.67724609]
[28.17275047 123.82891083]
[42.56623459 118.46950531]
[57.70838165 121.04068756]
[67.21673584 109.43934631]
[62.16798019 95.31453705]
[47.46002197 92.36905670]
[32.75205994 89.42357635]
[18.04409790 86.47808838]
[3.70206809 96.44020081]
[-13.08377552 93.04615021]
[-22.06792641 78.86366272]
[-36.83398438 76.22480011]
[-51.60003662 73.58593750]
[-66.36609650 70.94707489]
[-79.24220276 79.71312714]
[-94.17948914 76.82659149]
[-102.45722961 64.49716949]
[-117.22328186 61.85830688]
[-131.98933411 59.21944427]
[-146.75538635 56.58057785]
[-160.68736267 64.53544617]
[-175.53927612 58.46913528]
[-179.91802979 43.03520966]
[-170.46459961 30.07324982]
[-154.43086243 29.52656364]
[-144.11653137 41.81452179]
[-129.35047913 44.45338821]
[-114.58441925 47.09225082]
[-99.81835938 49.73111725]
[-87.78257751 41.03195572]
[-72.77010345 43.49779129]
[-63.72723007 56.18101883]
[-48.96117401 58.81988144]
[-34.19511795 61.45874786]
[-19.42906189 64.09761047]
[-9.95812225 55.30567932]
[3.04398394 53.56799316]
[14.83683205 59.74510193]
[20.98958015 71.77013397]
[35.69754028 74.71561432]
[50.40550232 77.66109467]
[65.11346436 80.60657501]
[77.87213135 73.90483093]
[90.40537262 73.14927673]
[100.38619995 77.19035339]
[106.30043030 84.08971405]
[107.67097473 91.55103302]
[119.17278290 81.92250061]
[130.67457581 72.29397583]
[142.17639160 62.66545105]
[127.33200836 64.82054138]
[112.36707306 63.79541779]
[97.95523834 59.63623428]
[84.74522400 52.53020859]
[73.33168030 42.79721832]
[64.22838593 30.87538910]
[57.84511948 17.30137253]
[54.46921921 2.68620014]
[54.25264740 -12.31223679]
[57.20515442 -27.01878929]
[63.19383621 -40.77145004]
[71.94911194 -52.95115280]
[83.07687378 -63.00962830]
[96.07620239 -70.49410248]
[110.36194611 -75.06767273]
[125.29103851 -76.52445221]
[140.19145203 -74.79886627]
[154.39245605 -69.96859741]
[167.25479126 -62.25106812]
[178.19947815 -51.99368668]
[186.73384094 -39.65818405]
[192.47370911 -25.79982948]
[195.16070557 -11.04245758]
[194.67388916 3.94964027]
[191.03514099 18.50160217]
[184.40829468 31.95837784]
[175.09162903 43.71421814]
[163.50262451 53.24119568]
[178.36567688 51.21886063]
[183.90461731 47.42049026]
[189.65977478 47.08951187]
[193.88761902 49.43490982]
[208.82191467 48.03260803]
[223.75622559 46.63030243]
[238.69053650 45.22800064]
[253.62484741 43.82569504]
[268.55914307 42.42339325]
[275.55850220 28.67520523]
[288.89108276 20.91337013]
[304.30249023 21.61465645]
[316.87503052 30.55529022]
[322.59683228 44.88234711]
[319.64208984 60.02411270]
[308.95367432 71.14890289]
[293.94216919 74.70684814]
[279.39776611 69.56260681]
[269.96145630 57.35770035]
[255.02714539 58.76000214]
[240.09283447 60.16230774]
[225.15852356 61.56460953]
[210.22422791 62.96691513]
[195.28991699 64.36921692]
[180.38801575 66.08190918]
[165.52496338 68.10424042]
[151.80491638 74.16725159]
[140.30311584 83.79578400]
[128.80130005 93.42430878]
[117.29949951 103.05283356]
[129.37274170 94.15132141]
[143.97668457 90.72719574]
[158.74835205 93.33450317]
[171.29757690 101.55137634]
[179.59382629 114.04825592]
[182.29473877 128.80308533]
[178.96325684 143.42845154]
[170.13845825 155.55787659]
[157.24824524 163.22874451]
[142.37831116 165.19987488]
[127.93472290 161.15231323]
[116.25453186 151.74099731]
[109.22765350 138.48870850]
[107.99139404 123.53719330]
[108.30344391 138.53395081]
[108.61550140 153.53070068]
[108.92755890 168.52745056]
[109.23961639 183.52421570]
[109.55167389 198.52096558]
[109.86373138 213.51771545]
[110.17578125 228.51446533]
[110.48783875 243.51123047]
[113.07884216 262.71896362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 23]
[11 22]
[24 61]
[25 60]
[26 59]
[27 58]
[30 54]
[31 53]
[32 52]
[33 51]
[36 48]
[37 47]
[38 46]
[39 45]
[66 127]
[67 126]
[68 125]
[69 124]
[97 123]
[98 122]
[101 121]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
