%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCxxxxxxxxxxUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.24610901 451.40084839]
[69.24610901 436.40084839]
[69.24610901 421.40084839]
[69.24610901 406.40084839]
[69.24610901 391.40084839]
[69.24610901 376.40084839]
[69.24610901 361.40084839]
[69.24610901 346.40084839]
[69.24610901 331.40084839]
[69.24610901 316.40084839]
[67.53342438 301.49893188]
[64.13044739 286.89004517]
[60.72746658 272.28115845]
[56.06035233 286.53662109]
[47.78394318 299.04666138]
[36.48948288 308.91757202]
[22.98382950 315.44424438]
[8.23179531 318.16040039]
[-6.71276951 316.87197876]
[-20.78225708 311.67105103]
[-32.97157288 302.92916870]
[-42.40993881 291.27081299]
[-48.42310333 277.52883911]
[-50.58149338 262.68493652]
[-48.73092270 247.79954529]
[-43.00358582 233.93600464]
[-33.80863953 222.08471680]
[-21.80294609 213.09231567]
[-7.84416437 207.60119629]
[7.07051897 206.00363159]
[21.87563133 208.41374207]
[35.51353073 214.65934753]
[47.00995255 224.29429626]
[55.54362106 236.63029480]
[60.50379562 250.78067017]
[63.60211945 236.10414124]
[66.70043945 221.42761230]
[61.75887299 207.37663269]
[72.17980957 195.47224426]
[67.23824310 181.42124939]
[77.65917969 169.51686096]
[80.75749969 154.84033203]
[83.85582733 140.16380310]
[86.95414734 125.48728180]
[66.75641632 112.07848358]
[61.22784805 83.57529449]
[80.04313660 55.41755676]
[69.60332489 44.64674759]
[59.16351318 33.87593842]
[48.72370148 23.10513115]
[34.43741989 28.37979126]
[19.24127769 27.38120079]
[5.76810026 20.28237152]
[-3.64780354 8.31321716]
[-7.37507200 -6.45253229]
[-4.76793289 -21.45662308]
[3.72191119 -34.09950256]
[16.62354279 -42.19071960]
[31.70167732 -44.32841873]
[46.34393692 -40.14223480]
[58.01345825 -30.35744286]
[64.68843079 -16.66932297]
[65.21237183 -1.44942248]
[59.49451065 12.66531849]
[69.93431854 23.43612671]
[80.37413025 34.20693588]
[90.81394958 44.97774506]
[98.31029510 44.74372482]
[94.31229401 30.28633690]
[90.31430054 15.82894993]
[86.31630707 1.37156391]
[77.50994110 -10.77125168]
[76.22615051 -25.71621323]
[82.83261871 -39.18301010]
[95.43721771 -47.31468201]
[110.42992401 -47.78227997]
[123.51676178 -40.45187759]
[130.94958496 -27.42294502]
[130.59959412 -12.42702866]
[122.56827545 0.23984949]
[119.47985077 14.91845989]
[116.39141846 29.59707069]
[113.30299377 44.27568054]
[120.79933929 44.04166031]
[130.54699707 32.64064026]
[140.29464722 21.23961830]
[150.04229736 9.83859730]
[159.78994751 -1.56242383]
[169.53759766 -12.96344471]
[168.05609131 -28.69814110]
[178.19882202 -40.81838989]
[193.94830322 -42.13346100]
[205.96064758 -31.86314583]
[207.10913086 -16.10064316]
[196.71238708 -4.19756222]
[180.93861389 -3.21579266]
[171.19096375 8.18522835]
[161.44331360 19.58624840]
[151.69566345 30.98727036]
[141.94801331 42.38829041]
[132.20036316 53.78931046]
[135.79161072 60.37360382]
[150.78720093 60.73735046]
[142.97412109 73.54218292]
[146.56538391 80.12648010]
[161.42842102 78.10414124]
[176.29147339 76.08181000]
[187.10804749 64.23354340]
[203.10516357 65.44673920]
[212.01119995 78.79072571]
[206.99421692 94.02914429]
[191.90280151 99.47238159]
[178.31381226 90.94485474]
[163.45075989 92.96718597]
[148.58770752 94.98952484]
[129.49063110 125.11954498]
[101.63066864 128.58560181]
[98.53234863 143.26213074]
[95.43402863 157.93865967]
[92.33570862 172.61517334]
[97.05566406 187.71592712]
[86.85633850 198.57055664]
[91.57629395 213.67131042]
[81.37696838 224.52593994]
[78.27864075 239.20246887]
[75.18032074 253.87899780]
[75.33635712 268.87817383]
[78.73933411 283.48706055]
[82.14231873 298.09597778]
[88.20359039 284.37515259]
[99.86659241 274.94253540]
[114.55157471 271.88449097]
[129.01034546 275.87750244]
[140.04475403 286.03829956]
[145.21411133 300.11941528]
[143.37498474 315.00622559]
[134.93417358 327.40594482]
[121.75872040 334.57583618]
[106.76290131 334.92999268]
[93.26365662 328.39007568]
[84.24610901 316.40084839]
[84.24610901 331.40084839]
[84.24610901 346.40084839]
[84.24610901 361.40084839]
[84.24610901 376.40084839]
[84.24610901 391.40084839]
[84.24610901 406.40084839]
[84.24610901 421.40084839]
[84.24610901 436.40084839]
[84.24610901 451.40084839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[13 127]
[35 126]
[36 125]
[37 124]
[39 122]
[41 120]
[42 119]
[43 118]
[44 117]
[47 67]
[48 66]
[49 65]
[50 64]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
