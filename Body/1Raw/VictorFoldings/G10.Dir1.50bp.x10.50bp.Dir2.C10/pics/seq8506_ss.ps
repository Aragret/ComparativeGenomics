%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGxxxxxxxxxxUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.62202454 340.25933838]
[144.62202454 325.25933838]
[144.62202454 310.25933838]
[144.62202454 295.25933838]
[144.62202454 280.25933838]
[144.62202454 265.25933838]
[144.62202454 250.25933838]
[144.62202454 235.25933838]
[144.62202454 220.25933838]
[144.62202454 205.25933838]
[141.50601196 201.50767517]
[140.06681824 196.37203979]
[140.89419556 190.63943481]
[133.71168518 177.47085571]
[126.52917480 164.30227661]
[119.34667206 151.13369751]
[112.16416168 137.96510315]
[97.68032837 139.79869080]
[83.50758362 136.29486084]
[71.54664612 127.92352295]
[63.40158844 115.80735779]
[48.75808716 119.05818176]
[36.96273804 129.60238647]
[22.86110878 124.80725861]
[8.21760750 128.05807495]
[5.61678886 143.03486633]
[-2.52164555 155.87365723]
[-14.95664310 164.61660767]
[-29.79195786 167.93049622]
[-44.76531219 165.30998230]
[-57.59337616 157.15466309]
[-66.31996918 144.70817566]
[-69.61434174 129.86851501]
[-66.97412872 114.89862061]
[-58.80194473 102.08129883]
[-46.34398651 93.37108612]
[-31.50000572 90.09623718]
[-16.53359795 92.75614166]
[-3.72703242 100.94517517]
[4.96678162 113.41458130]
[19.61028290 110.16375732]
[30.35823059 99.85206604]
[45.50725937 104.41468048]
[60.15076065 101.16385651]
[66.04099274 79.11693573]
[83.05836487 63.91264343]
[79.35220337 49.37770462]
[75.64604187 34.84276962]
[71.93988037 20.30783463]
[66.75546265 12.70693493]
[68.31116486 5.43194771]
[64.90818787 -9.17694473]
[61.50520706 -23.78583717]
[55.44219589 -37.50588989]
[46.93110657 -49.85746384]
[38.42001343 -62.20903778]
[29.78089905 -74.47140503]
[21.01469231 -86.64324188]
[5.84721708 -92.87860107]
[3.93192959 -109.16551971]
[17.23911285 -118.74941254]
[32.07947540 -111.77118683]
[33.18652725 -95.40944672]
[41.95273590 -83.23760986]
[48.45595169 -79.62460327]
[50.77158737 -70.72012329]
[59.28267670 -58.36855316]
[67.79376984 -46.01698303]
[67.04996490 -60.99852753]
[70.88785553 -75.49923706]
[78.94543457 -88.15133667]
[90.46266174 -97.76140594]
[104.35317993 -103.42298126]
[119.30677032 -104.60204315]
[133.91293335 -101.18737030]
[146.79394531 -93.50104523]
[156.73480225 -82.26808929]
[162.79785156 -68.54804993]
[164.41116333 -53.63506317]
[161.42259216 -38.93579865]
[154.11402893 -25.83675766]
[143.17483521 -15.57351208]
[129.63687134 -9.11413860]
[114.77709961 -7.06791782]
[99.99715424 -9.62785912]
[86.69116211 -16.55249596]
[76.11409760 -27.18881607]
[79.51708221 -12.57992268]
[82.92005920 2.02896976]
[86.47481537 16.60167313]
[90.18097687 31.13660812]
[93.88713837 45.67154312]
[97.59329987 60.20648193]
[109.60782623 61.30883789]
[120.74237823 65.95487976]
[129.97715759 73.71908569]
[142.91522217 66.12918091]
[155.85327148 58.53927231]
[163.47929382 44.02114868]
[179.87393188 43.63686371]
[188.17179871 57.78173447]
[179.83676147 71.90473175]
[163.44317627 71.47732544]
[150.50512695 79.06723785]
[137.56706238 86.65714264]
[139.68045044 96.15574646]
[139.42971802 105.88338470]
[136.82978821 115.26049805]
[132.03558350 123.72840881]
[125.33274078 130.78260803]
[132.51524353 143.95118713]
[139.69775391 157.11976624]
[146.88026428 170.28834534]
[154.06277466 183.45692444]
[154.45726013 168.46211243]
[158.12086487 153.91639709]
[164.87628174 140.52369690]
[174.39659119 128.93215942]
[186.22103882 119.70273590]
[199.77742004 113.28209686]
[214.40966797 109.98095703]
[229.40963745 109.95906830]
[244.05145264 113.21750641]
[257.62649536 119.59856415]
[269.47784424 128.79344177]
[279.03192139 140.35716248]
[285.82638550 153.73008728]
[289.53240967 168.26506042]
[289.97064209 183.25866699]
[287.11990356 197.98527527]
[281.11810303 211.73222351]
[272.25573730 223.83421326]
[260.96166992 233.70559692]
[247.78248596 240.86865234]
[233.35598755 244.97669983]
[218.38034058 245.83096313]
[203.58026123 243.39007568]
[189.67202759 237.77218628]
[177.32868958 229.24914551]
[167.14761353 218.23344421]
[159.62202454 205.25933838]
[159.62202454 220.25933838]
[159.62202454 235.25933838]
[159.62202454 250.25933838]
[159.62202454 265.25933838]
[159.62202454 280.25933838]
[159.62202454 295.25933838]
[159.62202454 310.25933838]
[159.62202454 325.25933838]
[159.62202454 340.25933838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[21 44]
[22 43]
[24 41]
[25 40]
[46 93]
[47 92]
[48 91]
[49 90]
[51 89]
[52 88]
[53 87]
[54 68]
[55 67]
[56 66]
[57 64]
[58 63]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
