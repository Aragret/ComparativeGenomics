%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAUAGxxxxxxxxxxGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 285.18099976]
[92.50000000 270.18099976]
[92.50000000 255.18098450]
[92.50000000 240.18098450]
[92.50000000 225.18098450]
[92.50000000 210.18098450]
[92.50000000 195.18098450]
[92.50000000 180.18098450]
[92.50000000 165.18098450]
[92.50000000 150.18098450]
[85.20693207 148.53396606]
[78.23508453 145.83306885]
[71.73585510 142.13691711]
[61.63042068 153.22204590]
[51.52498627 164.30717468]
[50.82659149 180.33502197]
[37.77575302 189.66535950]
[22.38395309 185.14074707]
[16.45846748 170.23208618]
[24.54482079 156.37602234]
[40.43985367 154.20175171]
[50.54528809 143.11660767]
[60.65072250 132.03147888]
[50.73489380 112.13796997]
[50.27402115 89.91494751]
[59.35655975 69.62744904]
[76.23938751 55.16904449]
[97.68235016 49.31460190]
[99.21964264 34.39358521]
[100.75693512 19.47256851]
[102.29422760 4.55155134]
[97.19405365 1.35335517]
[93.02384949 -2.89775300]
[89.99114990 -7.94712067]
[88.23671722 -13.50181007]
[73.27543640 -14.57888031]
[58.31415939 -15.65594959]
[43.35287857 -16.73301888]
[27.12047386 -11.83961105]
[17.92472649 -26.08301353]
[29.06585503 -38.86235809]
[44.42994690 -31.69429970]
[59.39122772 -30.61723137]
[74.35250854 -29.54016113]
[89.31378937 -28.46309090]
[91.95178986 -33.37568665]
[95.62297058 -37.57271957]
[100.14083099 -40.84098434]
[105.27587128 -43.01446152]
[110.76724243 -43.98273468]
[116.33596802 -43.69662094]
[123.15954590 -57.05471802]
[129.98312378 -70.41281891]
[136.80670166 -83.77091980]
[136.19409180 -99.58026123]
[148.87416077 -107.39466858]
[155.69773865 -120.75276947]
[162.52131653 -134.11087036]
[169.20739746 -147.53831482]
[175.75526428 -161.03370667]
[182.30313110 -174.52908325]
[188.85099792 -188.02445984]
[195.39888000 -201.51985168]
[201.94674683 -215.01522827]
[189.40251160 -223.27944946]
[178.04432678 -233.11035156]
[168.06655884 -244.33973694]
[159.63992310 -256.77545166]
[152.90861511 -270.20468140]
[147.98782349 -284.39767456]
[144.96174622 -299.11154175]
[143.88215637 -314.09451294]
[144.76753235 -329.09020996]
[147.60273743 -343.84207153]
[152.33923340 -358.09759521]
[158.89598083 -371.61291504]
[167.16079712 -384.15676880]
[176.99223328 -395.51449585]
[188.22209167 -405.49172974]
[200.65820312 -413.91775513]
[214.08776855 -420.64843750]
[228.28099060 -425.56854248]
[242.99499512 -428.59393311]
[257.97802734 -429.67279053]
[272.97369385 -428.78671265]
[287.72540283 -425.95080566]
[301.98071289 -421.21362305]
[315.49572754 -414.65625000]
[328.03918457 -406.39083862]
[339.39642334 -396.55883789]
[349.37310791 -385.32852173]
[357.79858398 -372.89199829]
[364.52859497 -359.46212769]
[369.44802856 -345.26864624]
[372.47271729 -330.55450439]
[373.55087280 -315.57144165]
[372.66406250 -300.57580566]
[369.82748413 -285.82424927]
[365.08963013 -271.56915283]
[358.53158569 -258.05444336]
[350.26556396 -245.51139832]
[340.43304443 -234.15461731]
[329.20223999 -224.17845154]
[316.76531982 -215.75358582]
[303.33511353 -209.02420044]
[289.14141846 -204.10543823]
[274.42712402 -201.08145142]
[259.44400024 -200.00401306]
[244.44842529 -200.89152527]
[229.69699097 -203.72883606]
[215.44212341 -208.46736145]
[208.89425659 -194.97198486]
[202.34638977 -181.47659302]
[195.79852295 -167.98121643]
[189.25064087 -154.48582458]
[182.70277405 -140.99044800]
[182.61193848 -133.55378723]
[175.87940979 -127.28729248]
[169.05584717 -113.92919159]
[162.23226929 -100.57109070]
[163.33294678 -85.71720886]
[150.16479492 -76.94734192]
[143.34121704 -63.58924484]
[136.51763916 -50.23114395]
[129.69407654 -36.87304306]
[136.49870300 -11.95217609]
[117.21524048 6.08884382]
[115.67794800 21.00986099]
[114.14065552 35.93087769]
[112.60336304 50.85189438]
[122.61454010 54.58013916]
[131.62319946 60.32186890]
[139.22999573 67.82254791]
[145.09770203 76.74966431]
[148.96621704 86.70748138]
[150.66403198 97.25456238]
[150.11589050 107.92334747]
[147.34608459 118.24088287]
[142.47740173 127.74980164]
[135.72567749 136.02854919]
[127.39022827 142.71014404]
[117.84055328 147.49838257]
[107.50000000 150.18098450]
[107.50000000 165.18098450]
[107.50000000 180.18098450]
[107.50000000 195.18098450]
[107.50000000 210.18098450]
[107.50000000 225.18098450]
[107.50000000 240.18098450]
[107.50000000 255.18098450]
[107.50000000 270.18099976]
[107.50000000 285.18099976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 23]
[14 22]
[15 21]
[28 130]
[29 129]
[30 128]
[31 127]
[35 45]
[36 44]
[37 43]
[38 42]
[51 125]
[52 124]
[53 123]
[54 122]
[56 120]
[57 119]
[58 118]
[59 116]
[60 115]
[61 114]
[62 113]
[63 112]
[64 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
