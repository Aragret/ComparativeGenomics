%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUxxxxxxxxxxAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.66886139 299.00646973]
[97.66886139 284.00646973]
[97.66886139 269.00646973]
[97.66886139 254.00645447]
[97.66886139 239.00645447]
[97.66886139 224.00645447]
[97.66886139 209.00645447]
[97.66886139 194.00645447]
[97.66886139 179.00645447]
[97.66886139 164.00645447]
[91.16070557 160.27900696]
[88.09290314 174.96192932]
[73.18059540 176.58152771]
[67.03213501 162.89956665]
[78.14439392 152.82409668]
[71.63624573 149.09663391]
[58.69818497 156.68653870]
[50.71005249 170.34304810]
[35.81728363 170.10926819]
[22.87922668 177.69917297]
[22.35480499 193.11763000]
[13.55901051 205.79191589]
[-0.70145392 211.67771912]
[-15.87612438 208.89689636]
[-27.12281799 198.33682251]
[-30.85275841 183.36714172]
[-25.87573242 168.76464844]
[-13.77989197 159.18894958]
[1.57502449 157.69558716]
[15.28931808 164.76112366]
[28.22737503 157.17121887]
[35.29009247 144.05758667]
[51.10827637 143.74848938]
[64.04633331 136.15858459]
[56.52103424 120.61815643]
[54.96569443 104.39878082]
[58.91993332 89.59499359]
[67.25011444 77.90547943]
[78.36200714 70.43827057]
[90.46122742 67.61211395]
[89.52559662 52.64132309]
[88.58996582 37.67053223]
[79.42877960 28.53125191]
[78.99154663 16.00017929]
[86.96641541 6.85092592]
[86.34243774 -8.13609028]
[85.71846008 -23.12310600]
[85.09448242 -38.11012268]
[84.47050476 -53.09713745]
[80.96788788 -61.60499191]
[83.99272919 -68.40175629]
[83.68067169 -83.39850616]
[75.19898987 -71.02672577]
[62.24964523 -63.45608521]
[47.30804443 -62.13379288]
[33.23040771 -67.31262207]
[22.70782661 -78.00257874]
[17.75178719 -92.16017914]
[19.30969238 -107.07906342]
[27.08372688 -119.90732574]
[39.58781052 -128.19271851]
[54.43166733 -130.35142517]
[68.77774048 -125.97077179]
[79.88364410 -115.88816071]
[85.62611389 -102.03245544]
[89.02909088 -116.64134979]
[92.43206787 -131.25024414]
[95.83504486 -145.85913086]
[99.23802185 -160.46803284]
[85.85774994 -167.42640686]
[74.62887573 -177.49433899]
[66.25724792 -190.03892517]
[61.26912689 -204.27162170]
[59.97806168 -219.29772949]
[62.46520615 -234.17269897]
[68.57422638 -247.96148682]
[77.92109680 -259.79733276]
[89.91826630 -268.93618774]
[103.81159210 -274.80358887]
[118.72771454 -277.03070068]
[133.72900391 -275.47756958]
[147.87245178 -270.24176025]
[160.26899719 -261.65246582]
[170.13940430 -250.24955750]
[176.86317444 -236.74986267]
[180.01766968 -222.00198364]
[179.40458679 -206.93298340]
[175.06246948 -192.49009705]
[167.26426697 -179.58123779]
[156.50016785 -169.01785278]
[143.44683838 -161.46395874]
[128.92478943 -157.39442444]
[113.84691620 -157.06504822]
[110.44393921 -142.45616150]
[107.04096222 -127.84725952]
[103.63798523 -113.23837280]
[100.23500824 -98.62947845]
[98.67742157 -83.71056366]
[98.98947906 -68.71381378]
[99.45751953 -53.72111511]
[100.08149719 -38.73410034]
[100.70547485 -23.74708366]
[101.32945251 -8.76006699]
[101.95343018 6.22694874]
[112.14620209 20.47852135]
[103.56076050 36.73490143]
[104.49638367 51.70569611]
[105.43201447 66.67648315]
[139.43156433 84.47623444]
[140.31077576 131.22738647]
[154.80638123 135.08454895]
[169.30197144 138.94171143]
[183.79757690 142.79887390]
[197.35778809 135.13348389]
[212.00343323 139.25167847]
[219.22764587 152.22651672]
[233.72325134 156.08367920]
[249.40664673 151.29173279]
[261.21209717 162.67433167]
[256.99514771 178.52201843]
[241.09385681 182.53207397]
[229.86608887 170.57928467]
[215.37048340 166.72212219]
[202.65324402 174.39070129]
[187.89768982 170.68548584]
[179.94041443 157.29446411]
[165.44480896 153.43730164]
[150.94921875 149.58015442]
[136.45361328 145.72299194]
[130.50743103 150.29385376]
[141.37928772 160.62838745]
[152.25115967 170.96292114]
[165.76608276 177.47036743]
[170.29995728 191.76876831]
[163.00431824 204.87501526]
[148.46273804 208.55500793]
[135.81108093 200.49676514]
[132.99781799 185.76306152]
[125.80643463 172.59933472]
[118.61505127 159.43559265]
[112.66886139 164.00645447]
[112.66886139 179.00645447]
[112.66886139 194.00645447]
[112.66886139 209.00645447]
[112.66886139 224.00645447]
[112.66886139 239.00645447]
[112.66886139 254.00645447]
[112.66886139 269.00646973]
[112.66886139 284.00646973]
[112.66886139 299.00646973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 34]
[17 33]
[19 31]
[20 30]
[40 108]
[41 107]
[42 106]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[51 99]
[52 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[110 129]
[111 128]
[112 127]
[113 126]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
