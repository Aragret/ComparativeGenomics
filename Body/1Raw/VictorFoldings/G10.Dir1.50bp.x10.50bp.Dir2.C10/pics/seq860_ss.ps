%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGxxxxxxxxxxCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.88117981 542.85992432]
[145.88117981 527.85992432]
[145.88117981 512.85992432]
[145.88117981 497.85992432]
[145.88117981 482.85992432]
[145.88117981 467.85992432]
[145.88117981 452.85992432]
[145.88117981 437.85992432]
[145.88117981 422.85992432]
[145.88117981 407.85992432]
[127.15040588 402.74703979]
[110.79255676 392.26019287]
[98.30869293 377.35122681]
[90.84749603 359.37832642]
[89.09957123 339.98214722]
[93.23355865 320.93618774]
[102.87988281 303.98449707]
[117.16377258 290.68209839]
[134.78460693 282.25219727]
[132.16386414 267.48291016]
[115.42624664 257.59875488]
[111.21131897 238.31257629]
[122.64532471 221.84906006]
[119.16499329 207.25839233]
[115.68466187 192.66773987]
[112.20433044 178.07708740]
[99.47293854 166.03036499]
[104.80780792 148.43035889]
[101.04344940 133.91038513]
[89.41915894 132.23428345]
[79.06285095 126.69529724]
[71.21559906 117.95720673]
[66.81780243 107.06717682]
[66.39648438 95.33022308]
[52.36327362 90.03221130]
[38.33005905 84.73419189]
[24.29684830 79.43618011]
[10.26363754 74.13816071]
[-3.76957440 68.84014893]
[-15.35254955 75.77300262]
[-28.61882210 74.76718903]
[-38.72359848 66.41548157]
[-42.10680389 53.95196152]
[-56.03397369 48.38114166]
[-69.96113586 42.81032181]
[-82.46530151 51.84633255]
[-97.87093353 52.66482544]
[-111.26216125 45.00463104]
[-118.36589050 31.31008148]
[-116.91533661 15.95106316]
[-107.37338257 3.82858109]
[-92.78482056 -1.18912506]
[-77.80480957 2.49907684]
[-67.21341705 13.71629524]
[-64.39031982 28.88315582]
[-50.46315384 34.45397568]
[-36.53598404 40.02479553]
[-21.40225792 32.74174118]
[-5.35931826 38.75287628]
[1.52844095 54.80693436]
[15.56165314 60.10494995]
[29.59486389 65.40296936]
[43.62807465 70.70098114]
[57.66128922 75.99900055]
[71.69449615 81.29701233]
[80.12352753 70.13583374]
[92.94705200 62.84191132]
[108.37122345 61.12196732]
[112.41817474 46.67821121]
[116.46512604 32.23445129]
[120.51207733 17.79069138]
[124.55902863 3.34693193]
[128.03936768 -11.24372578]
[130.94776917 -25.95906258]
[133.85618591 -40.67440033]
[120.45638275 -47.64735031]
[109.56482697 -58.11399841]
[102.06445312 -71.22586823]
[98.56327820 -85.92002869]
[99.34513092 -101.00530243]
[104.34662628 -115.25878143]
[113.16230774 -127.52500916]
[125.07754517 -136.80961609]
[139.12640381 -142.35993958]
[154.17002869 -143.72602844]
[168.98887634 -140.79716492]
[182.38166809 -133.81076050]
[193.26269531 -123.33316803]
[200.74990845 -110.21377563]
[204.23631287 -95.51609802]
[203.43930054 -80.43162537]
[198.42349243 -66.18317413]
[189.59548950 -53.92580795]
[177.67094421 -44.65317535]
[163.61650085 -39.11697388]
[148.57151794 -37.76599121]
[145.66311646 -23.05065155]
[142.75469971 -8.33531570]
[144.25082397 -5.90803766]
[144.85054016 -2.72728753]
[144.25637817 0.85915768]
[142.30564880 4.40048933]
[139.00279236 7.39388323]
[134.95584106 21.83764267]
[130.90888977 36.28140259]
[126.86193848 50.72516251]
[122.81498718 65.16892242]
[133.67710876 75.51368713]
[147.90634155 70.76722717]
[162.13557434 66.02076721]
[172.60246277 53.39632034]
[188.72137451 56.41504669]
[193.91056824 71.97153473]
[182.83184814 84.06260681]
[166.88204956 80.25000000]
[152.65280151 84.99645996]
[138.42356873 89.74291992]
[133.69500732 114.91318512]
[115.56342316 130.14602661]
[119.32778168 144.66600037]
[130.05262756 151.89045715]
[132.86943054 164.09941101]
[126.79499054 174.59675598]
[130.27531433 189.18740845]
[133.75564575 203.77806091]
[137.23597717 218.36872864]
[147.51368713 221.54356384]
[155.46752930 228.66465759]
[159.69047546 238.38150024]
[159.47351074 248.89303589]
[154.92388916 258.28149414]
[146.93315125 264.86218262]
[149.55387878 279.63146973]
[160.60252380 279.94726562]
[171.43150330 282.14120483]
[181.72406006 286.14767456]
[191.17936707 291.84802246]
[199.52130127 299.07418823]
[206.50654602 307.61349487]
[211.93171692 317.21502686]
[215.63916016 327.59698486]
[217.52168274 338.45492554]
[217.52557373 349.47070312]
[215.65211487 360.32180786]
[211.95755005 370.69073486]
[206.55140686 380.27438354]
[199.59318542 388.79287720]
[191.28771973 395.99771118]
[181.87908936 401.67898560]
[171.64350891 405.67156982]
[160.88117981 407.85992432]
[160.88117981 422.85992432]
[160.88117981 437.85992432]
[160.88117981 452.85992432]
[160.88117981 467.85992432]
[160.88117981 482.85992432]
[160.88117981 497.85992432]
[160.88117981 512.85992432]
[160.88117981 527.85992432]
[160.88117981 542.85992432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[19 133]
[20 132]
[23 126]
[24 125]
[25 124]
[26 123]
[28 120]
[29 119]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[43 57]
[44 56]
[45 55]
[68 107]
[69 106]
[70 105]
[71 104]
[72 103]
[73 98]
[74 97]
[75 96]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
