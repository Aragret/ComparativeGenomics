%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUxxxxxxxxxxUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.28077698 99.18324280]
[151.50866699 101.78796387]
[136.73654175 104.39269257]
[121.96443176 106.99741364]
[107.19231415 109.60213470]
[93.83421326 116.42571259]
[83.06553650 126.86772156]
[73.30625916 138.25878906]
[64.63965607 150.50173950]
[55.97304535 162.74470520]
[47.30643845 174.98765564]
[38.63983154 187.23060608]
[39.91636276 203.22279358]
[28.11103058 214.08619690]
[12.27987289 211.48736572]
[4.56719971 197.41987610]
[10.88951397 182.67510986]
[26.39687729 178.56399536]
[35.06348419 166.32104492]
[43.73009109 154.07809448]
[52.39669800 141.83514404]
[61.06330490 129.59217834]
[46.51964569 133.26396179]
[32.25376511 128.62879944]
[22.64575577 117.10985565]
[20.64558411 102.24380493]
[26.86736679 88.59502411]
[39.40081787 80.35411072]
[54.39776230 80.05130005]
[67.25365448 87.77957153]
[74.02130890 101.16608429]
[72.62352753 116.09903717]
[83.39220428 105.65702820]
[81.93846893 98.29927063]
[67.74061584 93.45974731]
[79.03099823 83.58374786]
[77.57726288 76.22598267]
[63.64654541 70.66404724]
[49.71582794 65.10211182]
[35.78511047 59.54017258]
[21.85439491 53.97823715]
[7.92367887 48.41629791]
[-4.09053659 57.98469543]
[-19.28172302 60.24819183]
[-33.56352997 54.59791565]
[-43.09421921 42.55376816]
[-45.31008530 27.35556030]
[-39.61507416 13.09153652]
[-27.54111099 3.59864545]
[-12.33603191 1.43042815]
[1.91007149 7.17012405]
[11.36507034 19.27378273]
[13.48561573 34.48558426]
[27.41633224 40.04751968]
[41.34704971 45.60945892]
[55.27776337 51.17139435]
[69.20848083 56.73333359]
[83.13919830 62.29526901]
[93.45638275 66.20290375]
[101.04677582 72.47335815]
[105.45843506 80.06546783]
[106.56924438 87.87512207]
[104.58759308 94.83001709]
[119.35970306 92.22529602]
[134.13182068 89.62057495]
[148.90394592 87.01585388]
[163.67605591 84.41112518]
[162.13092041 69.48444366]
[161.65457153 54.48556900]
[162.24945068 39.49092484]
[163.91253662 24.57692146]
[166.63533020 9.81956387]
[170.40397644 -4.70595074]
[175.19926453 -18.92560196]
[180.99674988 -32.76692963]
[187.76690674 -46.15940094]
[195.47521973 -59.03477097]
[204.08242798 -71.32742310]
[213.54464722 -82.97472382]
[223.81367493 -93.91732025]
[234.83717346 -104.09944916]
[246.55897522 -113.46922302]
[258.91934204 -121.97888947]
[271.85528564 -129.58509827]
[285.30090332 -136.24908447]
[299.18768311 -141.93687439]
[313.44482422 -146.61950684]
[327.99969482 -150.27310181]
[342.77813721 -152.87905884]
[357.70483398 -154.42408752]
[372.70370483 -154.90031433]
[387.69836426 -154.30531311]
[402.61233521 -152.64212036]
[417.36968994 -149.91921997]
[431.89517212 -146.15045166]
[446.11477661 -141.35505676]
[459.95608521 -135.55746460]
[473.34848022 -128.78720093]
[486.22378540 -121.07878876]
[498.51638794 -112.47149658]
[510.16360474 -103.00918579]
[521.10614014 -92.74007416]
[531.28814697 -81.71649933]
[540.65783691 -69.99462891]
[549.16741943 -57.63418961]
[556.77355957 -44.69817734]
[563.43743896 -31.25251007]
[569.12512207 -17.36570168]
[573.80761719 -3.10851884]
[577.46112061 11.44638634]
[580.06695557 26.22484589]
[581.61187744 41.15155029]
[582.08801270 56.15043640]
[581.49285889 71.14507294]
[579.82958984 86.05905151]
[577.10656738 100.81636810]
[573.33764648 115.34181976]
[568.54217529 129.56140137]
[562.74444580 143.40263367]
[555.97412109 156.79499817]
[548.26556396 169.67025757]
[539.65820312 181.96278381]
[530.19580078 193.60993958]
[519.92663574 204.55236816]
[508.90295410 214.73432922]
[497.18099976 224.10392761]
[484.82049561 232.61340332]
[471.88442993 240.21940613]
[458.43872070 246.88319397]
[444.55187988 252.57077026]
[430.29464722 257.25317383]
[415.73971558 260.90655518]
[400.96124268 263.51229858]
[386.03451538 265.05709839]
[371.03564453 265.53308105]
[356.04098511 264.93786621]
[341.12704468 263.27444458]
[326.36975098 260.55130005]
[311.84429932 256.78231812]
[297.62475586 251.98670959]
[283.78356934 246.18888855]
[270.39126587 239.41842651]
[257.51608276 231.70982361]
[245.22361755 223.10234070]
[233.57652283 213.63984680]
[222.63417053 203.37057495]
[212.45230103 192.34683228]
[203.08279419 180.62481689]
[194.57341003 168.26425171]
[186.96749878 155.32812500]
[180.30383301 141.88235474]
[174.61634827 127.99546051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[6 33]
[7 32]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
