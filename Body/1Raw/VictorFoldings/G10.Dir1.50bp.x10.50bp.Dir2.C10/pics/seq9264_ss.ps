%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAxxxxxxxxxxUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[169.20692444 387.71795654]
[169.20692444 372.71795654]
[169.20692444 357.71795654]
[169.20692444 342.71795654]
[169.20692444 327.71795654]
[169.20692444 312.71795654]
[169.20692444 297.71795654]
[169.20692444 282.71795654]
[169.20692444 267.71795654]
[169.20692444 252.71795654]
[150.57318115 228.13394165]
[159.83610535 204.45645142]
[151.58381653 191.93048096]
[143.33152771 179.40452576]
[135.07923889 166.87855530]
[126.82695007 154.35260010]
[118.57466125 141.82662964]
[107.32384491 145.17573547]
[95.59119415 145.55268860]
[84.14859772 142.93272400]
[73.74887085 137.48818970]
[65.07622528 129.57727051]
[58.70122528 119.72046661]
[44.28900909 123.87835693]
[29.87679482 128.03623962]
[15.46457767 132.19413757]
[1.05236185 136.35202026]
[-5.11905909 150.72030640]
[-19.10559273 157.71392822]
[-34.30322647 154.03073120]
[-43.53610229 141.40979004]
[-42.44473648 125.81034088]
[-31.54444122 114.59796143]
[-15.98200130 113.06678772]
[-3.10552549 121.93980408]
[11.30669022 117.78191376]
[25.71890640 113.62402344]
[40.13112259 109.46614075]
[54.54333878 105.30825043]
[54.23939133 99.32756805]
[54.71893692 93.35839081]
[55.97377014 87.50292969]
[57.98240280 81.86144257]
[45.37127686 73.73989868]
[32.76014709 65.61835480]
[20.14901924 57.49681473]
[7.53789186 49.37527466]
[-5.07323599 41.25373077]
[-20.46453094 44.84310532]
[-33.84158707 36.42705154]
[-37.26803207 20.99866676]
[-28.71101761 7.71133947]
[-13.24727058 4.44820356]
[-0.05115533 13.14522076]
[3.04830599 28.64260292]
[15.65943432 36.76414490]
[28.27056313 44.88568878]
[40.88169098 53.00722885]
[53.49281693 61.12877274]
[66.10394287 69.25031281]
[74.66092682 60.04001617]
[85.73522949 53.26050186]
[98.62313080 49.59983826]
[98.31107330 34.60308456]
[97.99902344 19.60633087]
[97.68696594 4.60957670]
[83.25981140 0.01219479]
[71.10861206 -9.02257919]
[62.55144501 -21.51472092]
[58.51652527 -36.10917664]
[59.44153214 -51.22285080]
[65.22612000 -65.21632385]
[75.24283600 -76.57167816]
[88.40512085 -84.05718994]
[103.28524780 -86.86087036]
[118.26911926 -84.67860413]
[131.73139954 -77.74710846]
[142.21180725 -66.81826019]
[148.57350159 -53.07752991]
[150.12640381 -38.01541901]
[146.70208740 -23.26574898]
[138.67198181 -10.42845535]
[126.90714264 -0.89602989]
[112.68371582 4.29752016]
[112.99577332 19.29427338]
[113.30783081 34.29102707]
[113.61988831 49.28778076]
[127.40226746 55.20774460]
[138.49357605 45.10909653]
[149.58489990 35.01044464]
[160.67620850 24.91179657]
[158.83485413 9.50436115]
[166.43081665 -4.02638626]
[180.54327393 -10.47759819]
[195.74571228 -7.36865091]
[206.19247437 4.10500050]
[207.86657715 19.53150368]
[200.12429810 32.97905350]
[185.94267273 39.27679062]
[170.77485657 36.00311279]
[159.68354797 46.10176086]
[148.59223938 56.20040894]
[137.50091553 66.29905701]
[147.75819397 89.64530182]
[145.13204956 114.21153259]
[131.10061646 133.57434082]
[139.35290527 146.10031128]
[147.60520935 158.62626648]
[155.85749817 171.15223694]
[164.10978699 183.67819214]
[172.36207581 196.20416260]
[188.23831177 193.42582703]
[204.56924438 202.04849243]
[213.30441284 220.95875549]
[227.53118896 225.71257019]
[241.75796509 230.46638489]
[255.98474121 235.22019958]
[270.21151733 239.97401428]
[285.15042114 234.12519836]
[298.96478271 242.28263855]
[301.05734253 258.18862915]
[289.82293701 269.64147949]
[273.87960815 267.85549927]
[265.45770264 254.20079041]
[251.23092651 249.44697571]
[237.00415039 244.69316101]
[222.77737427 239.93934631]
[208.55059814 235.18553162]
[202.46467590 239.56863403]
[212.67074585 250.56118774]
[222.87683105 261.55374146]
[233.08290100 272.54626465]
[244.54913330 282.21713257]
[243.97550964 297.20614624]
[231.80369568 305.97241211]
[217.40550232 301.76620483]
[211.86698914 287.82604980]
[204.67561340 274.66232300]
[197.48422241 261.49859619]
[190.29284668 248.33483887]
[184.20692444 252.71795654]
[184.20692444 267.71795654]
[184.20692444 282.71795654]
[184.20692444 297.71795654]
[184.20692444 312.71795654]
[184.20692444 327.71795654]
[184.20692444 342.71795654]
[184.20692444 357.71795654]
[184.20692444 372.71795654]
[184.20692444 387.71795654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 111]
[13 110]
[14 109]
[15 108]
[16 107]
[17 106]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[63 87]
[64 86]
[65 85]
[66 84]
[88 103]
[89 102]
[90 101]
[91 100]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
