%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAxxxxxxxxxxAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.88118744 465.74398804]
[105.88118744 450.74398804]
[105.88118744 435.74398804]
[105.88118744 420.74398804]
[105.88118744 405.74398804]
[105.88118744 390.74398804]
[105.88118744 375.74398804]
[105.88118744 360.74398804]
[105.88118744 345.74398804]
[105.88118744 330.74398804]
[89.55471802 327.04348755]
[74.54798889 319.60662842]
[61.70306015 308.84655762]
[51.74165726 295.36309814]
[45.22462082 279.90917969]
[42.52030563 263.34881592]
[43.78379822 246.60893250]
[48.94800186 230.62725830]
[57.72719955 216.29994202]
[69.63285065 204.43132019]
[84.00080109 195.68867493]
[100.02828979 190.56475830]
[98.78141785 175.61666870]
[97.53453827 160.66857910]
[96.28766632 145.72050476]
[74.26298523 137.97039795]
[58.90635300 120.38277435]
[54.19643402 97.51429749]
[39.55293274 94.26347351]
[24.90943146 91.01264191]
[10.36325741 100.67422485]
[-6.34834433 96.93170929]
[-15.03550339 82.56538391]
[-29.74346542 79.61990356]
[-36.21953583 81.39979553]
[-41.76690292 79.83199310]
[-44.99624634 76.23381805]
[-59.56894684 72.67905426]
[-74.14164734 69.12429810]
[-88.71435547 65.56953430]
[-102.08782959 73.99127960]
[-117.48064423 70.40845490]
[-125.76052856 56.94668961]
[-122.01515961 41.59260559]
[-108.46660614 33.45551682]
[-93.15298462 37.36300278]
[-85.15959167 50.99682999]
[-70.58689117 54.55159378]
[-56.01418686 58.10635376]
[-41.44148254 61.66111755]
[-26.79798126 64.91194153]
[-12.09002018 67.85742188]
[-2.43822503 59.26442719]
[10.59721756 57.79760742]
[22.25900650 64.21871185]
[28.16025734 76.36914062]
[42.80376053 79.61997223]
[57.44726181 82.87079620]
[61.33471298 75.31922150]
[66.54776764 68.61380005]
[72.90769958 62.98442841]
[80.19646454 58.62409592]
[88.16417694 55.68230057]
[96.53766632 54.25989151]
[105.02985382 54.40563583]
[113.34960938 56.11454391]
[121.21167755 59.32801819]
[130.22920227 47.34118652]
[139.24673462 35.35435104]
[129.20726013 23.53463554]
[122.03905487 9.79061604]
[118.09564209 -5.19321775]
[117.57003021 -20.67140007]
[120.48526001 -35.87457657]
[126.69342804 -50.04774094]
[135.88316345 -62.48773575]
[147.59527588 -72.57814026]
[161.24568176 -79.81980133]
[176.15449524 -83.85553741]
[191.57998657 -84.48774719]
[206.75538635 -81.68808746]
[220.92704773 -75.59873962]
[229.69326782 -87.77057648]
[231.47979736 -103.49058533]
[245.19627380 -109.29642487]
[253.96247864 -121.46826172]
[262.72866821 -133.64009094]
[271.49490356 -145.81193542]
[272.60192871 -162.17367554]
[287.44229126 -169.15190125]
[300.74948120 -159.56800842]
[298.83419800 -143.28108215]
[283.66671753 -137.04573059]
[274.90051270 -124.87388611]
[266.13430786 -112.70204926]
[257.36810303 -100.53021240]
[256.20858765 -85.68080902]
[241.86509705 -79.00436401]
[233.09889221 -66.83252716]
[242.84092712 -56.05069733]
[250.11921692 -43.46664429]
[254.61051941 -29.63418198]
[256.11428833 -15.16268158]
[254.56169128 -0.69021964]
[250.01867676 13.14454746]
[242.68322754 25.73057365]
[232.87670898 36.51140594]
[221.02981567 45.00979233]
[207.66363525 50.84879684]
[193.36672974 53.76853561]
[178.76924133 53.63773346]
[164.51509094 50.45960999]
[151.23356628 44.37188339]
[142.21603394 56.35871506]
[133.19850159 68.34555054]
[141.02619934 79.48180389]
[145.24116516 92.42487335]
[145.47222900 106.03500366]
[141.69906616 119.11369324]
[134.25392151 130.50924683]
[123.79240417 139.21820068]
[111.23575592 144.47361755]
[112.48262787 159.42170715]
[113.72949982 174.36979675]
[114.97637939 189.31788635]
[128.25297546 190.89762878]
[140.99472046 194.93338013]
[152.75163269 201.28079224]
[163.10888672 209.71391296]
[171.70138550 219.93322754]
[178.22669983 231.57632446]
[182.45562744 244.23069763]
[184.24032593 257.44839478]
[183.51940918 270.76184082]
[180.32011414 283.70050049]
[174.75724792 295.80728149]
[167.02908325 306.65490723]
[157.41024780 315.86087036]
[146.24203491 323.10092163]
[133.92025757 328.12057495]
[120.88118744 330.74398804]
[120.88118744 345.74398804]
[120.88118744 360.74398804]
[120.88118744 375.74398804]
[120.88118744 390.74398804]
[120.88118744 405.74398804]
[120.88118744 420.74398804]
[120.88118744 435.74398804]
[120.88118744 450.74398804]
[120.88118744 465.74398804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 125]
[23 124]
[24 123]
[25 122]
[28 58]
[29 57]
[30 56]
[33 52]
[34 51]
[37 50]
[38 49]
[39 48]
[40 47]
[67 115]
[68 114]
[69 113]
[82 99]
[83 98]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
