%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAxxxxxxxxxxAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 399.62319946]
[92.50000000 384.62319946]
[92.50000000 369.62319946]
[92.50000000 354.62319946]
[92.50000000 339.62319946]
[92.50000000 324.62319946]
[92.50000000 309.62319946]
[92.50000000 294.62319946]
[92.50000000 279.62319946]
[92.50000000 264.62319946]
[77.80443573 261.72241211]
[63.95278549 256.00842285]
[51.47812653 247.69911194]
[40.86095047 237.11227417]
[32.51063156 224.65345764]
[26.74966240 210.80049133]
[23.80118752 196.08503723]
[23.78036499 181.07232666]
[26.68986511 166.33935547]
[32.41970444 152.45269775]
[40.75139618 139.94680786]
[51.36627960 129.30335999]
[63.85771179 120.93273926]
[77.74665070 115.15823364]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[90.10756683 68.99679565]
[89.18389130 65.03221893]
[89.59457397 61.39722061]
[91.05480957 58.48831940]
[93.17588806 56.56261063]
[94.42276764 41.61452484]
[95.66963959 26.66643524]
[96.91651154 11.71834946]
[98.16339111 -3.22973800]
[83.34723663 -5.61812639]
[68.75739288 -9.13367844]
[54.47946548 -13.75576401]
[40.59725952 -19.45725822]
[27.19223213 -26.20470238]
[14.34305286 -33.95849991]
[2.12512732 -42.67314529]
[-9.38984394 -52.29749680]
[-20.13428688 -62.77507782]
[-30.04514694 -74.04440308]
[-39.06426239 -86.03932953]
[-47.13870621 -98.68946838]
[-54.22109222 -111.92059326]
[-60.26985931 -125.65504456]
[-65.24950409 -139.81222534]
[-69.13081360 -154.30906677]
[-71.89100647 -169.06047058]
[-73.51388550 -183.97988892]
[-73.98992157 -198.97976685]
[-73.31632996 -213.97206116]
[-71.49705505 -228.86880493]
[-68.54277802 -243.58256531]
[-64.47083282 -258.02700806]
[-59.30511856 -272.11737061]
[-53.07595062 -285.77096558]
[-45.81988144 -298.90762329]
[-37.57949448 -311.45031738]
[-28.40314865 -323.32537842]
[-18.34469414 -334.46316528]
[-7.46315908 -344.79830933]
[4.17759752 -354.27011108]
[16.50926399 -362.82305908]
[29.45947075 -370.40692139]
[42.95222092 -376.97720337]
[56.90833282 -382.49533081]
[71.24590302 -386.92892456]
[85.88079834 -390.25195312]
[100.72712708 -392.44497681]
[115.69776917 -393.49505615]
[130.70486450 -393.39605713]
[145.66035461 -392.14855957]
[160.47645569 -389.75988770]
[175.06623840 -386.24407959]
[189.34407043 -381.62170410]
[203.22616577 -375.91995239]
[216.63107300 -369.17227173]
[229.48010254 -361.41821289]
[241.69786072 -352.70333862]
[253.21264648 -343.07876587]
[263.95687866 -332.60098267]
[273.86755371 -321.33148193]
[282.88641357 -309.33636475]
[290.96063232 -296.68609619]
[298.04275513 -283.45483398]
[304.09127808 -269.72024536]
[309.07064819 -255.56298828]
[312.95169067 -241.06607056]
[315.71160889 -226.31460571]
[317.33419800 -211.39515686]
[317.80993652 -196.39527893]
[317.13607788 -181.40299988]
[315.31649780 -166.50628662]
[312.36196899 -151.79257202]
[308.28973389 -137.34820557]
[303.12374878 -123.25794983]
[296.89431763 -109.60448456]
[289.63800049 -96.46794891]
[281.39739990 -83.92543030]
[272.22082520 -72.05052948]
[262.16213989 -60.91293335]
[251.28042603 -50.57800674]
[239.63948059 -41.10639954]
[227.30764771 -32.55369568]
[214.35729980 -24.97008324]
[200.86442566 -18.40006828]
[186.90821838 -12.88220882]
[172.57055664 -8.44888306]
[157.93560791 -5.12611008]
[143.08923340 -2.93338823]
[128.11857605 -1.88358569]
[113.11147308 -1.98286331]
[111.86460114 12.96522331]
[110.61772919 27.91331100]
[109.37084961 42.86139679]
[108.12397766 57.80948639]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[122.25334930 115.15823364]
[136.14228821 120.93273926]
[148.63372803 129.30335999]
[159.24861145 139.94680786]
[167.58029175 152.45269775]
[173.31013489 166.33935547]
[176.21963501 181.07232666]
[176.19880676 196.08503723]
[173.25033569 210.80049133]
[167.48936462 224.65345764]
[159.13905334 237.11227417]
[148.52186584 247.69911194]
[136.04721069 256.00842285]
[122.19556427 261.72241211]
[107.50000000 264.62319946]
[107.50000000 279.62319946]
[107.50000000 294.62319946]
[107.50000000 309.62319946]
[107.50000000 324.62319946]
[107.50000000 339.62319946]
[107.50000000 354.62319946]
[107.50000000 369.62319946]
[107.50000000 384.62319946]
[107.50000000 399.62319946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[27 124]
[28 123]
[33 122]
[34 121]
[35 120]
[36 119]
[37 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
