%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCxxxxxxxxxxUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCUAUGGAGCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.88872528 268.43209839]
[104.88872528 253.43211365]
[104.88872528 238.43211365]
[104.88872528 223.43211365]
[104.88872528 208.43211365]
[104.88872528 193.43211365]
[104.88872528 178.43211365]
[104.88872528 163.43211365]
[104.88872528 148.43211365]
[104.88872528 133.43211365]
[101.33396149 118.85940552]
[86.11054230 116.36460114]
[76.08089447 102.22236633]
[62.83830643 109.26750183]
[49.59572220 116.31263733]
[36.35313416 123.35777283]
[23.25998116 130.67687988]
[10.32192516 138.26678467]
[-2.61613059 145.85668945]
[-15.55418682 153.44659424]
[-16.07860756 168.86505127]
[-24.87440300 181.53933716]
[-39.13486862 187.42514038]
[-54.30953598 184.64433289]
[-65.55622864 174.08424377]
[-69.28617096 159.11456299]
[-64.30914307 144.51206970]
[-52.21330643 134.93637085]
[-36.85838699 133.44302368]
[-23.14409447 140.50854492]
[-10.20603848 132.91864014]
[2.73201704 125.32872772]
[15.67007351 117.73882294]
[17.73009491 113.36482239]
[22.59357262 110.27001190]
[29.30800056 110.11518860]
[42.55058670 103.07005310]
[55.79317093 96.02491760]
[69.03575897 88.97978210]
[77.15730286 76.36865234]
[78.09292603 61.39786148]
[79.02855682 46.42707062]
[76.87779236 42.48553467]
[76.20320892 38.47106171]
[76.83982849 34.86875916]
[78.47866058 32.05660629]
[80.71572113 30.26694870]
[82.89256287 15.42574310]
[85.06939697 0.58453768]
[87.24623108 -14.25666809]
[78.97952271 -18.85026741]
[72.56755066 -26.19675446]
[68.91908264 -35.55579758]
[68.65040588 -45.89134598]
[71.99117279 -55.98599625]
[78.73445892 -64.58435059]
[88.23954773 -70.54857635]
[85.75442505 -85.34128571]
[81.21977997 -93.34683228]
[83.37482452 -100.46732330]
[81.19799042 -115.30853271]
[79.02114868 -130.14973450]
[64.08068848 -132.44624329]
[50.48161697 -139.04598999]
[39.43315887 -149.36213684]
[31.91774178 -162.47740173]
[28.60362434 -177.22555542]
[29.78549767 -192.29521179]
[35.35826874 -206.34638977]
[44.82641602 -218.12965393]
[57.34803391 -226.59727478]
[71.80970764 -230.99629211]
[86.92552185 -230.93556213]
[101.35137939 -226.42047119]
[113.80454254 -217.85250854]
[123.17769623 -205.99353027]
[128.63737488 -191.89802551]
[129.69812012 -176.81935120]
[126.26558685 -162.09831238]
[118.64501953 -149.04386902]
[107.51402283 -138.81683350]
[93.86235809 -132.32656860]
[96.03919220 -117.48536682]
[98.21603394 -102.64416504]
[100.54713440 -87.82640839]
[103.03225708 -73.03369904]
[117.10377502 -67.83827972]
[128.60557556 -77.46681213]
[140.10737610 -87.09533691]
[151.60917664 -96.72386169]
[163.11099243 -106.35238647]
[174.61279297 -115.98091125]
[186.11459351 -125.60944366]
[187.26039124 -141.37214661]
[199.27098083 -151.64450073]
[215.02069092 -150.33210754]
[225.16548157 -138.21359253]
[223.68666077 -122.47863770]
[211.46154785 -112.46252441]
[195.74311829 -114.10763550]
[184.24131775 -104.47911072]
[172.73951721 -94.85058594]
[161.23771667 -85.22206116]
[149.73590088 -75.59352875]
[138.23410034 -65.96500397]
[126.73229980 -56.33647919]
[125.70338440 -26.04773331]
[102.08744049 -12.07983112]
[99.91060638 2.76137471]
[97.73376465 17.60258102]
[95.55693054 32.44378662]
[93.99935150 47.36269760]
[93.06372070 62.33348846]
[92.12808990 77.30428314]
[111.26552582 80.73518372]
[120.28371429 96.33747101]
[114.64911652 111.95240784]
[115.64347839 96.98540497]
[120.26146698 82.71395874]
[128.22364807 70.00160980]
[139.04823303 59.61758041]
[152.08026123 52.19017792]
[166.53117371 48.16883469]
[181.52656555 47.79687500]
[196.15907288 51.09680176]
[209.54331970 57.86894226]
[220.86944580 67.70352936]
[229.45210266 80.00547791]
[234.77198792 94.03041077]
[236.50718689 108.92971039]
[234.55270386 123.80183411]
[229.02680969 137.74688721]
[220.26387024 149.92108154]
[208.79411316 159.58775330]
[195.31156921 166.16201782]
[180.63203430 169.24604797]
[165.64375305 168.65324402]
[151.25364685 164.41946411]
[138.33244324 156.80090332]
[127.66197205 146.25856018]
[119.88872528 133.43211365]
[119.88872528 148.43211365]
[119.88872528 163.43211365]
[119.88872528 178.43211365]
[119.88872528 193.43211365]
[119.88872528 208.43211365]
[119.88872528 223.43211365]
[119.88872528 238.43211365]
[119.88872528 253.43211365]
[119.88872528 268.43209839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 117]
[13 39]
[14 38]
[15 37]
[16 36]
[17 33]
[18 32]
[19 31]
[20 30]
[40 114]
[41 113]
[42 112]
[47 111]
[48 110]
[49 109]
[50 108]
[57 86]
[58 85]
[60 84]
[61 83]
[62 82]
[87 106]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
