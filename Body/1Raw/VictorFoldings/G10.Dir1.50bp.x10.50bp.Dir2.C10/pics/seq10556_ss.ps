%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGxxxxxxxxxxCUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[342.95132446 166.37945557]
[329.37393188 160.00335693]
[315.79653931 153.62725830]
[302.21914673 147.25117493]
[288.64175415 140.87507629]
[275.06439209 134.49897766]
[261.24856567 128.65747070]
[247.21534729 123.35946655]
[233.18214417 118.06144714]
[219.14892578 112.76343536]
[205.11570740 107.46541595]
[191.08250427 102.16740417]
[176.56253052 98.40304565]
[166.63833618 105.37465668]
[154.22940063 103.63938141]
[146.09225464 93.58940125]
[131.29809570 91.11288452]
[116.50395203 88.63636780]
[123.29904175 101.02349091]
[120.50574493 116.95150757]
[106.90447235 129.08056641]
[86.66201782 130.37313843]
[72.73484802 135.94395447]
[58.80768204 141.51478577]
[44.88051605 147.08560181]
[30.95334816 152.65641785]
[17.02618027 158.22723389]
[11.03167534 172.85055542]
[-3.57937980 178.87489319]
[-18.13850403 172.72612000]
[-24.00802612 158.05218506]
[-17.70566368 143.55888367]
[-2.97049713 137.84483337]
[11.45536137 144.30006409]
[25.38252831 138.72924805]
[39.30969620 133.15843201]
[53.23686218 127.58760834]
[67.16403198 122.01679230]
[81.09119415 116.44597626]
[80.65221405 101.45240021]
[66.42298126 96.70594025]
[52.19374466 91.95948029]
[37.96451187 87.21301270]
[26.52414322 97.46062469]
[11.48939991 100.59942627]
[-3.09544778 95.78509521]
[-13.30714893 84.31266022]
[-16.39880753 69.26815796]
[-11.53878212 54.69847107]
[-0.03439636 44.52277756]
[15.01972866 41.47829437]
[29.57410812 46.38396454]
[39.71368790 57.92018890]
[42.71097183 72.98377991]
[56.94020462 77.73023987]
[71.16944122 82.47669983]
[85.39867401 87.22315979]
[94.16802979 75.05358887]
[85.16289520 63.05744553]
[76.15776062 51.06129456]
[67.15262604 39.06514740]
[51.53650284 35.38871002]
[44.80488205 20.82626343]
[52.12168884 6.54887104]
[67.87409210 3.50892735]
[79.97820282 14.03841591]
[79.14878082 30.06001282]
[88.15390778 42.05616379]
[97.15904236 54.05231094]
[106.16417694 66.04846191]
[118.98046875 73.84221649]
[133.77461243 76.31873322]
[148.56877136 78.79524994]
[165.63311768 71.93749237]
[178.74990845 83.56338501]
[168.09889221 73.00139618]
[163.46148682 58.73624802]
[165.86573792 43.93017960]
[174.77865601 31.86535835]
[188.22445679 25.21627235]
[203.22253418 25.45686722]
[216.44815063 32.53380966]
[224.96949768 44.87830353]
[226.89759827 59.75386810]
[221.80503845 73.86293793]
[210.82070923 84.07785797]
[196.38052368 88.13418579]
[210.41372681 93.43220520]
[224.44694519 98.73021698]
[238.48014832 104.02823639]
[252.51336670 109.32624817]
[266.54656982 114.62426758]
[270.91491699 113.73722839]
[274.92352295 114.26406860]
[278.16467285 115.91043854]
[280.37161255 118.27818298]
[281.44046021 120.92159271]
[295.01785278 127.29769135]
[308.59524536 133.67378235]
[322.17263794 140.04988098]
[335.75003052 146.42596436]
[349.32739258 152.80206299]
[359.99697876 136.82875061]
[373.17767334 122.85888672]
[388.50018311 111.28262329]
[405.53543091 102.42308044]
[423.80651855 96.52731323]
[442.80212402 93.75942230]
[461.99078369 94.19597626]
[480.83584595 97.82390594]
[498.81030273 104.54090881]
[515.41168213 114.15829468]
[530.17614746 126.40632629]
[542.69116211 140.94174194]
[552.60736084 157.35743713]
[559.64813232 175.19378662]
[563.61730957 193.95159912]
[564.40466309 213.10600281]
[579.31835938 214.71273804]
[594.23205566 216.31947327]
[609.14575195 217.92620850]
[623.91748047 210.80380249]
[637.31732178 220.25765991]
[635.56072998 236.56245422]
[620.45471191 242.94522095]
[607.53900146 232.83990479]
[592.62530518 231.23316956]
[577.71160889 229.62643433]
[562.79791260 228.01969910]
[560.23364258 239.33764648]
[556.53784180 250.33900452]
[551.74822998 260.91098022]
[545.91387939 270.94509888]
[539.09436035 280.33847046]
[531.35949707 288.99472046]
[522.78845215 296.82498169]
[513.46893311 303.74893188]
[503.49649048 309.69540405]
[492.97314453 314.60339355]
[482.00677490 318.42239380]
[470.70974731 321.11315918]
[459.19775391 322.64791870]
[447.58886719 323.01080322]
[436.00201416 322.19793701]
[424.55599976 320.21752930]
[413.36816406 317.08972168]
[402.55322266 312.84640503]
[392.22213745 307.53094482]
[382.48080444 301.19769287]
[373.42922974 293.91143799]
[365.16024780 285.74673462]
[357.75872803 276.78720093]
[351.30065918 267.12457275]
[345.85238647 256.85778809]
[341.46987915 246.09201050]
[338.19818115 234.93757629]
[336.07098389 223.50874329]
[335.11026001 211.92263794]
[335.32598877 200.29803467]
[336.71612549 188.75407410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 98]
[6 97]
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 75]
[16 73]
[17 72]
[18 71]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[40 57]
[41 56]
[42 55]
[43 54]
[58 70]
[59 69]
[60 68]
[61 67]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
