%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUxxxxxxxxxxCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.29374695 79.88782501]
[152.63751221 86.09323883]
[138.98126221 92.29864502]
[125.32501984 98.50405121]
[111.66877747 104.70945740]
[100.89797211 115.14926910]
[94.26947784 128.60523987]
[87.64097595 142.06120300]
[81.01247406 155.51716614]
[79.43711853 172.39776611]
[62.78012085 175.55699158]
[55.13324356 160.42550659]
[67.55651093 148.88867188]
[74.18501282 135.43270874]
[80.81350708 121.97673798]
[87.44200897 108.52076721]
[83.12245178 102.38958740]
[74.12985992 114.39514160]
[59.93304443 109.55257416]
[60.15156174 94.55416870]
[74.48332977 90.12722015]
[70.16377258 83.99603271]
[55.26187134 85.70872498]
[40.35997009 87.42141724]
[51.85801315 97.05442810]
[54.64626312 111.79300690]
[47.46162033 124.96042633]
[33.55879211 130.59172058]
[19.23590279 126.13584900]
[10.98135471 113.61137390]
[12.53454304 98.69200134]
[23.19222260 88.13618469]
[8.19952583 87.66814423]
[-6.79316998 87.20010376]
[-21.78586578 86.73205566]
[-36.77856064 86.26401520]
[-50.96591568 94.48903656]
[-65.04586792 86.08148193]
[-64.53417206 69.69032288]
[-49.95721054 62.17737579]
[-36.31052017 71.27131653]
[-21.31782341 71.73936462]
[-6.32512760 72.20740509]
[8.66756821 72.67544556]
[23.66026497 73.14348602]
[38.64728165 72.51950836]
[53.54918289 70.80682373]
[68.45108795 69.09413147]
[96.62759399 72.88513947]
[105.46337128 91.05321503]
[119.11961365 84.84780884]
[132.77586365 78.64240265]
[146.43209839 72.43699646]
[160.08833313 66.23159027]
[155.53019714 53.95641327]
[151.79107666 41.40766525]
[148.88722229 28.63991547]
[146.83125305 15.70870399]
[145.63208008 2.67026877]
[145.29490662 -10.41868305]
[145.82116699 -23.50122643]
[147.20854187 -36.52046967]
[149.45098877 -49.41978836]
[152.53872681 -62.14308929]
[156.45829773 -74.63504791]
[161.19265747 -86.84133911]
[166.72117615 -98.70888519]
[173.01980591 -110.18608856]
[180.06111145 -121.22303772]
[187.81446838 -131.77174377]
[196.24612427 -141.78636169]
[205.31941223 -151.22332764]
[214.99484253 -160.04164124]
[225.23033142 -168.20294189]
[235.98133850 -175.67176819]
[247.20111084 -182.41566467]
[258.84082031 -188.40530396]
[270.84985352 -193.61465454]
[283.17596436 -198.02110291]
[295.76556396 -201.60548401]
[308.56384277 -204.35224915]
[321.51516724 -206.24946594]
[334.56323242 -207.28890991]
[347.65124512 -207.46607971]
[360.72232056 -206.78021240]
[373.71957397 -205.23434448]
[386.58651733 -202.83518982]
[399.26718140 -199.59323120]
[411.70645142 -195.52256775]
[423.85018921 -190.64093018]
[435.64562988 -184.96957397]
[447.04147339 -178.53318787]
[457.98812866 -171.35978699]
[468.43807983 -163.48056030]
[478.34582520 -154.92982483]
[487.66830444 -145.74476624]
[496.36502075 -135.96534729]
[504.39816284 -125.63412476]
[511.73275757 -114.79603577]
[518.33697510 -103.49822235]
[524.18212891 -91.78983307]
[529.24279785 -79.72180939]
[533.49694824 -67.34662628]
[536.92620850 -54.71812439]
[539.51556396 -41.89122391]
[541.25384521 -28.92171478]
[542.13348389 -15.86600590]
[542.15069580 -2.78087878]
[541.30541992 10.27676105]
[556.16851807 12.29909515]
[571.03155518 14.32142925]
[580.37060547 2.12808681]
[594.56127930 -3.74730635]
[609.78637695 -1.72429848]
[621.95037842 7.65293121]
[627.78125000 21.86195564]
[625.71051025 37.08061981]
[616.29522705 49.21517563]
[602.06799316 55.00149155]
[586.85589600 52.88307571]
[574.75091553 43.42977524]
[569.00921631 29.18447685]
[554.14617920 27.16214180]
[539.28314209 25.13980675]
[535.45538330 42.46207428]
[530.09564209 59.37364960]
[523.24658203 75.73932648]
[514.96295166 91.42823792]
[505.31088257 106.31494141]
[494.36743164 120.28038025]
[482.22003174 133.21289062]
[468.96572876 145.00901794]
[454.71044922 155.57440186]
[439.56805420 164.82453918]
[423.65957642 172.68539429]
[407.11212158 179.09407043]
[390.05798340 183.99926758]
[372.63342285 187.36169434]
[354.97772217 189.15437317]
[337.23202515 189.36293030]
[319.53817749 187.98558044]
[302.03762817 185.03326416]
[284.87026978 180.52952576]
[268.17340088 174.51025391]
[252.08047485 167.02351379]
[236.72018433 158.12905884]
[222.21536255 147.89794922]
[208.68199158 136.41188049]
[196.22831726 123.76261139]
[184.95394897 110.05120850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[6 16]
[7 15]
[8 14]
[9 13]
[22 48]
[23 47]
[24 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[109 124]
[110 123]
[111 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
