%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCxxxxxxxxxxAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.51396942 416.41259766]
[105.51396942 401.41259766]
[105.51396942 386.41259766]
[105.51396942 371.41259766]
[105.51396942 356.41259766]
[105.51396942 341.41259766]
[105.51396942 326.41259766]
[105.51396942 311.41259766]
[105.51396942 296.41259766]
[105.51396942 281.41259766]
[87.47815704 274.01919556]
[74.36625671 259.53274536]
[68.77482605 240.76187134]
[71.83707428 221.36940002]
[82.99346161 205.15769958]
[100.09339905 195.32305908]
[98.22578430 180.43977356]
[96.35816956 165.55650330]
[84.47578430 156.64894104]
[82.36973572 141.58178711]
[91.79335785 129.17884827]
[89.92574310 114.29556274]
[79.82709503 103.20424652]
[65.18359375 99.95342255]
[50.54009247 96.70259857]
[35.89659119 93.45176697]
[21.25309181 90.20094299]
[6.30500412 88.95407104]
[-8.67471027 89.73391724]
[-23.65442467 90.51376343]
[-38.63414001 91.29360199]
[-45.54010010 105.01232147]
[-58.38899612 113.42668152]
[-73.72454071 114.27326202]
[-87.42154694 107.32433319]
[-95.79558563 94.44912720]
[-96.59409332 79.11100006]
[-89.60226440 65.43584442]
[-76.70086670 57.10220337]
[-61.36032104 56.35177994]
[-47.70714569 63.38644028]
[-39.41398239 76.31388855]
[-24.43426895 75.53404236]
[-9.45455551 74.75420380]
[5.52515888 73.97435760]
[-7.25352383 66.11908722]
[-15.82553864 53.80971527]
[-18.76088142 39.09972763]
[-15.56987095 24.44307709]
[-6.78483963 12.28481865]
[6.12867308 4.65322685]
[21.01640129 2.82142043]
[35.39474106 7.09498644]
[46.86505890 16.76099777]
[53.51385498 30.20694733]
[54.23195267 45.18974686]
[48.89955902 59.20993423]
[38.40624237 69.92861938]
[24.50391769 75.55744171]
[39.14741898 78.80826569]
[53.79092026 82.05909729]
[68.43441772 85.30992126]
[83.07791901 88.56074524]
[96.01597595 80.97084045]
[100.32356262 66.60265350]
[104.63114929 52.23447037]
[108.93872833 37.86628723]
[113.24631500 23.49810219]
[100.03562164 16.27513313]
[88.61560822 6.46304798]
[79.48551941 -5.50921345]
[73.04446411 -19.11827469]
[69.57403564 -33.76920700]
[69.22593689 -48.82153320]
[72.01538849 -63.61722946]
[77.82044220 -77.50949097]
[86.38733673 -89.89101410]
[97.34155273 -100.22052765]
[110.20422363 -108.04646301]
[124.41305542 -113.02671814]
[139.34689331 -114.94356537]
[154.35287476 -113.71321106]
[168.77503967 -109.38944244]
[181.98289490 -102.16127777]
[193.39904785 -92.34470367]
[202.52442932 -80.36885071]
[208.96012878 -66.75725555]
[212.42478943 -52.10495758]
[212.76696777 -37.05249786]
[209.97169495 -22.25789833]
[204.16117859 -8.36791801]
[195.58941650 4.01023149]
[184.63113403 14.33543205]
[171.76538086 22.15631104]
[157.55459595 27.13097000]
[142.62001038 29.04194260]
[127.61450195 27.80568695]
[123.30691528 42.17387009]
[118.99932861 56.54205322]
[114.69174957 70.91024017]
[110.38416290 85.27841949]
[114.83033752 91.31842041]
[126.91047668 82.42626953]
[135.80242920 94.50655365]
[123.72268677 103.39840698]
[128.16886902 109.43840027]
[143.16804504 109.59443665]
[158.16723633 109.75047302]
[165.91546631 96.48922729]
[179.26419067 88.89270782]
[194.62266541 89.00433350]
[207.85955811 96.79409027]
[215.41419983 110.16655731]
[215.25444031 125.52462006]
[207.42323303 138.73703003]
[194.02714539 146.24972534]
[178.66966248 146.04180908]
[165.48185730 138.16923523]
[158.01119995 124.74966431]
[143.01200867 124.59362793]
[128.01281738 124.43758392]
[114.49248505 120.67683411]
[104.80902863 112.42794800]
[106.67663574 127.31123352]
[118.87257385 137.00126648]
[120.55458069 152.12164307]
[111.24145508 163.68888855]
[113.10906219 178.57215881]
[114.97667694 193.45544434]
[125.67142487 195.29951477]
[135.59268188 199.66618347]
[144.15585327 206.29132080]
[150.85800171 214.77798462]
[155.30735779 224.62008667]
[157.24632263 235.23266602]
[156.56622314 245.98657227]
[153.31353760 256.24581909]
[147.68666077 265.40515137]
[140.02386475 272.92581177]
[130.78297424 278.36718750]
[120.51396942 281.41259766]
[120.51396942 296.41259766]
[120.51396942 311.41259766]
[120.51396942 326.41259766]
[120.51396942 341.41259766]
[120.51396942 356.41259766]
[120.51396942 371.41259766]
[120.51396942 386.41259766]
[120.51396942 401.41259766]
[120.51396942 416.41259766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 129]
[17 128]
[18 127]
[21 124]
[22 123]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[28 45]
[29 44]
[30 43]
[31 42]
[64 101]
[65 100]
[66 99]
[67 98]
[68 97]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
