%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGxxxxxxxxxxUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[138.87397766 423.67260742]
[138.87397766 408.67260742]
[138.87397766 393.67260742]
[138.87397766 378.67260742]
[138.87397766 363.67260742]
[138.87397766 348.67260742]
[138.87397766 333.67260742]
[138.87397766 318.67260742]
[138.87397766 303.67260742]
[138.87397766 288.67260742]
[137.16128540 273.77072144]
[133.75831604 259.16180420]
[118.80027771 258.70709229]
[104.45866394 254.39257812]
[91.71282196 246.50665283]
[81.43474579 235.58174133]
[74.32942963 222.35845947]
[70.88652039 207.73535156]
[71.34654999 192.70783997]
[75.68415833 178.30049133]
[83.60942078 165.49713135]
[94.58721161 155.17367554]
[107.87331390 148.03823853]
[104.47033691 133.42933655]
[101.06735992 118.82044983]
[88.12930298 111.23054504]
[73.71708679 115.38842773]
[59.30487442 119.54631805]
[50.32225800 132.83888245]
[34.31842804 133.96006775]
[23.57015800 122.04981232]
[26.32259750 106.24463654]
[40.46430969 98.66891479]
[55.14698410 105.13410187]
[69.55920410 100.97621155]
[83.97142029 96.81832886]
[83.65936279 81.82157135]
[69.08666229 78.26680756]
[54.51395798 74.71205139]
[39.94125366 71.15728760]
[25.36855125 67.60252380]
[9.78822803 72.71971130]
[-2.25146890 61.58517838]
[1.63486886 45.65318680]
[17.44931030 41.31319809]
[28.92331314 53.02982330]
[43.49601364 56.58458328]
[58.06871796 60.13934708]
[72.64141846 63.69410706]
[87.21412659 67.24887085]
[78.89202118 54.76918411]
[86.41251373 41.79065704]
[101.37816620 42.80522537]
[107.07800293 56.68116760]
[112.27341461 42.60964966]
[117.46883392 28.53812981]
[104.04009247 21.82009315]
[91.43190002 13.66553402]
[79.79732513 4.17343950]
[69.27759552 -6.54096365]
[60.00040817 -18.34761429]
[52.07838058 -31.10318756]
[45.60767746 -44.65284348]
[40.66685104 -58.83210373]
[37.31587601 -73.46884155]
[35.59543228 -88.38539124]
[35.52640152 -103.40065765]
[37.10962296 -118.33238983]
[40.32587433 -132.99932861]
[45.13611984 -147.22341919]
[51.48196411 -160.83200073]
[59.28637314 -173.65986633]
[68.45461273 -185.55131531]
[78.87538147 -196.36199951]
[90.42219543 -205.96066284]
[102.95486450 -214.23080444]
[116.32127380 -221.07203674]
[130.35916138 -226.40129089]
[144.89811707 -230.15390015]
[159.76164246 -232.28428650]
[174.76933289 -232.76661682]
[189.73898315 -231.59500122]
[204.48889160 -228.78370667]
[218.83999634 -224.36682129]
[232.61810303 -218.39797974]
[245.65594482 -210.94963074]
[257.79525757 -202.11219788]
[268.88867188 -191.99295044]
[278.80154419 -180.71473694]
[287.41354370 -168.41445923]
[294.62011719 -155.24143982]
[300.33377075 -141.35556030]
[304.48513794 -126.92541504]
[307.02386475 -112.12615967]
[307.91912842 -97.13743591]
[307.16003418 -82.14120483]
[304.75579834 -67.31950378]
[300.73562622 -52.85224915]
[295.14831543 -38.91506958]
[288.06167603 -25.67713928]
[279.56173706 -13.29916096]
[269.75170898 -1.93139112]
[258.75061035 8.28817654]
[246.69206238 17.23548698]
[233.72239685 24.80192566]
[219.99906921 30.89564323]
[205.68865967 35.44266891]
[190.96488953 38.38780594]
[176.00650024 39.69530487]
[160.99505615 39.34928894]
[146.11277771 37.35396194]
[131.54035950 33.73354340]
[126.34494019 47.80506516]
[121.14952087 61.87658310]
[115.67625427 115.41747284]
[119.07923126 130.02636719]
[122.48220825 144.63525391]
[137.55384827 145.16508484]
[151.96356201 149.57479858]
[164.73085022 157.55805969]
[174.98857117 168.56559753]
[182.04190063 181.84295654]
[185.41534424 196.48225403]
[184.88478088 211.48422241]
[180.49240112 225.82644653]
[172.54335022 238.53302002]
[161.58457947 248.74096680]
[148.36720276 255.75883484]
[151.77018738 270.36773682]
[157.83146667 256.64691162]
[169.49446106 247.21427917]
[184.17944336 244.15626526]
[198.63821411 248.14926147]
[209.67262268 258.31005859]
[214.84197998 272.39117432]
[213.00285339 287.27798462]
[204.56204224 299.67770386]
[191.38658142 306.84759521]
[176.39076233 307.20175171]
[162.89152527 300.66183472]
[153.87397766 288.67260742]
[153.87397766 303.67260742]
[153.87397766 318.67260742]
[153.87397766 333.67260742]
[153.87397766 348.67260742]
[153.87397766 363.67260742]
[153.87397766 378.67260742]
[153.87397766 393.67260742]
[153.87397766 408.67260742]
[153.87397766 423.67260742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[23 117]
[24 116]
[25 115]
[26 36]
[27 35]
[28 34]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[54 114]
[55 113]
[56 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
