%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAxxxxxxxxxxUACUCUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.91650391 285.04510498]
[73.91650391 270.04510498]
[73.91650391 255.04510498]
[73.91650391 240.04510498]
[73.91650391 225.04510498]
[73.91650391 210.04510498]
[73.91650391 195.04510498]
[73.91650391 180.04510498]
[73.91650391 165.04510498]
[73.91650391 150.04510498]
[61.65413284 141.40599060]
[47.52933121 146.45474243]
[33.40452576 151.50349426]
[19.27972412 156.55226135]
[5.15492153 161.60101318]
[-5.23580980 173.53178406]
[-19.82473946 170.52972412]
[-30.21547127 182.46049500]
[-44.80440140 179.45841980]
[-58.92920303 184.50718689]
[-73.05400848 189.55593872]
[-87.17881012 194.60469055]
[-87.89466858 209.78877258]
[-94.37124634 223.54093933]
[-105.62092590 233.76411438]
[-119.92819214 238.89932251]
[-135.11131287 238.16349792]
[-148.85494995 231.66883850]
[-159.06332397 220.40571594]
[-164.17970276 206.09170532]
[-163.42390442 190.90957642]
[-156.91116333 177.17448425]
[-145.63462830 166.98094177]
[-131.31390381 161.88339233]
[-116.13277435 162.65916443]
[-102.40626526 169.18995667]
[-92.22756958 180.47988892]
[-78.10276031 175.43113708]
[-63.97796249 170.38238525]
[-49.85315704 165.33361816]
[-40.47272873 153.76397705]
[-24.87349701 156.40492249]
[-15.49306488 144.83526611]
[0.10616527 147.47621155]
[14.23096848 142.42745972]
[28.35577202 137.37869263]
[42.48057556 132.32994080]
[56.60537720 127.28118134]
[51.89390945 116.71570587]
[49.69540787 105.43427277]
[50.08969116 94.02213287]
[53.02294159 83.06368256]
[58.31220245 73.11251068]
[65.65640259 64.66345215]
[74.65332794 58.12800598]
[84.82156372 53.81435013]
[95.62621307 51.91291046]
[106.50699615 52.48815918]
[116.90730286 55.47703552]
[126.30269623 60.69385147]
[136.51617432 49.70818710]
[146.72966003 38.72251892]
[150.31301880 30.24836159]
[157.27171326 27.61736298]
[167.71153259 16.84655380]
[178.15133667 6.07574558]
[168.58390808 -5.49695206]
[160.34765625 -18.05192566]
[153.54255676 -31.43676567]
[148.25125122 -45.48899841]
[144.53793335 -60.03803635]
[142.44770813 -74.90727234]
[142.00593567 -89.91619873]
[143.21797180 -104.88263702]
[146.06912231 -119.62489319]
[150.52476501 -133.96401978]
[156.53080750 -147.72593689]
[164.01435852 -160.74360657]
[172.88455200 -172.85900879]
[183.03372192 -183.92504883]
[194.33868408 -193.80741882]
[206.66218567 -202.38615417]
[219.85462952 -209.55709839]
[233.75588989 -215.23321533]
[248.19720459 -219.34559631]
[263.00326538 -221.84432983]
[277.99435425 -222.69908142]
[292.98846436 -221.89947510]
[307.80361938 -219.45521545]
[322.25997925 -215.39596558]
[336.18200684 -209.77101135]
[349.40072632 -202.64863586]
[361.75570679 -194.11529541]
[373.09692383 -184.27456665]
[383.28674316 -173.24592590]
[392.20144653 -161.16323853]
[399.73281860 -148.17317200]
[405.78942871 -134.43344116]
[410.29776001 -120.11079407]
[413.20312500 -105.37912750]
[414.47018433 -90.41725159]
[414.08361816 -75.40679169]
[412.04809570 -60.52997208]
[408.38833618 -45.96737671]
[403.14874268 -31.89578056]
[396.39291382 -18.48600006]
[388.20288086 -5.90082073]
[378.67810059 5.70698690]
[367.93411255 16.19651413]
[356.10137939 25.44042778]
[343.32357788 33.32651520]
[329.75573730 39.75904846]
[315.56262207 44.65993881]
[300.91653442 47.96969604]
[285.99517822 49.64814377]
[270.97979736 49.67490387]
[256.05258179 48.04965591]
[241.39474487 44.79212570]
[227.18424988 39.94185638]
[213.59359741 33.55772781]
[200.78773499 25.71723557]
[188.92214966 16.51555824]
[178.48233032 27.28636742]
[168.04252625 38.05717468]
[157.71531677 48.93600082]
[147.50183105 59.92166519]
[137.28836060 70.90733337]
[142.03625488 77.71519470]
[145.54492188 85.29164124]
[147.69114685 93.41171265]
[148.39250183 101.83093262]
[147.61032104 110.29271698]
[145.35139465 118.53614807]
[141.66835022 126.30404663]
[136.65847778 133.35096741]
[130.46124268 139.45100403]
[123.25445557 144.40490723]
[115.24920654 148.04669189]
[106.68363953 150.24906921]
[97.81594086 150.92787170]
[88.91650391 150.04510498]
[88.91650391 165.04510498]
[88.91650391 180.04510498]
[88.91650391 195.04510498]
[88.91650391 210.04510498]
[88.91650391 225.04510498]
[88.91650391 240.04510498]
[88.91650391 255.04510498]
[88.91650391 270.04510498]
[88.91650391 285.04510498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 48]
[12 47]
[13 46]
[14 45]
[15 44]
[17 42]
[19 40]
[20 39]
[21 38]
[22 37]
[60 127]
[61 126]
[62 125]
[64 124]
[65 123]
[66 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
