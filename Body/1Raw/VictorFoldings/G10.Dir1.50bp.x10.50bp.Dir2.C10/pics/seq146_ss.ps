%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAxxxxxxxxxxGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.45066833 294.27932739]
[97.45066833 279.27932739]
[97.45066833 264.27932739]
[97.45066833 249.27931213]
[97.45066833 234.27931213]
[97.45066833 219.27931213]
[97.45066833 204.27931213]
[97.45066833 189.27931213]
[97.45066833 174.27931213]
[97.45066833 159.27931213]
[83.79442596 153.07391357]
[72.49542236 162.93963623]
[61.19641876 172.80535889]
[49.89741135 182.67108154]
[38.59840775 192.53680420]
[27.29940414 202.40252686]
[16.00039864 212.26824951]
[4.70139408 222.13397217]
[-0.08870091 237.81794739]
[-16.12523651 241.24745178]
[-26.91119957 228.89451599]
[-21.35091591 213.46676636]
[-5.16432905 210.83496094]
[6.13467598 200.96923828]
[17.43368149 191.10351562]
[28.73268509 181.23779297]
[40.03168869 171.37207031]
[51.33069611 161.50634766]
[62.62969971 151.64062500]
[73.92870331 141.77490234]
[62.36997604 126.83274078]
[57.90738678 109.67971802]
[60.39582062 93.30857086]
[45.39663315 93.46460724]
[30.39744377 93.62064362]
[16.56451797 102.42871857]
[2.14701295 94.61414337]
[1.97642195 78.21588898]
[16.22823524 70.10306549]
[30.24140739 78.62145996]
[45.24059677 78.46542358]
[60.23978424 78.30938721]
[69.50473785 66.51274109]
[66.10175323 51.90385056]
[62.69877625 37.29496002]
[59.29579926 22.68606758]
[55.89282227 8.07717514]
[52.48984528 -6.53171778]
[49.08686447 -21.14060974]
[45.68388748 -35.74950409]
[42.28091049 -50.35839462]
[29.38870811 -63.46453857]
[35.05949402 -80.04290009]
[31.35333443 -94.57783508]
[16.32550240 -93.77131653]
[1.42912364 -95.91238403]
[-12.76322269 -100.91873169]
[-25.70602036 -108.59793854]
[-36.90178299 -118.65483093]
[-45.92017746 -130.70285034]
[-52.41455841 -144.27890015]
[-56.13530350 -158.86116028]
[-56.93938828 -173.88912964]
[-54.79591370 -188.78515625]
[-49.78726578 -202.97669983]
[-42.10596466 -215.91825867]
[-32.04726028 -227.11238098]
[-19.99778175 -236.12882996]
[-6.42067575 -242.62101746]
[8.16218662 -246.33940125]
[23.19027901 -247.14105225]
[38.08596420 -244.99516296]
[52.27668762 -239.98422241]
[65.21700287 -232.30082703]
[76.40950775 -222.24031067]
[85.42400360 -210.18937683]
[91.91398621 -196.61122131]
[95.63000488 -182.02775574]
[96.42922974 -166.99952698]
[94.28093719 -152.10418701]
[89.26769257 -137.91427612]
[81.58220673 -124.97521210]
[71.51987457 -113.78433228]
[59.46747589 -104.77178955]
[45.88827133 -98.28399658]
[49.59443283 -83.74906158]
[59.86080170 -77.27534485]
[63.04056549 -65.14653778]
[56.88980103 -53.76137161]
[60.29278183 -39.15248108]
[63.69575882 -24.54358864]
[67.09873962 -9.93469620]
[70.50171661 4.67419672]
[73.90469360 19.28308868]
[77.30767059 33.89198303]
[80.71064758 48.50087357]
[84.11362457 63.10976791]
[98.19151306 61.09803391]
[111.64138794 64.11876678]
[122.77827454 71.47858429]
[130.31912231 81.96138000]
[144.54589844 77.20756531]
[158.77267456 72.45375061]
[169.23301697 59.82389832]
[185.35350037 62.83429337]
[190.55072021 78.38809204]
[179.47825623 90.48488617]
[163.52648926 86.68052673]
[149.29971313 91.43434143]
[135.07293701 96.18815613]
[141.06857300 109.96877289]
[141.06745911 127.17201996]
[155.39006042 131.62882996]
[169.71266174 136.08564758]
[180.08415222 124.88766479]
[194.29031372 119.30664825]
[209.51049805 120.45071411]
[222.72271729 128.09269714]
[231.30368042 140.71528625]
[233.54963684 155.81225586]
[229.01464844 170.38609314]
[218.59912109 181.54313660]
[204.37109375 187.06817627]
[189.15554810 185.86418152]
[175.97351074 178.17022705]
[167.44232178 165.51394653]
[165.25584412 150.40824890]
[150.93324280 145.95143127]
[136.61064148 141.49461365]
[130.57064819 145.94079590]
[141.00320435 156.71862793]
[151.43574524 167.49647522]
[164.98994446 173.92173767]
[169.45697021 188.24114990]
[161.96018982 201.23338318]
[147.32731628 204.53176880]
[134.98156738 196.01223755]
[132.87342834 181.16061401]
[125.68204498 167.99687195]
[118.49066162 154.83314514]
[112.45066833 159.27931213]
[112.45066833 174.27931213]
[112.45066833 189.27931213]
[112.45066833 204.27931213]
[112.45066833 219.27931213]
[112.45066833 234.27931213]
[112.45066833 249.27931213]
[112.45066833 264.27932739]
[112.45066833 279.27932739]
[112.45066833 294.27932739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[33 42]
[34 41]
[35 40]
[43 97]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[51 89]
[53 86]
[54 85]
[101 110]
[102 109]
[103 108]
[112 129]
[113 128]
[114 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
