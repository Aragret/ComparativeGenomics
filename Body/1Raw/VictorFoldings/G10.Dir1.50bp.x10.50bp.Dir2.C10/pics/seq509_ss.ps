%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUxxxxxxxxxxUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-23.61916351 217.89466858]
[-34.91816711 227.76039124]
[-46.21717453 237.62611389]
[-57.51617813 247.49183655]
[-66.90334320 259.19146729]
[-74.08584595 272.36004639]
[-81.26835632 285.52862549]
[-88.45086670 298.69720459]
[-95.63337708 311.86578369]
[-102.81588745 325.03436279]
[-105.09208679 341.83483887]
[-121.86608124 344.29840088]
[-128.87689209 328.86193848]
[-115.98446655 317.85186768]
[-108.80195618 304.68328857]
[-101.61944580 291.51470947]
[-94.43694305 278.34613037]
[-87.25443268 265.17755127]
[-80.07192230 252.00895691]
[-90.28540039 241.02328491]
[-103.94164276 247.22869873]
[-113.30467224 259.98190308]
[-128.09265137 258.20294189]
[-141.74890137 264.40835571]
[-155.40513611 270.61373901]
[-164.49746704 284.26150513]
[-180.84339905 282.94131470]
[-187.62762451 268.01129150]
[-177.87112427 254.83012390]
[-161.61054993 256.95751953]
[-147.95429993 250.75210571]
[-134.29806519 244.54669189]
[-125.91181946 232.23733521]
[-110.14704895 233.57244873]
[-96.49080658 227.36705017]
[-78.08792877 226.93283081]
[-67.38190460 236.19284058]
[-56.08289719 226.32711792]
[-44.78389359 216.46139526]
[-33.48488617 206.59567261]
[-43.62882996 192.47491455]
[-52.28486633 177.39619446]
[-59.36333084 161.51568604]
[-64.79089355 144.99792480]
[-68.51132202 128.01400757]
[-70.48608398 110.73987579]
[-70.69472504 93.35449982]
[-69.13507080 76.03795624]
[-65.82328033 58.96965027]
[-60.79367447 42.32639313]
[-54.09834671 26.28059387]
[-45.80665588 10.99848270]
[-36.00450134 -3.36162901]
[-24.79342842 -16.65098000]
[-12.28957367 -28.73190117]
[1.37752903 -39.47924423]
[16.06629753 -48.78166962]
[31.62456703 -56.54280853]
[47.89116287 -62.68226624]
[64.69757080 -67.13643646]
[81.86968994 -69.85918427]
[80.93405914 -84.82997894]
[79.99843597 -99.80076599]
[79.06280518 -114.77156067]
[78.12717438 -129.74235535]
[77.19155121 -144.71315002]
[62.71543121 -149.27455139]
[50.86706543 -158.76036072]
[43.24884796 -171.88771057]
[40.89108276 -186.88122559]
[44.11263275 -201.71315002]
[52.47781372 -214.37759399]
[64.85530090 -223.16180420]
[79.57114410 -226.87776184]
[94.63514709 -225.02294922]
[108.01001740 -217.84819031]
[117.88692474 -206.32382202]
[122.93009186 -192.00840759]
[122.45748138 -176.83801270]
[116.53299713 -162.86428833]
[105.95788574 -151.97706604]
[92.16233826 -145.64877319]
[93.09796906 -130.67797852]
[94.03359985 -115.70719147]
[94.96922302 -100.73639679]
[95.90485382 -85.76560211]
[96.84048462 -70.79481506]
[112.32919312 -70.37852478]
[127.71646881 -68.56051636]
[142.87571716 -65.35575104]
[157.68222046 -60.79058456]
[172.01417542 -54.90258026]
[185.75366211 -47.74018097]
[198.78764343 -39.36231232]
[211.00888062 -29.83789444]
[222.31684875 -19.24528885]
[232.61849976 -7.67164326]
[241.82910156 4.78782654]
[249.87284851 18.03061485]
[256.68359375 31.94777298]
[262.20526123 46.42480087]
[266.39248657 61.34259796]
[269.21075439 76.57843781]
[284.14508057 75.17613220]
[299.07937622 73.77382660]
[314.01367188 72.37152100]
[328.94799805 70.96922302]
[343.88229370 69.56691742]
[355.18237305 58.17886353]
[371.11517334 60.05646133]
[379.45843506 73.75937653]
[373.81188965 88.77590179]
[358.50711060 93.58665466]
[345.28460693 84.50122070]
[330.35028076 85.90352631]
[315.41598511 87.30583191]
[300.48168945 88.70813751]
[285.54736328 90.11043549]
[270.61306763 91.51274109]
[270.77517700 104.08563232]
[270.01199341 116.63639069]
[268.32769775 129.09700012]
[265.73138428 141.39997864]
[262.23712158 153.47863770]
[257.86386108 165.26754761]
[252.63526917 176.70281982]
[246.57969666 187.72253418]
[239.72994995 198.26695251]
[232.12312317 208.27894592]
[223.80046082 217.70428467]
[214.80702209 226.49189758]
[205.19155884 234.59416199]
[195.00616455 241.96717834]
[184.30601501 248.57101440]
[173.14907837 254.36988831]
[161.59582520 259.33236694]
[149.70884705 263.43157959]
[137.55253601 266.64529419]
[125.19277191 268.95614624]
[112.69650269 270.35156250]
[100.13144684 270.82397461]
[87.56567383 270.37088013]
[75.06727600 268.99468994]
[62.70396423 266.70291138]
[50.54272461 263.50787354]
[38.64944839 259.42697144]
[27.08857346 254.48228455]
[15.92273712 248.70059204]
[5.21243715 242.11322021]
[-4.98429680 234.75588989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[20 35]
[21 34]
[23 32]
[24 31]
[25 30]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[103 119]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
