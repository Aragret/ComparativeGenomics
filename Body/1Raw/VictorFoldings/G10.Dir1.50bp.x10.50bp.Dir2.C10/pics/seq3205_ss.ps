%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCxxxxxxxxxxGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.12281799 607.47772217]
[103.12281799 592.47772217]
[103.12281799 577.47772217]
[103.12281799 562.47772217]
[103.12281799 547.47772217]
[103.12281799 532.47772217]
[103.12281799 517.47772217]
[103.12281799 502.47772217]
[103.12281799 487.47772217]
[103.12281799 472.47772217]
[89.01146698 469.21658325]
[75.97877502 462.88156128]
[64.68521118 453.78997803]
[55.70394135 442.39889526]
[49.49174118 429.28222656]
[46.36576843 415.10177612]
[46.48736954 400.57382202]
[49.85376740 386.43301392]
[56.29801178 373.39517212]
[65.49726868 362.12103271]
[76.98898315 353.18276978]
[90.19416046 347.03503418]
[104.44648743 343.99169922]
[104.75446320 328.99487305]
[105.06243896 313.99804688]
[105.37041473 299.00119019]
[91.41311646 293.66461182]
[80.10257721 283.85641479]
[72.81655121 270.74578857]
[70.45129395 255.90576172]
[73.31133270 241.12434387]
[81.07042694 228.18923950]
[92.80866241 218.67158508]
[107.12145996 213.73506165]
[107.42943573 198.73823547]
[107.73741150 183.74139404]
[108.04538727 168.74455261]
[107.89139557 153.74534607]
[107.27556610 138.75799561]
[106.65974426 123.77063751]
[106.04391479 108.78327942]
[103.76524353 113.79823303]
[98.74641418 117.89978790]
[91.47087097 119.82788849]
[82.94347382 118.58483887]
[74.55671692 113.63460541]
[67.88568115 105.03861237]
[55.05202866 97.27347565]
[42.21837234 89.50833893]
[25.82049942 89.71279144]
[17.67826843 75.47776031]
[26.16770935 61.44702911]
[42.55561066 62.05421066]
[49.98350906 76.67469025]
[62.81716156 84.43982697]
[75.65081787 92.20495605]
[87.62107086 83.16544342]
[83.66446686 68.69667053]
[68.58497620 68.94148254]
[53.91855240 65.42768860]
[40.58713150 58.37616348]
[29.42873573 48.23017502]
[21.14479637 35.62751007]
[16.25604439 21.36038399]
[15.06979370 6.32563591]
[17.66061211 -8.53163433]
[23.86563873 -22.27748680]
[33.29482269 -34.04784393]
[45.35543060 -43.10281754]
[59.28932953 -48.87319565]
[74.22061920 -50.99625397]
[89.21070862 -49.33853149]
[103.31730652 -44.00423813]
[115.65366364 -35.32868576]
[125.44429779 -23.85723305]
[132.07377625 -10.31098175]
[135.12535095 4.45853853]
[134.40719604 19.52290344]
[129.96446228 33.93515396]
[122.07642365 46.78932190]
[111.23892975 57.27738953]
[98.13323212 64.74005890]
[102.08984375 79.20883179]
[116.51722717 83.31377411]
[127.49803162 73.09506989]
[138.47883606 62.87635803]
[149.45964050 52.65765381]
[160.44042969 42.43894577]
[171.42123413 32.22023773]
[182.40203857 22.00153160]
[177.83259583 7.43846607]
[180.04283142 -7.66377211]
[188.59391785 -20.30662346]
[201.78802490 -27.97983932]
[217.00546265 -29.15989685]
[231.22477722 -23.61249733]
[241.62272644 -12.43907833]
[246.13479614 2.14186788]
[243.86511230 17.23528481]
[235.26429749 29.84436417]
[222.04006958 37.46556091]
[206.81811523 38.58568573]
[192.62074280 32.98233414]
[181.63995361 43.20104218]
[170.65914917 53.41974640]
[159.67834473 63.63845444]
[148.69754028 73.85716248]
[137.71673584 84.07586670]
[126.73593140 94.29457855]
[121.03127289 108.16745758]
[121.64709473 123.15480804]
[122.26292419 138.14216614]
[122.87874603 153.12951660]
[125.74540710 157.63922119]
[126.47866821 162.32621765]
[125.37742615 166.33332825]
[123.04222870 169.05253601]
[122.73425293 184.04936218]
[122.42626953 199.04620361]
[122.11829376 214.04304504]
[136.21635437 219.56301880]
[147.55393982 229.55456543]
[154.77545166 242.79730225]
[157.02622986 257.68368530]
[154.05369568 272.41409302]
[146.23556519 285.21453857]
[134.53189087 294.55010986]
[120.36725616 299.30917358]
[120.05928040 314.30599976]
[119.75129700 329.30285645]
[119.44332123 344.29968262]
[134.48548889 348.28750610]
[148.13574219 355.74194336]
[159.60905457 366.22958374]
[168.24671936 379.14266968]
[173.55415344 393.73437500]
[175.22924805 409.16192627]
[173.17958069 424.53543091]
[167.52742004 438.96902466]
[158.60250854 451.63201904]
[146.92285156 461.79672241]
[133.16456604 468.88018799]
[118.12281799 472.47772217]
[118.12281799 487.47772217]
[118.12281799 502.47772217]
[118.12281799 517.47772217]
[118.12281799 532.47772217]
[118.12281799 547.47772217]
[118.12281799 562.47772217]
[118.12281799 577.47772217]
[118.12281799 592.47772217]
[118.12281799 607.47772217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[23 131]
[24 130]
[25 129]
[26 128]
[34 120]
[35 119]
[36 118]
[37 117]
[38 113]
[39 112]
[40 111]
[41 110]
[47 56]
[48 55]
[49 54]
[57 83]
[58 82]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
