%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUxxxxxxxxxxCUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.47708893 420.97872925]
[107.16503906 405.98199463]
[106.85298157 390.98522949]
[106.54092407 375.98846436]
[106.22886658 360.99172974]
[105.91680908 345.99496460]
[105.60475159 330.99819946]
[105.29270172 316.00146484]
[104.98064423 301.00469971]
[88.97991180 297.66574097]
[74.21306610 290.63885498]
[61.51721573 280.31814575]
[51.61304855 267.28460693]
[45.06395340 252.27325439]
[42.24395370 236.13188171]
[43.31636429 219.77304077]
[48.22432327 204.12252808]
[56.69380188 190.06690979]
[68.24890137 178.40341187]
[82.23858643 169.79455566]
[97.87337494 164.73069763]
[96.62650299 149.78260803]
[83.57160187 147.11471558]
[71.68827057 141.08691406]
[61.82394028 132.12905884]
[54.68207550 120.87998199]
[40.26985931 125.03787231]
[25.85764122 129.19575500]
[16.87502480 142.48831177]
[0.87119830 143.60951233]
[-9.87707233 131.69924927]
[-7.12463379 115.89407349]
[7.01707935 108.31835938]
[21.69975471 114.78353882]
[36.11196899 110.62565613]
[50.52418518 106.46776581]
[51.14759064 89.84469604]
[57.20066833 74.35033417]
[68.01065063 61.70679092]
[82.37607574 53.31932449]
[98.70030212 50.12015533]
[100.56791687 35.23687744]
[102.43553162 20.35359573]
[104.30314636 5.47031593]
[94.87952423 -6.93263245]
[96.98556519 -21.99979019]
[108.86795807 -30.90733719]
[110.73556519 -45.79061508]
[112.44825745 -60.69252014]
[114.00583649 -75.61143494]
[115.56342316 -90.53034210]
[107.66164398 -107.12979889]
[118.43843842 -120.94503021]
[119.68531799 -135.89311218]
[120.93218994 -150.84120178]
[122.17906189 -165.78929138]
[122.02302551 -180.78848267]
[120.46544647 -195.70738220]
[118.90786743 -210.62629700]
[117.35028839 -225.54521179]
[102.40419006 -227.47161865]
[88.30544281 -232.79347229]
[75.81437683 -241.22375488]
[65.60460663 -252.30786133]
[58.22673798 -265.44802856]
[54.07865143 -279.93560791]
[53.38404465 -294.98931885]
[56.18038177 -309.79733276]
[62.31685638 -323.56106567]
[71.46253967 -335.53826904]
[83.12421417 -345.08300781]
[96.67297363 -351.68057251]
[111.37816620 -354.97512817]
[126.44673920 -354.78903198]
[141.06608582 -351.13232422]
[154.44778442 -344.20217896]
[165.87019348 -334.37234497]
[174.71730042 -322.17294312]
[180.51199341 -308.26187134]
[182.94178772 -293.38931274]
[181.87562561 -278.35736084]
[177.37103271 -263.97662354]
[169.67091370 -251.02267456]
[159.19052124 -240.19409180]
[146.49507141 -232.07484436]
[132.26919556 -227.10279846]
[133.82678223 -212.18388367]
[135.38435364 -197.26496887]
[136.94194031 -182.34605408]
[145.47660828 -194.68135071]
[159.26774597 -200.58088684]
[174.08303833 -198.23416138]
[185.37585449 -188.36135864]
[189.68057251 -173.99230957]
[185.67614746 -159.53671265]
[174.59146118 -149.43078613]
[159.82827759 -146.77590942]
[145.91722107 -152.38684082]
[137.12715149 -164.54241943]
[135.88027954 -149.59432983]
[134.63340759 -134.64624023]
[133.38652039 -119.69815063]
[140.97389221 -110.22507477]
[140.01577759 -97.72303772]
[130.48233032 -88.97276306]
[128.92475891 -74.05384827]
[127.36717224 -59.13493729]
[129.81655884 -52.11025620]
[125.61885071 -43.92300415]
[123.75123596 -29.03972435]
[133.06436157 -17.47247887]
[131.38235474 -2.35211134]
[119.18642426 7.33792877]
[117.31880951 22.22120857]
[115.45119476 37.10448837]
[113.58358002 51.98777008]
[126.84742737 57.94166565]
[137.83189392 67.46637726]
[145.60435486 79.75325012]
[149.50494385 93.75910950]
[149.20248413 108.29482269]
[144.72264099 122.12629700]
[136.44578552 134.07920837]
[125.07463074 143.13874817]
[111.57459259 148.53573608]
[112.82146454 163.48381042]
[126.44253540 165.22328186]
[139.44552612 169.62020874]
[151.31759644 176.49890137]
[161.59092712 185.58586121]
[169.86119080 196.52059937]
[175.80348206 208.86996460]
[179.18502808 222.14529419]
[179.87435913 235.82176208]
[177.84638977 249.35913086]
[173.18331909 262.22308350]
[166.07131958 273.90625000]
[156.79310608 283.94836426]
[145.71669006 291.95425415]
[133.28077698 297.60949707]
[119.97739410 300.69265747]
[120.28945160 315.68939209]
[120.60150909 330.68615723]
[120.91356659 345.68292236]
[121.22562408 360.67965698]
[121.53767395 375.67642212]
[121.84973145 390.67318726]
[122.16178894 405.66992188]
[122.47384644 420.66668701]
[125.06484222 439.87442017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[21 126]
[22 125]
[26 36]
[27 35]
[28 34]
[41 116]
[42 115]
[43 114]
[44 113]
[47 110]
[48 109]
[49 107]
[50 106]
[51 105]
[53 102]
[54 101]
[55 100]
[56 99]
[57 89]
[58 88]
[59 87]
[60 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
