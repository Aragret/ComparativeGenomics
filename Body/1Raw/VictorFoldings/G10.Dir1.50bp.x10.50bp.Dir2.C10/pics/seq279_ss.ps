%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCxxxxxxxxxxCUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-16.91831970 261.00933838]
[-26.18326950 272.80596924]
[-35.44821930 284.60260010]
[-44.71316910 296.39926147]
[-53.97811890 308.19589233]
[-63.11985016 320.08828735]
[-72.13738251 332.07510376]
[-81.15491486 344.06195068]
[-90.17243958 356.04876709]
[-99.18997192 368.03561401]
[-93.10358429 382.13708496]
[-94.89929199 397.39062500]
[-104.09406281 409.69314575]
[-118.21453857 415.73529053]
[-133.46238708 413.89178467]
[-145.73602295 404.65850830]
[-151.73388672 390.51916504]
[-149.84259033 375.27716064]
[-140.57087708 363.03253174]
[-126.41280365 357.07901001]
[-111.17680359 359.01806641]
[-102.15927124 347.03125000]
[-93.14174652 335.04440308]
[-84.12421417 323.05758667]
[-75.10668182 311.07073975]
[-73.58908081 303.78771973]
[-65.77475739 298.93093872]
[-56.50980759 287.13430786]
[-47.24485779 275.33767700]
[-37.97990799 263.54101562]
[-28.71496010 251.74438477]
[-54.90854645 224.88891602]
[-75.59608459 193.59440613]
[-90.04225922 158.97320557]
[-97.73359680 122.25585175]
[-98.39672089 84.74745178]
[-113.29862213 83.03475952]
[-128.20053101 81.32206726]
[-143.02249146 88.33930206]
[-156.35482788 78.79045105]
[-154.48239136 62.49854660]
[-139.33135986 56.22331238]
[-126.48783875 66.42016602]
[-111.58593750 68.13285828]
[-96.68402863 69.84555054]
[-95.12673187 61.01977158]
[-93.17359924 52.27307129]
[-90.82859802 43.62318802]
[-88.09648895 35.08766937]
[-84.98280334 26.68383217]
[-81.49387360 18.42872047]
[-77.63676453 10.33908558]
[-73.41930389 2.43133402]
[-68.85005188 -5.27849150]
[-63.93826675 -12.77475071]
[-58.69392395 -20.04223633]
[-53.12765503 -27.06620789]
[-47.25075531 -33.83241272]
[-41.07514572 -40.32712936]
[-34.61334991 -46.53718185]
[-27.87848282 -52.44997025]
[-20.88420486 -58.05350113]
[-13.64470100 -63.33640671]
[-6.17466021 -68.28797150]
[1.51076436 -72.89814758]
[9.39598274 -77.15759277]
[17.46499825 -81.05764771]
[25.70144463 -84.59042358]
[34.08861160 -87.74873352]
[42.60948181 -90.52618408]
[51.24677658 -92.91713715]
[59.98297119 -94.91674042]
[68.80033875 -96.52094269]
[77.68100739 -97.72648621]
[86.60694122 -98.53092194]
[95.56005096 -98.93261719]
[104.52216339 -98.93076324]
[113.47510529 -98.52536774]
[122.40071106 -97.71723938]
[131.28088379 -96.50803375]
[140.09757996 -94.90018463]
[148.83294678 -92.89697266]
[157.46925354 -90.50244904]
[165.98898315 -87.72148132]
[174.37484741 -84.55970001]
[182.60983276 -81.02352142]
[190.67723083 -77.12012482]
[198.56068420 -72.85742950]
[206.24420166 -68.24407196]
[213.71220398 -63.28942108]
[220.94952393 -58.00352478]
[227.94148254 -52.39710236]
[234.67390442 -46.48153305]
[241.13313293 -40.26881027]
[247.30606079 -33.77154160]
[253.18016052 -27.00290871]
[258.74353027 -19.97663879]
[263.98486328 -12.70698452]
[268.89355469 -5.20869637]
[273.45962524 2.50301671]
[277.67379761 10.41250992]
[281.52755737 18.50374031]
[285.01309204 26.76029015]
[288.12329102 35.16541672]
[290.85189819 43.70206070]
[293.19329834 52.35291290]
[295.14282227 61.10042191]
[296.69647217 69.92684174]
[297.85110474 78.81426239]
[298.60440063 87.74466705]
[298.95480347 96.69992828]
[298.90158081 105.66188049]
[298.44491577 114.61235809]
[297.58566284 123.53318787]
[296.32559204 132.40628052]
[294.66723633 141.21362305]
[292.61401367 149.93737793]
[290.17004395 158.55981445]
[287.34030151 167.06346130]
[284.13052368 175.43107605]
[297.78677368 181.63647461]
[314.04733276 179.50909424]
[323.80383301 192.69024658]
[317.01962280 207.62030029]
[300.67370605 208.94049072]
[291.58135986 195.29272461]
[277.92514038 189.08731079]
[271.32052612 201.20858765]
[263.89141846 212.84280396]
[255.67361450 223.93395996]
[246.70661926 234.42868042]
[237.03358459 244.27645874]
[226.70108032 253.42990112]
[215.75883484 261.84497070]
[204.25949097 269.48114014]
[192.25839233 276.30169678]
[179.81329346 282.27380371]
[166.98410034 287.36871338]
[153.83255005 291.56188965]
[140.42192078 294.83319092]
[126.81677246 297.16683960]
[113.08255768 298.55163574]
[99.28538513 298.98086548]
[85.49165344 298.45254517]
[71.76773834 296.96914673]
[58.17969894 294.53781128]
[44.79291534 291.17028809]
[31.67181778 286.88275146]
[18.87955093 281.69583130]
[6.47767687 275.63449097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[36 45]
[37 44]
[38 43]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
