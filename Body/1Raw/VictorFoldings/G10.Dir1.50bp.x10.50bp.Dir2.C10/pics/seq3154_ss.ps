%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAAxxxxxxxxxxAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCACUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[67.56449127 560.84155273]
[67.56449127 545.84155273]
[67.56449127 530.84155273]
[67.56449127 515.84155273]
[67.56449127 500.84155273]
[67.56449127 485.84155273]
[67.56449127 470.84155273]
[67.56449127 455.84155273]
[67.56449127 440.84155273]
[67.56449127 425.84155273]
[53.92728806 423.31814575]
[40.94503784 418.42886353]
[29.02485657 411.32556152]
[18.54081345 402.22961426]
[9.82216835 391.42498779]
[3.14305329 379.24929810]
[-1.28616333 366.08328247]
[-3.32549334 352.33895874]
[-2.90975618 338.44665527]
[-0.05065994 324.84158325]
[5.16352272 311.95016479]
[12.57068062 300.17669678]
[21.93990326 289.89071655]
[32.97867966 281.41528320]
[45.34202576 275.01693726]
[58.64328003 270.89724731]
[72.46617889 269.18652344]
[73.40180969 254.21572876]
[71.29721832 251.31088257]
[70.53134155 247.22247314]
[71.65380096 242.60809326]
[74.89162445 238.34944153]
[76.75923920 223.46617126]
[78.62684631 208.58288574]
[80.49446106 193.69960022]
[82.36207581 178.81632996]
[84.07476807 163.91442871]
[85.63234711 148.99551392]
[83.65041351 146.00561523]
[83.05527496 141.88888550]
[84.36871338 137.32519531]
[87.78088379 133.20492554]
[90.26600647 118.41221619]
[92.75112152 103.61951447]
[78.01187134 107.77157593]
[62.35869598 108.27421570]
[49.26554108 100.95510864]
[36.17238617 93.63600159]
[19.39652061 91.18516541]
[17.10756111 74.38644409]
[32.61613464 67.53659058]
[43.49149323 80.54285431]
[56.58464813 87.86195374]
[69.67780304 95.18106079]
[76.79119110 92.80415344]
[91.01797485 88.05033875]
[98.13136292 85.67343140]
[104.19437408 71.95337677]
[110.25738525 58.23332596]
[109.67478180 52.91541672]
[111.08870697 48.38185120]
[113.85051727 45.27153015]
[117.15045166 43.86515045]
[124.05744934 30.54999352]
[130.82556152 17.16370964]
[137.45405579 3.70774341]
[144.08256531 -9.74822235]
[150.71105957 -23.20418739]
[138.49964905 -31.97522926]
[127.89855194 -42.63668442]
[119.19698334 -54.89770508]
[112.63233185 -68.42379761]
[108.38367462 -82.84596252]
[106.56693268 -97.77075195]
[107.23165131 -112.79100037]
[110.35971069 -127.49695587]
[115.86577606 -141.48742676]
[123.59962463 -154.38073730]
[133.35028076 -165.82514954]
[144.85173035 -175.50845337]
[157.79022217 -183.16647339]
[171.81277466 -188.59031677]
[186.53683472 -191.63198853]
[201.56072998 -192.20852661]
[216.47459412 -190.30419922]
[230.87156677 -185.97094727]
[244.35890198 -179.32701111]
[256.56863403 -170.55361938]
[267.16766357 -159.89012146]
[275.86685181 -147.62742615]
[282.42892456 -134.10006714]
[286.67477417 -119.67707825]
[288.48864746 -104.75194550]
[287.82104492 -89.73181915]
[284.69015503 -75.02646637]
[279.18139648 -61.03705978]
[271.44506836 -48.14524078]
[261.69219971 -36.70270538]
[250.18887329 -27.02161789]
[237.24891663 -19.36608315]
[223.22532654 -13.94495106]
[208.50067139 -10.90611172]
[193.47666931 -10.33246899]
[178.56315613 -12.23967171]
[164.16702271 -16.57568932]
[157.53852844 -3.11972332]
[150.91003418 10.33624172]
[144.28152466 23.79220772]
[144.14622498 31.23044205]
[137.37260437 37.45699310]
[130.46560669 50.77214813]
[123.97743988 64.29634094]
[117.91442871 78.01638794]
[111.85141754 91.73644257]
[107.54383087 106.10462952]
[105.05870819 120.89733887]
[102.57359314 135.69004822]
[100.55126190 150.55308533]
[98.99367523 165.47200012]
[101.22453308 174.39810181]
[97.24535370 180.68394470]
[95.37773895 195.56721497]
[93.51013184 210.45050049]
[91.64251709 225.33377075]
[89.77490234 240.21705627]
[88.37259674 255.15136719]
[87.43697357 270.12216187]
[103.08585358 274.32800293]
[117.53685760 281.64746094]
[130.17823792 291.76824951]
[140.47535706 304.25961304]
[147.99330139 318.59051514]
[152.41519165 334.15234375]
[153.55563354 350.28469849]
[151.36843872 366.30340576]
[145.94845581 381.52960205]
[137.52754211 395.31838989]
[126.46457672 407.08627319]
[113.23019409 416.33575439]
[98.38676453 422.67648315]
[82.56449127 425.84155273]
[82.56449127 440.84155273]
[82.56449127 455.84155273]
[82.56449127 470.84155273]
[82.56449127 485.84155273]
[82.56449127 500.84155273]
[82.56449127 515.84155273]
[82.56449127 530.84155273]
[82.56449127 545.84155273]
[82.56449127 560.84155273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 127]
[28 126]
[32 125]
[33 124]
[34 123]
[35 122]
[36 121]
[37 119]
[38 118]
[42 117]
[43 116]
[44 115]
[46 54]
[47 53]
[48 52]
[57 114]
[58 113]
[59 112]
[63 111]
[64 110]
[65 108]
[66 107]
[67 106]
[68 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
