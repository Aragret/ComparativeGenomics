%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACAxxxxxxxxxxCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.04709625 264.56536865]
[94.04709625 249.56536865]
[94.04709625 234.56536865]
[94.04709625 219.56536865]
[94.04709625 204.56536865]
[94.04709625 189.56536865]
[94.04709625 174.56536865]
[94.04709625 159.56536865]
[94.04709625 144.56536865]
[94.04709625 129.56536865]
[78.99691772 124.66739655]
[67.56922150 112.16318512]
[52.86125946 115.10867310]
[38.15329742 118.05415344]
[23.44533539 120.99963379]
[8.73737335 123.94511414]
[3.91204071 136.89561462]
[-6.60967016 145.68803406]
[-19.99789810 148.09756470]
[-32.72039413 143.59761047]
[-41.47441483 133.47027588]
[-56.24046707 136.10913086]
[-71.00652313 138.74800110]
[-85.77258301 141.38685608]
[-87.82527161 156.37490845]
[-94.41088867 169.99420166]
[-104.88423157 180.91043091]
[-118.21923065 188.05416870]
[-133.10946655 190.72552490]
[-148.09614563 188.66278076]
[-161.71099854 182.06803894]
[-172.62022400 171.58738708]
[-179.75502014 158.24760437]
[-182.41639709 143.35557556]
[-180.34361267 128.37030029]
[-173.73976135 114.75984955]
[-163.25178528 103.85765839]
[-149.90722656 96.73180389]
[-135.01342773 94.08040619]
[-120.02953339 96.16322327]
[-106.42351532 102.77620697]
[-95.52835083 113.27146912]
[-88.41144562 126.62080383]
[-73.64538574 123.98194122]
[-58.87933350 121.34307861]
[-44.11327744 118.70421600]
[-37.45275879 103.73281860]
[-23.04825211 95.57952881]
[-6.45497036 97.61534119]
[5.79189110 109.23715210]
[20.49985313 106.29167175]
[35.20781326 103.34619141]
[49.91577530 100.40071106]
[64.62374115 97.45522308]
[69.67249298 83.33042145]
[60.16413498 71.72908020]
[50.65577698 60.12773895]
[35.93912506 51.71011353]
[39.95381165 35.23836136]
[56.89321899 34.53631973]
[62.25711823 50.61938095]
[71.76548004 62.22072220]
[81.27383423 73.82206726]
[95.64202118 69.51448059]
[97.19960022 54.59556580]
[98.75717926 39.67665482]
[100.31475830 24.75774384]
[101.87234497 9.83883095]
[87.96250916 3.92208099]
[76.41571808 -5.83307123]
[68.25869751 -18.55920410]
[64.21677399 -33.12472153]
[64.64934540 -48.23446274]
[69.51794434 -62.54487991]
[78.38966370 -74.78350830]
[90.47563934 -83.86209106]
[104.70119476 -88.97336578]
[119.80139160 -89.66284180]
[134.43354797 -85.86920929]
[147.29655457 -77.92980957]
[157.24667358 -66.55059052]
[163.39913940 -52.74339294]
[165.20686340 -37.73594284]
[162.50910950 -22.86269379]
[155.54577637 -9.44616222]
[144.93601990 1.32066166]
[131.62326050 8.48039913]
[116.79125214 11.39641190]
[115.23367310 26.31532478]
[113.67609406 41.23423767]
[112.11851501 56.15314865]
[110.56092834 71.07205963]
[115.55229187 76.66994476]
[118.08121490 61.88466263]
[131.21749878 54.64324951]
[145.06945801 60.39851761]
[149.20651245 74.81672668]
[140.51344299 87.04090118]
[125.53501892 87.86570740]
[130.52638245 93.46359253]
[145.52557373 93.61962891]
[159.40548706 86.02630615]
[172.05157471 93.89557648]
[187.05076599 94.05161285]
[202.04995728 94.20764923]
[192.68682861 82.48878479]
[194.16114807 67.56141663]
[205.63586426 57.90061569]
[220.59614563 58.99134445]
[230.54826355 70.21434021]
[229.84182739 85.19769287]
[218.87651062 95.43510437]
[233.73954773 97.45743561]
[248.60260010 99.47977448]
[263.56732178 92.77240753]
[276.69815063 102.59656525]
[274.48718262 118.84598541]
[259.20889282 124.80465698]
[246.58026123 114.34281921]
[231.71722412 112.32048798]
[216.85417175 110.29814911]
[201.89392090 109.20684052]
[186.89472961 109.05080414]
[171.89553833 108.89476776]
[159.08847046 116.49925232]
[145.36953735 108.61882019]
[130.37034607 108.46278381]
[125.03953552 113.73842621]
[138.12774658 121.06635284]
[151.21597290 128.39428711]
[165.86973572 131.59849548]
[176.00993347 142.65184021]
[177.94183350 157.52691650]
[170.96153259 170.80378723]
[157.61238098 177.64488220]
[142.75833130 175.55754089]
[131.81161499 165.30232239]
[128.76068115 150.61718750]
[121.56929016 137.45346069]
[114.37790680 124.28971863]
[109.04709625 129.56536865]
[109.04709625 144.56536865]
[109.04709625 159.56536865]
[109.04709625 174.56536865]
[109.04709625 189.56536865]
[109.04709625 204.56536865]
[109.04709625 219.56536865]
[109.04709625 234.56536865]
[109.04709625 249.56536865]
[109.04709625 264.56536865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[21 46]
[22 45]
[23 44]
[24 43]
[55 63]
[56 62]
[57 61]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[100 127]
[101 126]
[103 124]
[104 123]
[105 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
