%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCxxxxxxxxxxAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.70566559 294.00375366]
[89.70566559 279.00375366]
[89.70566559 264.00375366]
[89.70566559 249.00375366]
[89.70566559 234.00375366]
[89.70566559 219.00375366]
[89.70566559 204.00375366]
[89.70566559 189.00375366]
[89.70566559 174.00375366]
[89.70566559 159.00375366]
[77.55233765 150.21191406]
[63.30564499 154.90571594]
[49.05895233 159.59951782]
[34.81225967 164.29331970]
[21.05943108 170.28161621]
[7.91779947 177.51332092]
[-5.22383213 184.74502563]
[-9.72524929 199.65725708]
[-23.15575027 206.80403137]
[-37.34455490 202.42071533]
[-50.48618698 209.65242004]
[-63.62781906 216.88412476]
[-66.48117065 232.25918579]
[-78.58267212 242.16310120]
[-94.21835327 241.91957092]
[-106.00553894 231.64355469]
[-108.37866974 216.18708801]
[-100.21722412 202.84825134]
[-85.37479401 197.92520142]
[-70.85951996 203.74249268]
[-57.71788788 196.51078796]
[-44.57625580 189.27908325]
[-40.68623734 174.94718933]
[-27.46177292 167.42601013]
[-12.45553493 171.60339355]
[0.68609703 164.37168884]
[13.82772827 157.13998413]
[-0.85991079 154.09478760]
[-11.67145061 143.69715881]
[-15.28739834 129.13951111]
[-10.59754181 114.89152527]
[0.95818192 105.32777405]
[15.83179188 103.38465118]
[29.45660782 109.65876007]
[37.64937210 122.22373199]
[37.89464188 137.22172546]
[30.11845970 150.04663086]
[44.36515045 145.35282898]
[58.61184311 140.65902710]
[72.85853577 135.96522522]
[59.33758926 103.60669708]
[73.16472626 75.13103485]
[100.40255737 67.65086365]
[104.06126404 53.10390854]
[107.71997070 38.55695343]
[93.65885162 33.28770828]
[80.27612305 26.47722244]
[67.74010468 18.21114159]
[56.20842743 8.59342289]
[45.82612991 -2.25498152]
[36.72377396 -14.19764233]
[29.01583290 -27.08436584]
[22.79924202 -40.75308990]
[18.15218353 -55.03191757]
[15.13309669 -69.74127197]
[13.77995014 -84.69616699]
[14.10976124 -99.70854187]
[16.11838341 -114.58958435]
[19.78055382 -129.15216064]
[25.05021858 -143.21311951]
[31.86110497 -156.59564209]
[40.12755966 -169.13140869]
[49.74562454 -180.66279602]
[60.59434128 -191.04476929]
[72.53726959 -200.14677429]
[85.42422485 -207.85432434]
[99.09313965 -214.07051086]
[113.37210083 -218.71714783]
[128.08154297 -221.73579407]
[143.03648376 -223.08848572]
[158.04884338 -222.75822449]
[172.92982483 -220.74916077]
[187.49229431 -217.08654785]
[201.55310059 -211.81646729]
[214.93540955 -205.00518799]
[227.47094727 -196.73835754]
[239.00204468 -187.11994934]
[249.38369751 -176.27091980]
[258.48532104 -164.32771301]
[266.19250488 -151.44052124]
[272.40826416 -137.77143860]
[277.05447388 -123.49232483]
[280.07269287 -108.78279114]
[281.42492676 -93.82781219]
[281.09423828 -78.81546021]
[279.08471680 -63.93453979]
[275.42166138 -49.37218475]
[270.15118408 -35.31153870]
[263.33947754 -21.92942810]
[255.07228088 -9.39414406]
[245.45352173 2.13666630]
[234.60418701 12.51799202]
[222.66070557 21.61927605]
[209.77330017 29.32605934]
[196.10401917 35.54142380]
[181.82476807 40.18720245]
[167.11514282 43.20497131]
[152.16012573 44.55677414]
[137.14778137 44.22561646]
[122.26692200 42.21566010]
[118.60821533 56.76261520]
[114.94950867 71.30957031]
[122.85918427 74.60663605]
[129.99256897 80.12195587]
[135.72396851 87.65478516]
[139.48481750 96.82837677]
[140.81282043 107.10747528]
[139.39544678 117.82928467]
[135.10423279 128.24621582]
[149.03495789 133.80815125]
[162.72532654 126.25121307]
[178.06024170 129.31297302]
[187.79902649 141.54777527]
[187.34329224 157.17871094]
[176.90824890 168.82534790]
[161.42100525 170.98847961]
[148.19415283 162.64675903]
[143.47300720 147.73887634]
[129.54229736 142.17694092]
[123.33313751 146.38363647]
[132.89195251 157.94343567]
[142.45077515 169.50323486]
[152.00959778 181.06304932]
[165.22113037 188.16624451]
[169.02438354 202.67607117]
[160.99584961 215.34661865]
[146.25146484 218.10397339]
[134.18659973 209.19110107]
[132.48898315 194.28826904]
[125.29759216 181.12452698]
[118.10620880 167.96078491]
[110.91482544 154.79705811]
[104.70566559 159.00375366]
[104.70566559 174.00375366]
[104.70566559 189.00375366]
[104.70566559 204.00375366]
[104.70566559 219.00375366]
[104.70566559 234.00375366]
[104.70566559 249.00375366]
[104.70566559 264.00375366]
[104.70566559 279.00375366]
[104.70566559 294.00375366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 50]
[12 49]
[13 48]
[14 47]
[15 37]
[16 36]
[17 35]
[20 32]
[21 31]
[22 30]
[53 112]
[54 111]
[55 110]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
