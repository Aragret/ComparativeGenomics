%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCxxxxxxxxxxUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[55.17124939 763.24896240]
[55.17124939 748.24896240]
[55.17124939 733.24896240]
[55.17124939 718.24896240]
[55.17124939 703.24896240]
[55.17124939 688.24896240]
[55.17124939 673.24896240]
[55.17124939 658.24896240]
[55.17124939 643.24896240]
[55.17124939 628.24896240]
[41.17122650 624.75225830]
[28.41273880 617.99047852]
[17.64509010 608.35552979]
[9.50190258 596.40826416]
[4.46382618 582.84576416]
[2.83017445 568.46081543]
[4.70114231 554.09515381]
[9.97167587 540.59082031]
[18.33736038 528.74023438]
[29.31199455 519.23999023]
[42.25585556 512.65002441]
[56.41297531 509.36022949]
[56.72503281 494.36346436]
[57.03709030 479.36672974]
[57.34914398 464.36996460]
[54.70236969 460.32397461]
[54.61376190 454.55999756]
[57.99908447 448.75936890]
[58.93471146 433.78857422]
[59.87034225 418.81781006]
[52.08753967 409.50460815]
[52.78536606 396.98535156]
[62.13470459 388.03863525]
[63.38158035 373.09054565]
[64.62845612 358.14245605]
[54.98961639 349.53494263]
[52.04401398 336.75222778]
[57.09159470 324.43353271]
[68.48876190 317.18356323]
[70.04634094 302.26464844]
[71.60391998 287.34573364]
[73.16149902 272.42681885]
[74.71908569 257.50790405]
[76.27666473 242.58898926]
[77.83424377 227.67007446]
[64.14891052 221.64739990]
[52.98005295 211.67610168]
[45.42985535 198.72332764]
[42.24860001 184.05122375]
[43.76013947 169.09402466]
[49.82896042 155.31779480]
[59.87224197 144.07675171]
[72.91579437 136.48016357]
[87.68856049 133.28285217]
[89.24614716 118.36394501]
[90.80372620 103.44503784]
[90.17974854 88.45801544]
[87.38742065 73.72021484]
[84.59510040 58.98240662]
[81.80277252 44.24460220]
[79.01045227 29.50679588]
[63.98738861 27.83378410]
[50.12554932 21.80544853]
[38.65752029 11.95782280]
[30.60303116 -0.83344835]
[26.67828178 -15.43097401]
[27.23225594 -30.53675079]
[32.21569824 -44.80758667]
[41.18548203 -56.97452545]
[53.34402084 -65.95568848]
[67.61018372 -70.95248413]
[82.71543884 -71.52059937]
[97.31662750 -67.60951233]
[110.11543274 -59.56699753]
[119.97378540 -48.10818863]
[126.01509094 -34.25199890]
[127.70216370 -19.23050690]
[124.88497925 -4.37941599]
[117.81405640 8.98072529]
[107.11811829 19.66194344]
[93.74826050 26.71446991]
[96.54058075 41.45227814]
[99.33290863 56.19008255]
[102.12522888 70.92788696]
[104.91755676 85.66569519]
[119.52644348 89.06867218]
[128.54397583 77.08184052]
[137.56150818 65.09500885]
[146.57904053 53.10817337]
[151.26925659 36.81590271]
[168.22320557 36.81268311]
[172.91961670 53.10317230]
[158.56587219 62.12570572]
[149.54833984 74.11253357]
[140.53080750 86.09937286]
[131.51327515 98.08620453]
[125.34910583 103.41983032]
[118.53658295 106.32553864]
[111.77229309 106.79691315]
[105.72264099 105.00261688]
[104.16505432 119.92153168]
[102.60747528 134.84043884]
[116.40125275 141.02018738]
[127.59441376 151.14715576]
[135.09921265 164.22027588]
[138.19161987 178.95295715]
[136.58108521 193.89982605]
[130.43783569 207.59841919]
[120.37500000 218.71234131]
[107.38737488 226.16163635]
[92.75315857 229.22766113]
[91.19557190 244.14657593]
[89.63799286 259.06549072]
[88.08041382 273.98440552]
[86.52283478 288.90332031]
[84.96524811 303.82223511]
[83.40766907 318.74114990]
[94.66693878 332.08901978]
[92.85701752 349.11865234]
[79.57653809 359.38934326]
[78.32966614 374.33743286]
[77.08279419 389.28552246]
[85.32818604 405.71697998]
[74.84113312 419.75341797]
[73.90550232 434.72421265]
[72.96987915 449.69500732]
[72.34590149 464.68203735]
[72.03384399 479.67877197]
[71.72178650 494.67553711]
[71.40972900 509.67227173]
[86.42770386 513.97625732]
[99.81799316 522.00231934]
[110.67749023 533.20233154]
[118.27552032 546.81457520]
[122.10295868 561.91516113]
[121.90638733 577.48089600]
[117.70483398 592.45861816]
[109.78812408 605.83636475]
[98.69686127 616.71197510]
[85.18554688 624.35351562]
[70.17124939 628.24896240]
[70.17124939 643.24896240]
[70.17124939 658.24896240]
[70.17124939 673.24896240]
[70.17124939 688.24896240]
[70.17124939 703.24896240]
[70.17124939 718.24896240]
[70.17124939 733.24896240]
[70.17124939 748.24896240]
[70.17124939 763.24896240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 130]
[23 129]
[24 128]
[25 127]
[28 126]
[29 125]
[30 124]
[33 122]
[34 121]
[35 120]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[45 111]
[54 102]
[55 101]
[56 100]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
