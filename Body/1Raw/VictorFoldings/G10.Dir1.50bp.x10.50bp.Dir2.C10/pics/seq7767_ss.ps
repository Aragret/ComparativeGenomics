%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGxxxxxxxxxxAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[212.88882446 495.62435913]
[212.57678223 480.62762451]
[212.26472473 465.63085938]
[211.95266724 450.63409424]
[211.64060974 435.63735962]
[211.32855225 420.64059448]
[211.01649475 405.64385986]
[210.70443726 390.64709473]
[210.39237976 375.65032959]
[207.14155579 361.00683594]
[201.07853699 347.28677368]
[195.01553345 333.56674194]
[188.95251465 319.84667969]
[182.88949585 306.12661743]
[168.19586182 309.00741577]
[153.22238159 308.54583740]
[138.72010803 304.76181030]
[125.41717529 297.84201050]
[113.98224640 288.13064575]
[104.99090576 276.11227417]
[98.89665222 262.38778687]
[96.00807190 247.64411926]
[96.47319031 232.62014771]
[100.27188873 218.06942749]
[107.21677399 204.72254944]
[116.96239471 193.25035095]
[129.02243042 184.23028564]
[122.95941925 170.51023865]
[116.89640808 156.79017639]
[110.83338928 143.07012939]
[104.77037811 129.35006714]
[94.73637390 129.26564026]
[85.30177307 125.84850311]
[77.54096985 119.48781586]
[72.33773804 110.90791321]
[70.28461456 101.08583832]
[55.64111328 97.83501434]
[40.49208069 102.39762878]
[29.74413490 92.08593750]
[15.10063362 88.83511353]
[0.84981650 96.20354462]
[-13.73689651 89.52466583]
[-17.46982765 73.92195129]
[-7.48539114 61.36445999]
[8.55720711 61.48522949]
[18.35145950 74.19161224]
[32.99496078 77.44243622]
[47.09659195 72.64730072]
[58.89193726 83.19151306]
[73.53543854 86.44233704]
[78.18830109 79.79027557]
[84.46681213 74.64446259]
[91.90302277 71.38842773]
[91.59096527 56.39167404]
[91.27890778 41.39492035]
[77.83449554 36.59402847]
[66.86615753 27.50321007]
[59.68397903 15.23487949]
[57.13669968 1.27934074]
[59.51146698 -12.67623234]
[66.50162506 -24.95177269]
[77.24613953 -34.07657623]
[90.43562317 -38.96548843]
[90.43562317 -53.96548843]
[90.43562317 -68.96549225]
[90.43562317 -83.96549225]
[87.28995514 -92.61167908]
[90.59490204 -99.27673340]
[90.90695953 -114.27349091]
[77.10861969 -120.71752167]
[67.12912750 -132.22099304]
[62.69750977 -146.79084778]
[64.58155823 -161.90277100]
[72.45484924 -174.93853760]
[84.95329285 -183.63960266]
[99.91146088 -186.49848938]
[114.73775482 -183.01985168]
[126.86342621 -173.80638123]
[134.18763733 -160.45439148]
[135.44142151 -145.27717590]
[130.40754700 -130.90428162]
[119.95817566 -119.82589722]
[105.90371704 -113.96143341]
[105.59165955 -98.96467590]
[105.43562317 -83.96549225]
[105.43562317 -68.96549225]
[105.43562317 -53.96548843]
[105.43562317 -38.96548843]
[120.14289856 -33.14476776]
[131.52725220 -22.10849762]
[137.83221436 -7.51840496]
[138.06936646 8.41241455]
[132.17306519 23.25517845]
[121.01506042 34.73570633]
[106.27565765 41.08286285]
[106.58771515 56.07961655]
[106.89977264 71.07637024]
[124.68871307 83.42740631]
[129.38209534 104.56899261]
[118.49043274 123.28705597]
[124.55344391 137.00711060]
[130.61645508 150.72715759]
[136.67947388 164.44721985]
[142.74249268 178.16726685]
[157.53144836 175.32252502]
[172.57540894 175.83998108]
[187.11996460 179.69049072]
[200.43652344 186.67782593]
[211.85871887 196.44869995]
[220.81576538 208.51063538]
[226.86103821 222.25679016]
[229.69429016 236.99645996]
[229.17660522 251.98980713]
[225.33712769 266.48498535]
[218.37155151 279.75582886]
[208.63206482 291.13830566]
[196.60955811 300.06359863]
[202.67257690 313.78366089]
[208.73558044 327.50372314]
[214.79859924 341.22378540]
[220.86160278 354.94381714]
[222.85884094 340.07739258]
[229.07348633 326.42535400]
[238.97351074 315.15637207]
[251.71144104 307.23519897]
[266.19680786 303.33987427]
[281.18963623 303.80386353]
[295.40643311 308.58746338]
[307.63015747 317.28115845]
[316.81442261 329.14074707]
[322.17294312 343.15093994]
[323.24707031 358.11245728]
[319.94482422 372.74444580]
[312.54888916 385.79434204]
[301.69241333 396.14505005]
[288.30474854 402.91043091]
[273.53198242 405.51138306]
[258.63870239 403.72521973]
[244.89987183 397.70486450]
[233.49162292 387.96566772]
[225.38912964 375.33828735]
[225.70118713 390.33505249]
[226.01324463 405.33178711]
[226.32530212 420.32855225]
[226.63735962 435.32528687]
[226.94941711 450.32205200]
[227.26147461 465.31881714]
[227.57353210 480.31555176]
[227.88558960 495.31231689]
[230.47657776 514.52001953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[27 104]
[28 103]
[29 102]
[30 101]
[31 100]
[36 50]
[37 49]
[39 47]
[40 46]
[53 97]
[54 96]
[55 95]
[63 88]
[64 87]
[65 86]
[66 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
