%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAxxxxxxxxxxCCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-42.38054276 212.25622559]
[-54.53387451 221.04806519]
[-66.68721008 229.83990479]
[-78.84053802 238.63175964]
[-90.99387360 247.42359924]
[-103.14720917 256.21542358]
[-114.83341217 265.61929321]
[-126.02171326 275.61038208]
[-137.21000671 285.60150146]
[-148.39830017 295.59259033]
[-159.58660889 305.58367920]
[-170.77490234 315.57476807]
[-181.96319580 325.56588745]
[-187.10295105 340.52896118]
[-201.74964905 343.23510742]
[-212.93795776 353.22619629]
[-211.24543762 368.65069580]
[-218.97166443 382.10745239]
[-233.14575195 388.42211914]
[-248.31747437 385.16656494]
[-258.65298462 373.59259033]
[-260.17807007 358.15063477]
[-252.30630493 344.77844238]
[-238.06454468 338.61791992]
[-222.92904663 342.03790283]
[-211.74075317 332.04678345]
[-207.40126038 317.79837036]
[-191.95428467 314.37759399]
[-180.76599121 304.38647461]
[-169.57769775 294.39538574]
[-158.38940430 284.40429688]
[-147.20111084 274.41320801]
[-136.01280212 264.42208862]
[-124.82450867 254.43099976]
[-139.33909607 250.64593506]
[-145.62126160 237.02484131]
[-139.07743835 223.52748108]
[-124.49250793 220.02320862]
[-112.53103638 229.07435608]
[-111.93904877 244.06210327]
[-99.78571320 235.27026367]
[-87.63238525 226.47842407]
[-75.47904968 217.68658447]
[-63.32571793 208.89472961]
[-51.17238235 200.10289001]
[-62.32386398 180.77525330]
[-71.01674652 160.22416687]
[-77.11936951 138.76091003]
[-80.53929138 116.71057892]
[-81.22471619 94.40713501]
[-79.16526794 72.18840790]
[-74.39213562 50.39091873]
[-66.97761536 29.34482193]
[-57.03400803 9.36888790]
[-44.71192551 -9.23432350]
[-30.19799614 -26.18304443]
[-13.71205425 -41.22056198]
[-22.62820435 -53.28299332]
[-31.54435539 -65.34542847]
[-45.82153320 -74.48864746]
[-40.98794556 -90.73896790]
[-24.03462601 -90.59281158]
[-19.48192406 -74.26157379]
[-10.56577301 -62.19914627]
[-1.64962256 -50.13671494]
[7.18236589 -55.75161362]
[16.32361221 -60.84756851]
[25.74365807 -65.40760040]
[35.41111755 -69.41651154]
[45.29377747 -72.86094666]
[55.35871124 -75.72943115]
[65.57238770 -78.01241302]
[75.90077209 -79.70227051]
[86.30944824 -80.79338074]
[96.76374817 -81.28211212]
[107.22882080 -81.16683960]
[117.66981506 -80.44792938]
[128.05192566 -79.12779999]
[138.34059143 -77.21083069]
[148.50149536 -74.70341492]
[158.50079346 -71.61391449]
[168.30519104 -67.95261383]
[177.88198853 -63.73171616]
[187.19929504 -58.96528244]
[196.22607422 -53.66919708]
[204.93222046 -47.86110687]
[213.28875732 -41.56035614]
[221.26783752 -34.78794861]
[228.84286499 -27.56644058]
[235.98858643 -19.91989708]
[242.68122864 -11.87379456]
[248.89846802 -3.45494246]
[254.61959839 5.30860901]
[259.82556152 14.38766098]
[264.49899292 23.75196266]
[268.62432861 33.37031174]
[272.18783569 43.21066666]
[286.61520386 39.10572052]
[301.04260254 35.00077820]
[315.47000122 30.89583206]
[329.89736938 26.79088593]
[344.19149780 22.24359703]
[358.33880615 17.25827408]
[372.48614502 12.27295303]
[382.73901367 -0.52589965]
[398.90646362 2.22105336]
[404.35678101 17.68798256]
[393.48318481 29.96383667]
[377.47146606 26.42026901]
[363.32412720 31.40559196]
[349.17681885 36.39091492]
[347.32492065 39.45972824]
[343.86364746 41.75956726]
[339.18258667 42.52979279]
[334.00231934 41.21827316]
[319.57492065 45.32321548]
[305.14755249 49.42816162]
[290.72015381 53.53310776]
[276.29278564 57.63805008]
[279.04113770 71.40026855]
[280.71685791 85.33383179]
[281.30984497 99.35527039]
[280.81658936 113.38056183]
[279.24002075 127.32569122]
[276.58959961 141.10711670]
[272.88119507 154.64224243]
[268.13702393 167.85002136]
[262.38549805 180.65127563]
[255.66110229 192.96934509]
[248.00411987 204.73040771]
[239.46040344 215.86402893]
[230.08117676 226.30346680]
[219.92259216 235.98622131]
[209.04553223 244.85423279]
[197.51516724 252.85441589]
[185.40055847 259.93881226]
[172.77430725 266.06497192]
[159.71205139 271.19622803]
[146.29205322 275.30181885]
[132.59471130 278.35711670]
[118.70207977 280.34387207]
[104.69740295 281.25015259]
[90.66458893 281.07049561]
[76.68769836 279.80606079]
[62.85048294 277.46432495]
[49.23583221 274.05941772]
[35.92531967 269.61166382]
[22.99869156 264.14773560]
[10.53339195 257.70037842]
[-1.39589739 250.30818176]
[-12.71770477 242.01548767]
[-23.36420059 232.87194824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[15 26]
[16 25]
[57 65]
[58 64]
[59 63]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
