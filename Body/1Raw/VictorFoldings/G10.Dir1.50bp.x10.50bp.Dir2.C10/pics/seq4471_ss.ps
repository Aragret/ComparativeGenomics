%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGxxxxxxxxxxACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[32.49750137 352.25094604]
[16.62897873 347.45989990]
[11.43356323 361.53140259]
[6.23814821 375.60293579]
[1.04273248 389.67443848]
[-4.15268326 403.74597168]
[-0.84791529 419.80865479]
[-13.28431129 430.49829102]
[-28.66837311 424.81826782]
[-31.17429543 408.61172485]
[-18.22420311 398.55053711]
[-13.02878666 384.47903442]
[-7.83337116 370.40750122]
[-2.63795590 356.33599854]
[2.55745983 342.26446533]
[-11.48036194 336.13397217]
[-25.13456154 329.19088745]
[-38.35815048 321.45913696]
[-51.10562515 312.96527100]
[-63.33312225 303.73858643]
[-74.99855804 293.81079102]
[-86.06179810 283.21606445]
[-96.48476410 271.99087524]
[-106.23159790 260.17379761]
[-115.26875305 247.80557251]
[-123.56512451 234.92871094]
[-131.09217834 221.58752441]
[-137.82400513 207.82794189]
[-143.73742676 193.69731140]
[-148.81211853 179.24424744]
[-153.03060913 164.51849365]
[-156.37835693 149.57072449]
[-158.84388733 134.45236206]
[-160.41868591 119.21544647]
[-161.09733582 103.91241455]
[-160.87750244 88.59591675]
[-159.75994873 73.31865692]
[-157.74850464 58.13321686]
[-154.85011292 43.09184647]
[-151.07475281 28.24630356]
[-146.43537903 13.64768124]
[-140.94799805 -0.65378934]
[-134.63146973 -14.60889339]
[-127.50752258 -28.16960716]
[-119.60069275 -41.28926849]
[-110.93817902 -53.92272949]
[-101.54978943 -66.02651978]
[-112.84879303 -75.89224243]
[-124.14779663 -85.75796509]
[-135.44680786 -95.62368774]
[-146.74580383 -105.48941040]
[-158.04481506 -115.35513306]
[-174.08393860 -115.71012115]
[-183.69161987 -128.55815125]
[-179.49766541 -144.04331970]
[-164.71932983 -150.28672791]
[-150.69326782 -142.49896240]
[-148.17909241 -126.65413666]
[-136.88008118 -116.78841400]
[-125.58107758 -106.92269135]
[-114.28207397 -97.05696869]
[-102.98307037 -87.19124603]
[-91.68406677 -77.32552338]
[-81.99665070 -87.25474548]
[-71.79561615 -96.65550995]
[-61.10973740 -105.50127411]
[-49.96918488 -113.76708221]
[-38.40539169 -121.42960358]
[-26.45099640 -128.46720886]
[-14.13973427 -134.86004639]
[-1.50635087 -140.59007263]
[11.41349983 -145.64111328]
[24.58335686 -149.99890137]
[37.96605301 -153.65115356]
[51.52381897 -156.58757019]
[65.21839142 -158.79985046]
[79.01112366 -160.28175354]
[92.86309052 -161.02909851]
[106.73519897 -161.03976440]
[120.58830261 -160.31373596]
[134.38330078 -158.85307312]
[148.08126831 -156.66186523]
[161.64352417 -153.74632263]
[175.03182983 -150.11466980]
[188.20837402 -145.77714539]
[201.13598633 -140.74600220]
[213.77816772 -135.03541565]
[226.09925842 -128.66154480]
[238.06446838 -121.64233398]
[249.64004517 -113.99761963]
[260.79330444 -105.74896240]
[271.49276733 -96.91965485]
[281.70828247 -87.53459930]
[291.41094971 -77.62029266]
[300.57345581 -67.20471191]
[309.16989136 -56.31725311]
[317.17599487 -44.98863983]
[324.56921387 -33.25084305]
[331.32867432 -21.13698959]
[337.43527222 -8.68126869]
[342.87176514 4.08116913]
[347.62286377 17.11430740]
[351.67510986 30.38136101]
[355.01712036 43.84489059]
[357.63940430 57.46689987]
[359.53457642 71.20894623]
[360.69729614 85.03224182]
[361.12429810 98.89778137]
[360.81439209 112.76643372]
[359.76837158 126.59905243]
[357.98928833 140.35661316]
[355.48208618 154.00027466]
[352.25387573 167.49153137]
[348.31375122 180.79232788]
[362.43856812 185.84107971]
[376.56335449 190.88983154]
[390.68817139 195.93859863]
[404.81295776 200.98735046]
[418.93777466 206.03610229]
[434.96524048 202.56442261]
[445.78366089 214.88894653]
[440.26397705 230.33126831]
[424.08435059 233.00564575]
[413.88900757 220.16090393]
[399.76422119 215.11215210]
[385.63940430 210.06340027]
[371.51461792 205.01463318]
[357.38980103 199.96588135]
[343.26501465 194.91712952]
[336.75268555 210.16027832]
[329.28634644 224.95954895]
[320.89611816 239.25527954]
[311.61575317 252.98986816]
[301.48266602 266.10797119]
[290.53768921 278.55673218]
[278.82495117 290.28601074]
[266.39160156 301.24850464]
[253.28778076 311.40005493]
[239.56626892 320.69973755]
[225.28236389 329.11013794]
[210.49363708 336.59729004]
[195.25967407 343.13107300]
[179.64184570 348.68515015]
[163.70309448 353.23712158]
[147.50765991 356.76864624]
[131.12077332 359.26553345]
[114.60849762 360.71768188]
[98.03734589 361.11926270]
[81.47411346 360.46862793]
[64.98551941 358.76843262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[114 129]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
