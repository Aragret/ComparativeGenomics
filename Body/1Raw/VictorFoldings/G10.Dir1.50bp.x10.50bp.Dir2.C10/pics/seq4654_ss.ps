%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCxxxxxxxxxxCCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.51967621 487.61846924]
[87.51967621 472.61846924]
[87.51967621 457.61846924]
[87.51967621 442.61846924]
[87.51967621 427.61846924]
[87.51967621 412.61846924]
[87.51967621 397.61846924]
[87.51967621 382.61846924]
[87.51967621 367.61846924]
[87.51967621 352.61846924]
[72.06099701 349.47482300]
[57.57579803 343.21350098]
[44.68567276 334.10076904]
[33.94427490 322.52529907]
[25.81353569 308.98159790]
[20.64378548 294.04885864]
[18.65867615 278.36624146]
[19.94549751 262.60546875]
[24.45133972 247.44213867]
[31.98527336 233.52661133]
[42.22642899 221.45628357]
[54.73767090 211.74981689]
[68.98424530 204.82492065]
[84.35665894 200.98036194]
[83.73268127 185.99334717]
[83.10870361 171.00633240]
[75.87788391 184.14845276]
[65.54527283 195.02214050]
[52.78899384 202.91374207]
[38.44626236 207.30534363]
[23.45840263 207.90869141]
[8.80907822 204.68420410]
[-4.54026365 197.84352112]
[-15.71349335 187.83557129]
[-23.97730255 175.31721497]
[-28.78933144 161.11001587]
[-29.83376312 146.14642334]
[-27.04204750 131.40849304]
[-20.59741211 117.86351013]
[-10.92281818 106.40042877]
[1.34677804 97.77158356]
[15.40611458 92.54328918]
[30.33246613 91.05868530]
[45.14620209 93.41521454]
[58.87508774 99.45820618]
[70.61808014 108.79105377]
[79.60447693 120.80124664]
[85.24449921 134.70053101]
[87.16799164 149.58154297]
[93.23100281 135.86148071]
[99.29401398 122.14143372]
[81.04920197 104.55408478]
[91.87984467 85.26083374]
[91.25586700 70.27381897]
[90.63188934 55.28680420]
[90.00791168 40.29978943]
[76.93075562 28.72717476]
[76.25013733 11.61516571]
[87.89951324 -0.47408336]
[86.96389008 -15.44487476]
[86.02825928 -30.41566658]
[83.40348053 -34.05874252]
[82.23431396 -37.95798492]
[82.41746521 -41.61152267]
[83.69341278 -44.60584259]
[85.69023895 -46.66010666]
[86.00229645 -61.65686035]
[86.31435394 -76.65361023]
[86.62641144 -91.65036774]
[72.82806396 -98.09439850]
[62.84857941 -109.59786987]
[58.41695786 -124.16771698]
[60.30100632 -139.27964783]
[68.17430115 -152.31541443]
[80.67274475 -161.01647949]
[95.63091278 -163.87536621]
[110.45719910 -160.39672852]
[122.58287811 -151.18325806]
[129.90708923 -137.83126831]
[131.16087341 -122.65404510]
[126.12699890 -108.28115082]
[115.67762756 -97.20277405]
[101.62316132 -91.33831024]
[101.31111145 -76.34155273]
[100.99905396 -61.34480286]
[100.68699646 -46.34804916]
[100.99905396 -31.35129547]
[101.93467712 -16.38050270]
[102.87030792 -1.40971184]
[113.65625000 5.70788622]
[118.42572784 17.92780495]
[115.21930695 30.84859276]
[104.99492645 39.67581177]
[105.61890411 54.66282654]
[106.24288177 69.64984131]
[106.86685944 84.63686371]
[117.27030182 90.96621704]
[121.76821136 104.10932159]
[136.47616577 101.16384125]
[151.18412781 98.21836090]
[165.89208984 95.27287292]
[180.60005188 92.32739258]
[184.34327698 77.53039551]
[194.14256287 65.82839966]
[208.05226135 59.54484177]
[223.31057739 59.92732239]
[236.88798523 66.89990997]
[246.08866882 79.07817841]
[249.08581543 94.04413605]
[245.28434753 108.82627106]
[235.43905640 120.48959351]
[221.50473022 126.71833038]
[206.24801636 126.27575684]
[192.69818115 119.24976349]
[183.54553223 107.03535461]
[168.83757019 109.98083496]
[154.12960815 112.92631531]
[139.42164612 115.87180328]
[124.71369171 118.81728363]
[113.01406860 128.20445251]
[106.95105743 141.92449951]
[100.88803864 155.64454651]
[98.09571838 170.38235474]
[98.71969604 185.36936951]
[99.34367371 200.35638428]
[113.44810486 202.50886536]
[126.90406036 207.23995972]
[139.24461365 214.38378906]
[150.04183960 223.69082642]
[158.92172241 234.83654785]
[165.57698059 247.43273926]
[169.77786255 261.04107666]
[171.37992859 275.18838501]
[170.32911682 289.38293457]
[166.66349792 303.13180542]
[160.51199341 315.95776367]
[152.08969116 327.41589355]
[141.69050598 337.10913086]
[129.67674255 344.70190430]
[116.46664429 349.93173218]
[102.51967621 352.61846924]
[102.51967621 367.61846924]
[102.51967621 382.61846924]
[102.51967621 397.61846924]
[102.51967621 412.61846924]
[102.51967621 427.61846924]
[102.51967621 442.61846924]
[102.51967621 457.61846924]
[102.51967621 472.61846924]
[102.51967621 487.61846924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 125]
[25 124]
[26 123]
[49 122]
[50 121]
[51 120]
[53 96]
[54 95]
[55 94]
[56 93]
[59 89]
[60 88]
[61 87]
[66 86]
[67 85]
[68 84]
[69 83]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
