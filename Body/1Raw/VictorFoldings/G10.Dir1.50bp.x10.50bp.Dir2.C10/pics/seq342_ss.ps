%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAAGAACCCUAACACCAGCxxxxxxxxxxACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.74978638 403.52172852]
[97.63925934 392.77230835]
[104.33924866 377.19839478]
[104.96322632 362.21136475]
[105.58720398 347.22436523]
[106.21118164 332.23733521]
[106.83515930 317.25033569]
[107.45912933 302.26330566]
[108.08310699 287.27630615]
[108.70708466 272.28927612]
[109.33106232 257.30227661]
[109.95503998 242.31524658]
[109.01941681 227.34445190]
[106.53429413 212.55175781]
[96.79533386 201.28224182]
[102.13937378 186.39089966]
[99.65425110 171.59819031]
[97.16913605 156.80548096]
[82.92837524 149.74696350]
[72.26900482 139.56228638]
[65.72459412 127.64090729]
[63.35422134 115.40163422]
[64.77338409 104.14348602]
[69.22878265 94.91734314]
[75.70758057 88.43033600]
[83.06875610 84.99171448]
[90.18209839 84.50418854]
[96.06007385 86.50024414]
[89.15307617 73.18508911]
[82.24607086 59.86993408]
[75.33907318 46.55477905]
[65.19304657 47.59413147]
[54.71859741 43.27730179]
[46.77178574 33.67438889]
[34.16065598 25.55284691]
[21.54952812 17.43130493]
[11.09263706 28.25441170]
[-1.27498472 36.82926941]
[-15.07795906 42.82627869]
[-29.78573608 46.01493454]
[-44.83298874 46.27267075]
[-59.64133835 43.58958435]
[-73.64159393 38.06879807]
[-86.29562378 29.92252731]
[-97.11704254 19.46388435]
[-105.68989563 7.09487438]
[-111.68466949 -6.70907021]
[-114.87094879 -21.41736412]
[-115.12625122 -36.46465683]
[-112.44076538 -51.27257538]
[-106.91771698 -65.27193451]
[-98.76939392 -77.92464447]
[-88.30899811 -88.74436951]
[-75.93859863 -97.31522369]
[-62.13368607 -103.30776215]
[-47.42487717 -106.49166107]
[-32.37754440 -106.74452209]
[-17.57006073 -104.05664062]
[-3.57159233 -98.53132629]
[9.07979965 -90.38095856]
[19.89782906 -79.91881561]
[28.46667862 -67.54702759]
[34.45698547 -53.74114609]
[37.63850021 -39.03182220]
[37.88892746 -23.98444557]
[35.19865036 -9.17739868]
[29.67107010 4.82017612]
[42.28219986 12.94171810]
[54.89332581 21.06326103]
[47.71969604 7.88983965]
[40.54606247 -5.28358126]
[29.38952637 -15.31013012]
[24.25331306 -29.40336609]
[26.34231758 -44.25719070]
[35.16648102 -56.38707733]
[48.65576553 -62.94750214]
[63.64575195 -62.39947128]
[76.61997223 -54.87154770]
[84.53482819 -42.12968826]
[85.53359985 -27.16297722]
[79.38171387 -13.48206997]
[78.14491272 1.46685362]
[76.90811157 16.41577721]
[85.16040039 3.88981557]
[93.41269684 -8.63614655]
[101.66498566 -21.16210747]
[109.91727448 -33.68806839]
[110.34274292 -50.08169556]
[124.87997437 -57.67121887]
[138.57431030 -48.64918518]
[137.33819580 -32.29669189]
[122.44322968 -25.43578148]
[114.19094086 -12.90981865]
[105.93865204 -0.38385716]
[97.68636322 12.14210510]
[89.43407440 24.66806602]
[88.65422821 39.64778137]
[95.56123352 52.96293640]
[102.46823120 66.27809143]
[109.37522888 79.59324646]
[123.15760803 85.51321411]
[137.56982422 81.35532379]
[151.98204041 77.19743347]
[166.39425659 73.03955078]
[177.37094116 60.85576630]
[193.35221863 64.53414154]
[197.89794922 80.29067993]
[186.33184814 91.91640472]
[170.55213928 87.45176697]
[156.13992310 91.60964966]
[141.72770691 95.76753998]
[127.31549835 99.92543030]
[127.31549835 107.42543030]
[140.30589294 114.92539978]
[127.31549835 122.42543030]
[127.31549835 129.92543030]
[141.72770691 134.08331299]
[156.13992310 138.24119568]
[173.03439331 136.82228088]
[179.07472229 152.66371155]
[165.52450562 162.85331726]
[151.98204041 152.65341187]
[137.56982422 148.49552917]
[123.15760803 144.33764648]
[111.96184540 154.32037354]
[114.44696045 169.11308289]
[116.93208313 183.90577698]
[126.84879303 196.23336792]
[121.32700348 210.06663513]
[123.81211853 224.85934448]
[131.09628296 211.74670410]
[143.88954163 203.91520691]
[158.88041687 203.39198303]
[172.18855286 210.31250000]
[180.36918640 222.88536072]
[181.30479431 237.85615540]
[174.75317383 251.34973145]
[162.41021729 259.87329102]
[147.47084045 261.22058105]
[133.80207825 255.04283142]
[124.94206238 242.93922424]
[124.31808472 257.92623901]
[123.69410706 272.91326904]
[123.07012939 287.90026855]
[122.44615173 302.88729858]
[121.82217407 317.87429810]
[121.19819641 332.86132812]
[120.57421875 347.84832764]
[119.95024109 362.83535767]
[119.32626343 377.82235718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[13 130]
[14 129]
[16 127]
[17 126]
[18 125]
[28 100]
[29 99]
[30 98]
[31 97]
[34 69]
[35 68]
[36 67]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[101 112]
[102 111]
[103 110]
[104 109]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
