%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUACUACCGCAUUCCUACUACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCxxxxxxxxxxUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.86488342 277.96670532]
[95.86488342 262.96670532]
[95.86488342 247.96670532]
[95.86488342 232.96670532]
[95.86488342 217.96670532]
[95.86488342 202.96670532]
[95.86488342 187.96670532]
[95.86488342 172.96670532]
[95.86488342 157.96670532]
[95.86488342 142.96670532]
[78.26930237 134.99893188]
[66.66978455 120.68595123]
[62.91177368 103.56236267]
[67.02131653 87.43812561]
[77.35626221 75.55464935]
[69.90135193 62.53833771]
[62.44644165 49.52202988]
[54.32489777 36.91090012]
[45.55869293 24.73906326]
[36.79248428 12.56722736]
[23.29935074 11.94034672]
[12.79698277 3.75937986]
[9.00010872 -8.79681683]
[13.08635616 -21.05648041]
[4.57526636 -33.40805435]
[-3.93582368 -45.75962448]
[-12.44691372 -58.11119843]
[-20.95800400 -70.46276855]
[-31.58805466 -70.50516510]
[-40.86022568 -75.28986359]
[-46.82517624 -83.61030579]
[-61.78542328 -82.51898956]
[-70.79159546 -69.73529816]
[-85.92108154 -65.78147125]
[-100.03019714 -72.52438354]
[-106.45704651 -86.78024292]
[-102.16707611 -101.81787109]
[-89.18587494 -110.53694916]
[-73.64276886 -108.82061005]
[-62.87673569 -97.47924042]
[-47.91648483 -98.57054901]
[-46.22483063 -102.74999237]
[-43.70525742 -106.48913574]
[-40.46675491 -109.62625885]
[-45.07231903 -123.90171814]
[-49.67788315 -138.17718506]
[-54.28344727 -152.45263672]
[-65.88418579 -163.21058655]
[-62.42837143 -177.69874573]
[-67.03393555 -191.97419739]
[-80.97096252 -203.96331787]
[-76.69788361 -220.95568848]
[-81.59943390 -235.13224792]
[-86.50098419 -249.30880737]
[-101.47647095 -247.67097473]
[-116.44088745 -249.40708923]
[-130.64361572 -254.43005371]
[-143.37225342 -262.48794556]
[-153.98834229 -273.17654419]
[-161.95939636 -285.95974731]
[-166.88555908 -300.19635010]
[-168.51976013 -315.17221069]
[-166.78002930 -330.13619995]
[-161.75361633 -344.33773804]
[-153.69265747 -357.06442261]
[-143.00148010 -367.67791748]
[-130.21633911 -375.64587402]
[-115.97856140 -380.56857300]
[-101.00228119 -382.19915771]
[-86.03871155 -380.45578003]
[-71.83841705 -375.42593384]
[-59.11367798 -367.36190796]
[-48.50276566 -356.66815186]
[-40.53791809 -343.88107300]
[-35.61864853 -329.64212036]
[-33.99170303 -314.66543579]
[-35.73869324 -299.70227051]
[-40.77198410 -285.50320435]
[-48.83911133 -272.78042603]
[-59.53543472 -262.17211914]
[-72.32442474 -254.21035767]
[-67.42287445 -240.03379822]
[-62.52132416 -225.85723877]
[-51.75235748 -220.25932312]
[-47.57538986 -208.43681335]
[-52.75847244 -196.57975769]
[-48.15290833 -182.30430603]
[-36.88159180 -172.56742859]
[-40.00798798 -157.05819702]
[-35.40242004 -142.78274536]
[-30.79685783 -128.50727844]
[-26.19129372 -114.23181915]
[-6.97134447 -102.22668457]
[-8.60643196 -78.97386169]
[-0.09534138 -66.62229156]
[8.41574860 -54.27071762]
[16.92683983 -41.91914368]
[25.43792915 -29.56757164]
[42.06658173 -27.25546265]
[52.10077286 -13.37745571]
[48.96432114 3.80101967]
[57.73052979 15.97285652]
[66.49673462 28.14469337]
[71.79503632 14.11158943]
[86.00305939 9.30201817]
[98.73590088 17.23138809]
[100.68686676 32.10396957]
[90.42997742 43.04911041]
[75.46275330 42.06711960]
[82.91766357 55.08342743]
[90.37257385 68.09973907]
[108.68299103 65.28715515]
[126.98589325 72.90180969]
[139.44630432 89.95875549]
[141.37571716 112.29986572]
[155.27827454 117.93182373]
[169.18083191 123.56377411]
[183.08338928 129.19573975]
[196.17846680 120.87114716]
[211.66354370 121.86711121]
[223.58430481 131.80064392]
[227.35696411 146.85211182]
[221.53086853 161.23391724]
[208.34625244 169.41595459]
[192.87289429 168.25205994]
[181.06059265 158.18980408]
[177.45143127 143.09829712]
[163.54887390 137.46633911]
[149.64631653 131.83438110]
[135.74375916 126.20242310]
[129.52404785 130.39349365]
[139.02458191 142.00123596]
[148.52511597 153.60899353]
[160.95025635 162.01231384]
[160.93748474 177.01229858]
[148.49806213 185.39445496]
[134.59069824 179.77435303]
[131.46737671 165.10311890]
[124.27598572 151.93937683]
[117.08460236 138.77563477]
[110.86488342 142.96670532]
[110.86488342 157.96670532]
[110.86488342 172.96670532]
[110.86488342 187.96670532]
[110.86488342 202.96670532]
[110.86488342 217.96670532]
[110.86488342 232.96670532]
[110.86488342 247.96670532]
[110.86488342 262.96670532]
[110.86488342 277.96670532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 111]
[16 110]
[17 109]
[18 103]
[19 102]
[20 101]
[24 98]
[25 97]
[26 96]
[27 95]
[28 94]
[31 41]
[32 40]
[44 92]
[45 91]
[46 90]
[47 89]
[49 87]
[50 86]
[52 83]
[53 82]
[54 81]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
