%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGCACAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAxxxxxxxxxxAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.67671204 371.43869019]
[150.05273438 356.45166016]
[149.42875671 341.46466064]
[148.80477905 326.47763062]
[148.18080139 311.49063110]
[147.55682373 296.50360107]
[146.93284607 281.51657104]
[146.30886841 266.52957153]
[143.82374573 251.73686218]
[139.51617432 237.36868286]
[135.20858765 223.00048828]
[130.90100098 208.63230896]
[126.59341431 194.26412964]
[122.28582764 179.89593506]
[111.75904846 173.85488892]
[108.07749939 161.86885071]
[113.74932861 150.23768616]
[109.74159241 135.78298950]
[105.73384857 121.32830811]
[88.15722656 118.25749969]
[78.82619476 103.35867310]
[64.18269348 100.10784912]
[49.36493301 97.77674103]
[34.43062592 96.37443542]
[19.49631691 94.97213745]
[4.56200933 93.56983185]
[-10.37229824 92.16752625]
[-25.30660629 90.76522064]
[-33.84911728 105.59740448]
[-47.95175171 115.19956207]
[-64.77375031 117.69551086]
[-80.95172882 112.63468933]
[-93.27217102 101.07262421]
[-99.30970764 85.35115051]
[-114.28942108 84.57130432]
[-129.26913452 83.79145813]
[-142.10224915 93.41905975]
[-157.59390259 89.24913025]
[-163.86021423 74.48049164]
[-156.09422302 60.44236755]
[-140.25331116 57.90361786]
[-128.48928833 68.81174469]
[-113.50957489 69.59159088]
[-98.52986145 70.37143707]
[-93.20803833 58.44630814]
[-84.11382294 49.03016281]
[-72.32338715 43.26873398]
[-59.24272919 41.87341690]
[-46.44004440 45.03347778]
[-35.45772171 52.39075089]
[-27.62651253 63.08005142]
[-23.90430260 75.83091736]
[-8.96999454 77.23322296]
[5.96431255 78.63552094]
[20.89862061 80.03782654]
[35.83292770 81.44013214]
[50.76723480 82.84243774]
[42.41064453 70.38581085]
[45.12069702 55.63265610]
[57.35874557 46.95912933]
[72.17659760 49.28965759]
[81.16134644 61.30107880]
[79.21187592 76.17385864]
[67.43351746 85.46434784]
[82.07701874 88.71517181]
[94.15700531 79.82282257]
[95.40387726 64.87473297]
[96.65075684 49.92664719]
[82.69454193 44.08889389]
[71.22668457 34.22261429]
[63.37068558 21.29441261]
[59.89619064 6.57085800]
[61.14360046 -8.50558567]
[66.99070740 -22.45788193]
[76.86466217 -33.91912460]
[89.79812622 -41.76646423]
[104.52400970 -45.23109055]
[119.59960938 -43.97357941]
[133.54798889 -38.11712646]
[145.00260925 -28.23549080]
[152.84127808 -15.29677105]
[156.29603577 -0.56857300]
[155.02842712 14.50618553]
[149.16262817 28.45063210]
[139.27331543 39.89863586]
[126.32935333 47.72863007]
[111.59883881 51.17352295]
[110.35196686 66.12160492]
[109.10509491 81.06969452]
[121.18508148 89.96204376]
[135.08763123 84.33008575]
[148.99018860 78.69812775]
[146.97236633 63.75225449]
[148.73564148 48.77421570]
[154.16915894 34.70554352]
[162.93139648 22.43060493]
[174.47152710 12.72101498]
[188.06414795 6.18712711]
[202.85479736 3.23966599]
[217.91372681 4.06391191]
[232.29432678 8.60805225]
[245.09260559 16.58643913]
[255.50407410 27.49754143]
[262.87423706 40.65548325]
[266.73983765 55.23313904]
[266.85781860 70.31414795]
[263.22082520 84.95050812]
[256.05743408 98.22216034]
[245.81797791 109.29484558]
[233.14610291 117.47251892]
[218.83836365 122.24111938]
[203.79417419 123.30090332]
[188.95922852 120.58523560]
[175.26603699 114.26483917]
[163.57537842 104.73701477]
[154.62214661 92.60068512]
[140.71958923 98.23264313]
[126.81703949 103.86460114]
[120.18853760 117.32056427]
[124.19628143 131.77525330]
[128.20402527 146.22994995]
[141.63026428 158.78845215]
[136.65400696 175.58834839]
[140.96159363 189.95654297]
[145.26918030 204.32472229]
[149.57676697 218.69290161]
[153.88435364 233.06109619]
[158.19194031 247.42927551]
[163.05975342 233.24110413]
[173.51557922 222.48583984]
[187.56069946 217.21948242]
[202.51025391 218.44874573]
[215.50646973 225.93862915]
[224.06500244 238.25737000]
[226.54980469 253.05012512]
[222.48587036 267.48913574]
[212.65007019 278.81417847]
[198.92262268 284.86044312]
[183.92765808 284.47204590]
[170.53160095 277.72329712]
[161.29588318 265.90557861]
[161.91986084 280.89260864]
[162.54383850 295.87960815]
[163.16781616 310.86663818]
[163.79179382 325.85366821]
[164.41577148 340.84066772]
[165.03974915 355.82769775]
[165.66372681 370.81469727]
[172.36372375 386.38861084]
[159.25318909 397.13803101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[14 123]
[17 121]
[18 120]
[19 119]
[21 65]
[22 64]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[34 44]
[35 43]
[36 42]
[66 89]
[67 88]
[68 87]
[90 118]
[91 117]
[92 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
