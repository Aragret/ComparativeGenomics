%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUxxxxxxxxxxCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.82469940 263.97180176]
[110.82469940 248.97180176]
[110.82469940 233.97180176]
[110.82469940 218.97180176]
[110.82469940 203.97180176]
[110.82469940 188.97180176]
[110.82469940 173.97180176]
[110.82469940 158.97180176]
[110.82469940 143.97180176]
[110.82469940 128.97180176]
[105.12418365 124.09797668]
[90.98197174 129.09774780]
[93.72316742 114.35031891]
[88.02265167 109.47649384]
[73.20489502 111.80760193]
[60.77481842 121.59554291]
[46.99974823 115.93014526]
[32.18198776 118.26125336]
[17.50546265 121.35957336]
[3.00986695 125.21673584]
[-11.48572922 129.07389832]
[-25.98132706 132.93104553]
[-40.47692108 136.78820801]
[-54.97251892 140.64537048]
[-69.38473511 144.80325317]
[-83.70733643 149.26007080]
[-98.02993011 153.71688843]
[-112.35252380 158.17370605]
[-123.07336426 170.58320618]
[-139.12771606 167.23809814]
[-144.00024414 151.57954407]
[-132.67851257 139.71571350]
[-116.80934143 143.85110474]
[-102.48674774 139.39428711]
[-88.16414642 134.93748474]
[-73.84155273 130.48066711]
[-70.84293365 126.68806458]
[-65.40415955 124.77729797]
[-58.82967758 126.14977264]
[-44.33408356 122.29261780]
[-29.83848572 118.43545532]
[-15.34288883 114.57830048]
[-0.84729248 110.72113800]
[13.64830399 106.86397552]
[2.42183352 96.91579437]
[2.98703194 81.92644501]
[14.93078518 72.85193634]
[29.52317619 76.32498932]
[36.09834671 89.80709839]
[29.85088539 103.44349670]
[44.66864395 101.11238861]
[56.03885651 91.49118805]
[70.87379456 96.98984528]
[85.69155121 94.65873718]
[98.70786285 87.20382690]
[108.21621704 75.60248566]
[117.60337830 63.90286255]
[126.86833191 52.10622406]
[128.20198059 45.52375412]
[132.10412598 41.28057861]
[136.77230835 40.02217865]
[146.51995850 28.62115860]
[156.26760864 17.22013664]
[166.01525879 5.81911659]
[155.72419739 -5.11437798]
[146.67561340 -17.09645653]
[138.97557068 -29.98663330]
[132.71437073 -43.63378143]
[127.96542358 -57.87789154]
[124.78439331 -72.55195618]
[123.20858765 -87.48394012]
[123.25646973 -102.49876404]
[124.92749786 -117.42039490]
[128.20207214 -132.07386780]
[133.04177856 -146.28739929]
[139.38990784 -159.89433289]
[147.17201233 -172.73512268]
[156.29684448 -184.65924072]
[166.65744019 -195.52687073]
[178.13232422 -205.21058655]
[190.58694458 -213.59686279]
[203.87527466 -220.58738708]
[217.84153748 -226.10017395]
[232.32197571 -230.07058716]
[247.14680481 -232.45210266]
[262.14221191 -233.21678162]
[277.13241577 -232.35566711]
[291.94161987 -229.87882996]
[306.39620972 -225.81535339]
[320.32672119 -220.21282959]
[333.56982422 -213.13699341]
[345.97024536 -204.67076111]
[357.38256836 -194.91342163]
[367.67306519 -183.97938538]
[376.72100830 -171.99681091]
[384.42034912 -159.10623169]
[390.68081665 -145.45874023]
[395.42898560 -131.21437073]
[398.60922241 -116.54013062]
[400.18423462 -101.60807037]
[400.13552856 -86.59324646]
[398.46371460 -71.67170715]
[395.18835449 -57.01840973]
[390.34786987 -42.80514145]
[383.99902344 -29.19855118]
[376.21621704 -16.35817146]
[367.09072876 -4.43454885]
[356.72955322 6.43252087]
[345.25418091 16.11562538]
[332.79910278 24.50123405]
[319.51037598 31.49103355]
[305.54382324 37.00306702]
[291.06317139 40.97271347]
[276.23822021 43.35342789]
[261.24276733 44.11730194]
[246.25262451 43.25537109]
[231.44354248 40.77774811]
[216.98916626 36.71348190]
[203.05895996 31.11021805]
[189.81623840 24.03365898]
[177.41629028 15.56676865]
[167.66864014 26.96778870]
[157.92097473 38.36880875]
[148.17332458 49.76983261]
[138.66497803 61.37117386]
[129.40002441 73.16781616]
[127.73123169 80.41769409]
[119.81755829 85.11084747]
[110.30920410 96.71218872]
[124.21555328 91.08959961]
[136.31790161 82.22770691]
[151.07427979 79.53530121]
[165.52644348 83.55215454]
[176.77709961 93.47298431]
[182.57077026 107.30892944]
[181.74600220 122.28623199]
[174.46812439 135.40234375]
[162.19616699 144.02783203]
[147.39031982 146.43350220]
[133.01608276 142.13554382]
[125.82469940 128.97180176]
[125.82469940 143.97180176]
[125.82469940 158.97180176]
[125.82469940 173.97180176]
[125.82469940 188.97180176]
[125.82469940 203.97180176]
[125.82469940 218.97180176]
[125.82469940 233.97180176]
[125.82469940 248.97180176]
[125.82469940 263.97180176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 54]
[15 53]
[17 51]
[18 50]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 36]
[26 35]
[27 34]
[28 33]
[55 129]
[56 128]
[57 126]
[58 125]
[61 124]
[62 123]
[63 122]
[64 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
