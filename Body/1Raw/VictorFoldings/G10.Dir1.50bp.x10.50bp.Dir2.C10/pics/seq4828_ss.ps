%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAAxxxxxxxxxxUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.99759674 478.63452148]
[102.99759674 463.63452148]
[102.99759674 448.63452148]
[102.99759674 433.63452148]
[102.99759674 418.63452148]
[102.99759674 403.63452148]
[102.99759674 388.63452148]
[102.99759674 373.63452148]
[102.99759674 358.63452148]
[102.99759674 343.63452148]
[87.53891754 340.49084473]
[73.05371094 334.22952271]
[60.16358566 325.11682129]
[49.42219162 313.54135132]
[41.29145050 299.99761963]
[36.12170029 285.06488037]
[34.13658905 269.38226318]
[35.42341232 253.62152100]
[39.92925262 238.45817566]
[47.46318817 224.54264832]
[57.70434189 212.47232056]
[70.21558380 202.76585388]
[84.46215820 195.84097290]
[99.83457184 191.99641418]
[98.89894104 177.02561951]
[97.65206909 162.07752991]
[96.40518951 147.12944031]
[95.15831757 132.18135071]
[83.92088318 128.29388428]
[74.83009338 120.62903595]
[69.09959412 110.21012115]
[67.49445343 98.42810822]
[53.08223343 94.27022552]
[38.67001724 90.11233521]
[30.57518005 102.86577606]
[19.21427155 112.82099915]
[5.50827026 119.17097473]
[-9.43174076 121.40093994]
[-24.39464188 119.33012390]
[-38.16745758 113.12639618]
[-49.63368607 103.29266357]
[-57.86381149 90.62609863]
[-62.19065475 76.15354156]
[-62.26346207 61.04819489]
[-58.07632446 46.53459549]
[-49.96867752 33.78929138]
[-38.59777451 23.84548950]
[-24.88540077 17.50928688]
[-9.94315720 15.29433060]
[5.01765585 17.38018036]
[18.78423119 23.59774208]
[30.24057388 33.44298935]
[38.45797348 46.11780930]
[42.77027512 60.59471130]
[42.82790375 75.70011902]
[57.24011993 79.85800934]
[71.65233612 84.01589203]
[76.27021790 77.72940826]
[82.25138855 72.72238159]
[89.25222778 69.28246307]
[87.69464874 54.36355209]
[86.13706970 39.44464111]
[71.25405884 36.91508484]
[57.60591125 30.46290207]
[46.20541000 20.56688690]
[37.89854431 7.96139097]
[33.30173874 -6.41817665]
[32.75610733 -21.50475502]
[36.30214310 -36.17882156]
[43.67670441 -49.35146332]
[54.33254623 -60.04517746]
[67.47894287 -67.46642303]
[82.14033508 -71.06449890]
[97.22875214 -70.57240295]
[111.62454224 -66.02664185]
[124.25942993 -57.76454926]
[134.19583130 -46.39922714]
[140.69639587 -32.77405930]
[143.27873230 -17.90011787]
[141.75122070 -2.88115311]
[136.22721863 11.16832924]
[127.11663818 23.20576477]
[115.09554291 32.33789825]
[101.05597687 37.88705826]
[102.61356354 52.80596924]
[104.17114258 67.72488403]
[115.87930298 71.59349823]
[125.30775452 79.54029846]
[138.83193970 73.05213165]
[152.35612488 66.56397247]
[165.88032532 60.07580566]
[179.40451050 53.58763885]
[192.92869568 47.09947586]
[206.45289612 40.61130905]
[204.94131470 25.52850723]
[208.68252563 10.83908367]
[217.22476196 -1.68313968]
[229.53649902 -10.52604485]
[244.13102722 -14.62180710]
[259.24600220 -13.47584438]
[273.05621338 -7.22653580]
[283.89401245 3.37148285]
[290.45068359 17.03845024]
[291.93444824 32.12401199]
[288.16616821 46.80651474]
[279.60089111 59.31297684]
[267.27288818 68.13317871]
[252.67082214 72.20203400]
[237.55796814 71.02822113]
[223.75930786 64.75347137]
[212.94105530 54.13549805]
[199.41687012 60.62366486]
[185.89266968 67.11183167]
[172.36848450 73.59999084]
[158.84429932 80.08815765]
[145.32009888 86.57632446]
[131.79591370 93.06449127]
[128.23977661 116.17394257]
[110.10640717 130.93447876]
[111.35327911 145.88256836]
[112.60015106 160.83065796]
[113.84703064 175.77874756]
[117.35229492 181.50767517]
[117.38361359 187.27224731]
[114.82158661 191.37243652]
[128.92602539 193.52490234]
[142.38197327 198.25599670]
[154.72251892 205.39982605]
[165.51976013 214.70687866]
[174.39962769 225.85258484]
[181.05490112 238.44877625]
[185.25576782 252.05712891]
[186.85783386 266.20440674]
[185.80702209 280.39898682]
[182.14141846 294.14785767]
[175.98989868 306.97381592]
[167.56761169 318.43194580]
[157.16841125 328.12518311]
[145.15466309 335.71792603]
[131.94454956 340.94778442]
[117.99759674 343.63452148]
[117.99759674 358.63452148]
[117.99759674 373.63452148]
[117.99759674 388.63452148]
[117.99759674 403.63452148]
[117.99759674 418.63452148]
[117.99759674 433.63452148]
[117.99759674 448.63452148]
[117.99759674 463.63452148]
[117.99759674 478.63452148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 125]
[25 122]
[26 121]
[27 120]
[28 119]
[32 57]
[33 56]
[34 55]
[60 86]
[61 85]
[62 84]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
