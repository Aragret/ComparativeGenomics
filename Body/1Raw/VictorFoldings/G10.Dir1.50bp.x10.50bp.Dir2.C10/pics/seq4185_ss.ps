%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCUxxxxxxxxxxCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.33110809 259.00918579]
[115.33110809 244.00920105]
[115.33110809 229.00920105]
[115.33110809 214.00920105]
[115.33110809 199.00920105]
[115.33110809 184.00920105]
[115.33110809 169.00920105]
[115.33110809 154.00920105]
[115.33110809 139.00920105]
[115.33110809 124.00919342]
[92.91966248 124.77706909]
[79.20196533 109.93971252]
[64.30006409 111.65239716]
[49.39815903 113.36508942]
[34.49625778 115.07778168]
[21.66977692 124.34017181]
[8.14229870 118.10666656]
[-6.75960350 119.81935120]
[-21.66150665 121.53204346]
[-36.56340790 123.24473572]
[-51.46530914 124.95742035]
[-52.99621201 139.93975830]
[-57.71250916 154.24258423]
[-65.39361572 167.19691467]
[-75.68026733 178.19685364]
[-88.09134674 186.72792053]
[-102.04635620 192.39111328]
[-116.89260864 194.92153931]
[-131.93569946 194.20085144]
[-146.47204590 190.26274109]
[-159.82176208 183.29142761]
[-171.36044312 173.61296082]
[-180.54841614 161.68000793]
[-186.95594788 148.05072021]
[-190.28332520 133.36253357]
[-190.37493896 118.30246735]
[-187.22650146 103.57489777]
[-180.98526001 89.86865234]
[-171.94313049 77.82481384]
[-160.52305603 68.00668335]
[-147.25914001 60.87347031]
[-132.77177429 56.75881195]
[-117.73856354 55.85516357]
[-102.86263275 58.20478058]
[-88.83975220 63.69777679]
[-76.32580566 72.07722473]
[-65.90608978 82.95121002]
[-58.06795502 95.81114197]
[-53.17800140 110.05551910]
[-38.27609634 108.34283447]
[-23.37419510 106.63014221]
[-8.47229290 104.91744995]
[6.42960930 103.20476532]
[18.19020653 94.06487274]
[32.78356934 100.17587280]
[47.68547058 98.46318817]
[62.58737183 96.75049591]
[77.48927307 95.03780365]
[81.10574341 85.27085114]
[88.88507843 77.75981903]
[99.52902985 74.23544312]
[111.04486084 75.71926880]
[121.11782074 82.25935364]
[127.57598877 92.85513306]
[137.78947449 81.86946869]
[148.00294495 70.88380432]
[133.56628418 74.95601654]
[118.56650543 74.87586975]
[104.17418671 70.64962006]
[91.51252747 62.60708618]
[81.56964874 51.37591553]
[75.12150574 37.83259964]
[72.67131042 23.03406715]
[74.41029358 8.13521004]
[80.20272064 -5.70125341]
[89.59656525 -17.39551353]
[101.85871887 -26.03493881]
[116.03222656 -30.94530106]
[131.01098633 -31.74339485]
[145.62602234 -28.36693192]
[158.73678589 -21.07941818]
[169.32009888 -10.44957352]
[176.55001831 2.69303727]
[179.86231995 17.32275391]
[178.99851990 32.29786301]
[174.02601624 46.44968796]
[165.33102417 58.67578506]
[179.11340332 52.75582123]
[184.63592529 41.05302048]
[196.28869629 36.42354584]
[207.58833313 40.85361862]
[221.49089050 35.22166443]
[235.39344788 29.58970642]
[248.84941101 22.96120644]
[261.78747559 15.37129879]
[274.72552490 7.78139067]
[276.10635376 -7.67412329]
[286.33334351 -19.34410095]
[301.47399902 -22.74119568]
[315.70642090 -16.55915642]
[323.55795288 -3.17510462]
[322.00955200 12.26452065]
[311.65655518 23.82286835]
[296.47994995 27.05551529]
[282.31542969 20.71944618]
[269.37738037 28.30935478]
[256.43930054 35.89926147]
[270.84991455 40.06277847]
[279.35757446 52.41670227]
[278.10827637 67.36458588]
[267.66796875 78.13489532]
[252.76615906 79.84857178]
[240.15357971 71.72930145]
[235.54380798 57.45519638]
[241.02539062 43.49226379]
[227.12284851 49.12421799]
[213.22029114 54.75617599]
[203.23097229 69.15108490]
[185.03335571 66.53820038]
[171.25097656 72.45816803]
[158.98861694 81.09728241]
[148.77513123 92.08294678]
[138.56166077 103.06861115]
[149.09410095 92.38836670]
[162.46566772 85.59122467]
[177.30122375 83.37621307]
[192.07507324 85.97112274]
[205.26785278 93.10908508]
[215.52281189 104.05603790]
[221.78532410 117.68618774]
[223.41136169 132.59779358]
[220.23368835 147.25733948]
[212.57910156 160.15724182]
[201.23480225 169.97084045]
[187.36744690 175.68891907]
[172.40315247 176.72341919]
[157.88087463 172.96797180]
[145.29409790 164.80874634]
[135.93722534 153.08488464]
[130.77255249 139.00205994]
[130.33110046 124.00919342]
[130.33110046 139.00920105]
[130.33110046 154.00920105]
[130.33110046 169.00920105]
[130.33110046 184.00920105]
[130.33110046 199.00920105]
[130.33110046 214.00920105]
[130.33110046 229.00920105]
[130.33110046 244.00920105]
[130.33110046 259.00918579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 58]
[13 57]
[14 56]
[15 55]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[64 123]
[65 122]
[66 121]
[87 120]
[88 119]
[91 117]
[92 116]
[93 115]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
