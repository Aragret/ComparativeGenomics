%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGxxxxxxxxxxCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.97813416 412.92291260]
[88.97813416 397.92291260]
[88.97813416 382.92291260]
[88.97813416 367.92291260]
[88.97813416 352.92291260]
[88.97813416 337.92291260]
[88.97813416 322.92291260]
[88.97813416 307.92291260]
[88.97813416 292.92291260]
[88.97813416 277.92291260]
[72.83166504 272.53363037]
[59.46034241 261.96035767]
[50.46772766 247.44984436]
[46.93948364 230.72232056]
[49.31230164 213.76750183]
[57.31994629 198.60791016]
[70.02299500 187.05766296]
[85.91902924 180.50534058]
[84.98339844 165.53454590]
[84.04776764 150.56376648]
[83.11214447 135.59297180]
[71.03215027 126.70062256]
[56.45944977 130.25538635]
[41.88674927 133.81015015]
[27.31404495 137.36489868]
[12.74134254 140.91966248]
[5.35627747 151.54580688]
[-6.90243864 154.18072510]
[-17.31196976 147.93981934]
[-31.95547104 151.19064331]
[-43.67073822 162.66603088]
[-59.39147186 157.99798584]
[-62.94552231 141.98858643]
[-50.67679214 131.10693359]
[-35.20629501 136.54713440]
[-20.56279564 133.29631042]
[-8.32665157 120.75531006]
[9.18658066 126.34696198]
[23.75928307 122.79220581]
[38.33198547 119.23744202]
[52.90468979 115.68267822]
[67.47739410 112.12791443]
[68.01448059 92.63453674]
[78.66134644 77.60292816]
[94.85862732 71.41146851]
[96.10549927 56.46337891]
[97.35237885 41.51529312]
[98.44368744 26.55504417]
[99.37931824 11.58425331]
[96.74255371 5.40727997]
[97.54813385 -0.30081490]
[100.67807007 -3.98578596]
[102.23564911 -18.90469742]
[101.61167145 -33.89171600]
[98.81935120 -48.62952042]
[96.02702332 -63.36732483]
[93.23470306 -78.10513306]
[90.44237518 -92.84294128]
[75.38787842 -93.52027893]
[60.89554596 -97.65175629]
[47.74693680 -105.01454926]
[36.65113449 -115.21160889]
[28.20652580 -127.69300842]
[22.86851501 -141.78564453]
[20.92497444 -156.72950745]
[22.48071861 -171.71871948]
[27.45184708 -185.94491577]
[35.57027054 -198.64089966]
[46.39817810 -209.12197876]
[59.35163116 -216.82293701]
[73.73206329 -221.32847595]
[88.76396179 -222.39559937]
[103.63667297 -219.96678162]
[117.54812622 -214.17297363]
[129.74810791 -205.32666016]
[139.57867432 -193.90489197]
[146.50967407 -180.52363586]
[150.16732788 -165.90454102]
[150.35440063 -150.83596802]
[147.06079102 -136.13056946]
[140.46411133 -122.58137512]
[130.92012024 -110.91908264]
[118.94351959 -101.77262878]
[105.18018341 -95.63526154]
[107.97250366 -80.89745331]
[110.76483154 -66.15965271]
[113.55715179 -51.42184448]
[116.34947968 -36.68404007]
[122.20416260 -50.49427414]
[132.82292175 -61.08870316]
[146.64656067 -66.91169739]
[161.64526367 -67.10823059]
[175.61672974 -61.64944839]
[186.50944519 -51.33689499]
[192.72398376 -37.68480682]
[193.34782410 -22.69778442]
[188.28939819 -8.57644653]
[178.29141235 2.60570478]
[164.82196045 9.20674133]
[149.85879517 10.25740051]
[135.59906006 5.60340977]
[124.13654327 -4.07186365]
[117.15456390 -17.34711647]
[115.59698486 -2.42820501]
[114.35010529 12.51988220]
[113.41448212 27.49067307]
[116.15396118 34.40738297]
[112.30046082 42.76216888]
[111.05358887 57.71025467]
[109.80671692 72.65834045]
[122.84393311 82.05863190]
[128.88682556 96.95218658]
[143.70458984 99.28328705]
[158.52233887 101.61438751]
[172.28579712 93.37141418]
[187.26071167 99.12743378]
[191.95959473 114.46692657]
[182.77787781 127.62274170]
[166.75898743 128.50286865]
[156.19123840 116.43215179]
[141.37347412 114.10104370]
[126.55572510 111.76994324]
[123.86085510 118.47917175]
[119.44593048 124.54228973]
[113.47476959 129.51461792]
[106.22641754 132.99534607]
[98.08293152 134.65733337]
[99.01856232 149.62812805]
[99.95419312 164.59892273]
[100.88981628 179.56971741]
[113.65866852 182.48352051]
[125.21492004 188.61799622]
[134.76319885 197.54292297]
[141.64842224 208.63632202]
[145.40074158 221.12776184]
[145.76757812 234.15187073]
[142.73066711 246.80833435]
[136.50675964 258.22406006]
[127.53221893 267.61349487]
[116.43241119 274.33255005]
[103.97813416 277.92291260]
[103.97813416 292.92291260]
[103.97813416 307.92291260]
[103.97813416 322.92291260]
[103.97813416 337.92291260]
[103.97813416 352.92291260]
[103.97813416 367.92291260]
[103.97813416 382.92291260]
[103.97813416 397.92291260]
[103.97813416 412.92291260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[20 128]
[21 127]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[29 36]
[30 35]
[45 110]
[46 109]
[47 108]
[48 106]
[49 105]
[52 104]
[53 103]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
