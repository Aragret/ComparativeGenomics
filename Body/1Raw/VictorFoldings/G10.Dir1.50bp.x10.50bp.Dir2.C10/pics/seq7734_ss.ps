%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCxxxxxxxxxxUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 296.59024048]
[92.50000000 281.59024048]
[92.50000000 266.59024048]
[92.50000000 251.59024048]
[92.50000000 236.59024048]
[92.50000000 221.59024048]
[92.50000000 206.59024048]
[92.50000000 191.59024048]
[92.50000000 176.59024048]
[92.50000000 161.59024048]
[85.88373566 160.97488403]
[79.31475830 159.64488220]
[72.87064362 157.60350037]
[66.62879944 154.86247253]
[60.66550827 151.44197083]
[55.05503082 147.37054443]
[49.86867142 142.68484497]
[37.60630417 151.32395935]
[25.34393501 159.96307373]
[13.08156681 168.60218811]
[0.81919843 177.24130249]
[-8.64681816 191.30654907]
[-24.78283310 186.10411072]
[-24.25060463 169.15850830]
[-7.81991768 164.97894287]
[4.44245052 156.33982849]
[16.70481873 147.70069885]
[28.96718597 139.06158447]
[41.22955322 130.42247009]
[35.88804245 116.40576172]
[20.98613930 118.11844635]
[6.08423758 119.83113861]
[-4.97648287 131.45181274]
[-20.94489861 129.90608215]
[-29.57140541 116.37970734]
[-24.23848915 101.24895477]
[-9.03710365 96.12084961]
[4.37154818 104.92923737]
[19.27345085 103.21654510]
[34.17535400 101.50386047]
[45.38479996 66.74412537]
[72.78587341 44.24160385]
[67.88432312 30.06504440]
[62.98277283 15.88848686]
[58.08122253 1.71192896]
[53.17967224 -12.46462917]
[39.40858841 -14.26676655]
[27.73352051 -21.64809799]
[20.28185654 -33.18829346]
[18.37963295 -46.71635818]
[22.31595230 -59.71895981]
[11.22463608 -69.81761169]
[0.13332064 -79.91625977]
[-15.99501228 -82.88423920]
[-21.23313713 -98.42432404]
[-10.19252110 -110.55019379]
[5.76919699 -106.78780365]
[10.23196983 -91.00757599]
[21.32328606 -80.90892792]
[32.41460037 -70.81027222]
[36.06369019 -72.92251587]
[39.96225739 -74.52830505]
[38.71538544 -89.47638702]
[23.91538429 -92.49907684]
[10.56712246 -99.57019043]
[-0.24731539 -110.11650085]
[-7.65125179 -123.28305817]
[-11.04448223 -138.00253296]
[-10.15193367 -153.08164978]
[-5.04596043 -167.29803467]
[3.85951900 -179.49923706]
[15.84257698 -188.69613647]
[29.93180084 -194.14318848]
[44.98504257 -195.39883423]
[59.78199768 -192.36128235]
[73.12314606 -185.27676392]
[83.92698669 -174.71960449]
[91.31769562 -161.54560852]
[94.69613647 -146.82273865]
[93.78843689 -131.74452209]
[88.66818237 -117.53326416]
[79.75045013 -105.34102631]
[67.75816345 -96.15616608]
[53.66347122 -90.72326660]
[54.91034698 -75.77517700]
[71.86174011 -67.62229156]
[81.24065399 -51.16618347]
[79.59372711 -32.16519165]
[67.35623169 -17.36618042]
[72.25778198 -3.18962193]
[77.15933228 10.98693657]
[82.06088257 25.16349411]
[86.96243286 39.34005356]
[98.96306610 37.96346283]
[111.00299835 38.93821716]
[122.62588501 42.22737122]
[133.39118958 47.70625687]
[142.89089966 55.16721344]
[150.76490784 64.32745361]
[156.71481323 74.83976746]
[160.51507568 86.30572510]
[162.02165222 98.29072571]
[176.95596313 99.69303131]
[191.89027405 101.09533691]
[206.35334778 94.68205261]
[218.30154419 103.57530212]
[233.23583984 104.97760773]
[239.70680237 91.26985168]
[250.47802734 80.60417938]
[264.24884033 74.26852417]
[279.35635376 73.02793884]
[293.97625732 77.03224182]
[306.34310913 85.79788208]
[314.96359253 98.26637268]
[318.79669189 112.93208313]
[317.37957764 128.02404785]
[310.88339233 141.71986389]
[300.09252930 152.36566162]
[286.31005859 158.67593384]
[271.20028687 159.88867188]
[256.58779907 155.85743713]
[244.23710632 147.06901550]
[235.63961792 134.58465576]
[231.83354187 119.91191101]
[216.89923096 118.50961304]
[203.50436401 125.02319336]
[190.48796082 116.02964020]
[175.55366516 114.62733459]
[160.61935425 113.22503662]
[158.94021606 119.38191223]
[156.63752747 125.33374023]
[153.73564148 131.01754761]
[150.26525879 136.37321472]
[146.26310730 141.34407043]
[141.77151489 145.87753296]
[136.83801270 149.92562866]
[131.51477051 153.44554138]
[125.85813141 156.40003967]
[119.92792511 158.75785828]
[113.78688812 160.49403381]
[107.50000000 161.59024048]
[107.50000000 176.59024048]
[107.50000000 191.59024048]
[107.50000000 206.59024048]
[107.50000000 221.59024048]
[107.50000000 236.59024048]
[107.50000000 251.59024048]
[107.50000000 266.59024048]
[107.50000000 281.59024048]
[107.50000000 296.59024048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[30 40]
[31 39]
[32 38]
[42 93]
[43 92]
[44 91]
[45 90]
[46 89]
[51 60]
[52 59]
[53 58]
[62 85]
[63 84]
[102 129]
[103 128]
[104 127]
[106 125]
[107 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
