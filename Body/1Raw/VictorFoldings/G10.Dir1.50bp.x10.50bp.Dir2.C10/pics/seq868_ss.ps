%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUxxxxxxxxxxAACGCUUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.58297729 446.71151733]
[147.58297729 431.71151733]
[147.58297729 416.71151733]
[147.58297729 401.71151733]
[147.58297729 386.71151733]
[147.58297729 371.71151733]
[147.58297729 356.71151733]
[147.58297729 341.71151733]
[147.58297729 326.71151733]
[147.58297729 311.71151733]
[145.71536255 296.82821655]
[142.00920105 282.29330444]
[126.31534576 279.44671631]
[113.37783813 270.01928711]
[105.80563354 255.84962463]
[105.15288544 239.73873901]
[111.60021210 224.89645386]
[123.90863800 214.30178833]
[119.90089417 199.84710693]
[115.89315796 185.39241028]
[111.88541412 170.93772888]
[107.87767792 156.48303223]
[87.75206757 155.69900513]
[69.15409088 147.96792603]
[54.40336609 134.25402832]
[45.33968353 116.26779938]
[43.09351349 96.25257111]
[28.38555145 93.30709076]
[13.67758942 90.36160278]
[-1.03037202 87.41612244]
[-15.73833370 84.47064209]
[-30.44629478 81.52515411]
[-40.75520706 90.25350189]
[-54.01731491 91.41299438]
[-65.34755707 84.80239868]
[-70.70246887 73.04137421]
[-85.34597015 69.79055023]
[-99.98947144 66.53972626]
[-110.87194824 77.47476959]
[-125.94369507 80.76808929]
[-140.39538574 75.36878967]
[-149.61550903 62.99977493]
[-150.66200256 47.60794449]
[-143.20088196 34.10477829]
[-129.61300659 26.79909134]
[-114.23419952 28.02209854]
[-101.97177887 37.38354492]
[-96.73864746 51.89622116]
[-82.09514618 55.14704895]
[-67.45164490 58.39787292]
[-53.69887924 48.76878357]
[-36.90054703 52.10045624]
[-27.50081253 66.81719208]
[-12.79285145 69.76268005]
[1.91511047 72.70816040]
[16.62307167 75.65364075]
[31.33103371 78.59912872]
[46.03899384 81.54460907]
[52.44426346 68.52233124]
[61.92898178 57.53838348]
[73.87896729 49.30401230]
[87.52040863 44.35243607]
[101.96996307 43.00429153]
[104.45508575 28.21158409]
[106.94020081 13.41887665]
[109.42531586 -1.37383008]
[104.08128357 -16.26516533]
[113.82024384 -27.53467751]
[116.30535889 -42.32738495]
[118.79048157 -57.12009048]
[105.36782837 -64.09774780]
[94.75979614 -74.88314819]
[88.00563812 -88.41963959]
[85.76706696 -103.38105011]
[88.26338959 -118.30162811]
[95.25003815 -131.71960449]
[106.04254150 -142.32040405]
[119.58355713 -149.06549072]
[134.54646301 -151.29403687]
[149.46536255 -148.78771973]
[162.87864685 -141.79208374]
[173.47222900 -130.99247742]
[180.20823669 -117.44694519]
[182.42675781 -102.48254395]
[179.91043091 -87.56532288]
[172.90580750 -74.15673065]
[162.09910583 -63.57040024]
[148.54907227 -56.84346771]
[133.58319092 -54.63497543]
[131.09806824 -39.84226608]
[128.61294556 -25.04955864]
[134.13473511 -11.21629810]
[124.21802521 1.11128843]
[121.73291016 15.90399551]
[119.24778748 30.69670296]
[116.76267242 45.48941040]
[126.96306610 49.74679565]
[136.15061951 55.89189911]
[143.98019409 63.69388962]
[150.15769958 72.85968781]
[164.17440796 67.51817322]
[178.19113159 62.17666245]
[188.11703491 49.12260818]
[204.34878540 51.45980835]
[210.18853760 66.78395081]
[199.62886047 79.33087158]
[183.53263855 76.19337463]
[169.51593018 81.53488922]
[155.49920654 86.87639618]
[157.00035095 98.16915894]
[156.22700500 109.53498077]
[153.21003723 120.52032471]
[148.06983948 130.68684387]
[141.01150513 139.62887573]
[132.31669617 146.98959351]
[122.33236694 152.47529602]
[126.34010315 166.92999268]
[130.34783936 181.38467407]
[134.35559082 195.83937073]
[138.36332703 210.29405212]
[152.39097595 212.27795410]
[164.55995178 219.44729614]
[173.04180908 230.68640137]
[176.57687378 244.27102661]
[174.66119385 258.13293457]
[167.61808777 270.17471313]
[156.54414368 278.58712769]
[160.25030518 293.12207031]
[165.70410156 279.14865112]
[176.59829712 268.83767700]
[190.85032654 264.16012573]
[205.73580933 266.01019287]
[218.40919495 274.03421021]
[226.44787598 286.69833374]
[228.31517029 301.58163452]
[223.65412903 315.83908081]
[213.35574341 326.74517822]
[199.38865662 332.21514893]
[184.42282104 331.20333862]
[171.31909180 323.90316772]
[162.58297729 311.71151733]
[162.58297729 326.71151733]
[162.58297729 341.71151733]
[162.58297729 356.71151733]
[162.58297729 371.71151733]
[162.58297729 386.71151733]
[162.58297729 401.71151733]
[162.58297729 416.71151733]
[162.58297729 431.71151733]
[162.58297729 446.71151733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[36 50]
[37 49]
[38 48]
[63 96]
[64 95]
[65 94]
[66 93]
[68 91]
[69 90]
[70 89]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
