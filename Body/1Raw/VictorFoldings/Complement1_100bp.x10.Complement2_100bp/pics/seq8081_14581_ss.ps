%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Jun 17 13:31:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUAAUCCGAAUUUUUGUCUACGUUAAGGGCCUGCAGAUUUGGUUUGGUGAAAGUGGCGAUGUGCUGGCCCCCAUAUGAUGCCAGUUACGAGACUUUAxxxxxxxxxxUGAUUUGGGGGUAUUUAUCCUCUUCCGAAUCUUCUUUUGGGGUGUUUGGGGUAAUGAUUUGGGUGUGAGUUGUCUUUGUUUCGUAUGUAGUAAUAAGAGC\
) } def
/len { sequence length } bind def

/coor [
[158.68092346 705.80725098]
[145.71592712 698.25494385]
[133.21199036 689.96160889]
[121.21141815 680.95526123]
[109.75482178 671.26635742]
[98.88097382 660.92773438]
[88.62666321 649.97430420]
[79.02658844 638.44323730]
[70.11322784 626.37341309]
[61.91674423 613.80578613]
[54.46487808 600.78277588]
[47.78283691 587.34857178]
[41.89323807 573.54852295]
[36.81600189 559.42944336]
[32.56831360 545.03894043]
[29.16454124 530.42584229]
[26.61620712 515.63958740]
[24.93193436 500.73016357]
[24.11741829 485.74801636]
[24.17541695 470.74386597]
[25.10573387 455.76846313]
[26.90522194 440.87249756]
[29.56778908 426.10635376]
[33.08443069 411.52001953]
[37.44324493 397.16281128]
[42.62948227 383.08337402]
[48.62559509 369.32928467]
[55.41129303 355.94711304]
[62.96361923 342.98214722]
[71.25701141 330.47824097]
[80.26341248 318.47772217]
[89.95235443 307.02117920]
[100.29103851 296.14736938]
[111.24449158 285.89309692]
[122.77564240 276.29306030]
[134.84547424 267.37976074]
[147.41316223 259.18331909]
[160.43615723 251.73150635]
[153.75596619 238.30113220]
[147.07577515 224.87075806]
[140.39558411 211.44038391]
[133.71537781 198.01000977]
[127.03518677 184.57963562]
[120.35499573 171.14926147]
[113.67479706 157.71887207]
[109.86144257 172.22605896]
[98.32261658 181.81018066]
[83.36200714 182.89660645]
[70.55956268 175.08012390]
[64.69027710 161.27609253]
[67.94324493 146.63305664]
[79.10518646 136.61253357]
[94.01298523 134.95191956]
[107.10718536 142.27142334]
[102.07026672 128.14239502]
[97.03335571 114.01336670]
[86.50777435 104.80989838]
[88.83761597 91.02355194]
[83.80070496 76.89452362]
[71.67748260 77.44674683]
[59.83750534 74.84999847]
[49.08374023 69.28800201]
[40.14352036 61.14533234]
[33.61934280 50.98080063]
[29.94827843 39.48914337]
[29.37269783 27.45351410]
[31.92428017 15.69212627]
[37.42235947 5.00262308]
[45.48670578 -3.89201856]
[55.56380844 -10.39238071]
[51.37680054 -24.79616356]
[47.18978882 -39.19994354]
[43.00277710 -53.60372543]
[38.81576538 -68.00750732]
[34.62875366 -82.41129303]
[30.44174194 -96.81507111]
[15.53817272 -94.86981201]
[0.51232672 -95.22248077]
[-14.28356934 -97.86480713]
[-28.50267792 -102.73485565]
[-41.81167984 -109.71846771]
[-53.89859772 -118.65193939]
[-64.48009491 -129.32585144]
[-73.30812836 -141.48999023]
[-80.17575073 -154.85920715]
[-84.92198181 -169.12013245]
[-87.43555450 -183.93844604]
[-87.65755463 -198.96678162]
[-85.58277130 -213.85287476]
[-81.25984955 -228.24777222]
[-74.79012299 -241.81401062]
[-66.32524109 -254.23361206]
[-56.06364441 -265.21542358]
[-44.24587631 -274.50201416]
[-31.14895821 -281.87567139]
[-17.07990456 -287.16360474]
[-2.36851358 -290.24182129]
[12.64035988 -291.03817749]
[27.59488487 -289.53396606]
[42.14450836 -285.76449585]
[55.94816208 -279.81811523]
[68.68227386 -271.83419800]
[80.04833221 -261.99990845]
[89.77989960 -250.54579163]
[97.64886475 -237.74032593]
[103.47075653 -223.88369751]
[107.10910797 -209.30073547]
[108.47863007 -194.33328247]
[107.54721832 -179.33218384]
[104.33670044 -164.64909363]
[98.92234802 -150.62820435]
[91.43106842 -137.59820557]
[82.03847504 -125.86450195]
[70.96474457 -115.70217133]
[58.46945953 -107.34943390]
[44.84552383 -101.00208282]
[49.03253555 -86.59830475]
[53.21954727 -72.19451904]
[57.40655899 -57.79073715]
[61.59357071 -43.38695526]
[65.78057861 -28.98317528]
[69.96759033 -14.57939243]
[87.92403412 -13.26383305]
[104.03167725 -5.14395523]
[115.81309509 8.56055260]
[121.44505310 25.76884079]
[120.04065704 43.85482788]
[111.78890991 60.04795837]
[97.92973328 71.85760498]
[102.96664429 85.98663330]
[113.49222565 95.19010162]
[111.16238403 108.97644806]
[116.19929504 123.10547638]
[121.23621368 137.23451233]
[127.10517120 151.03868103]
[133.78536987 164.46905518]
[140.46556091 177.89942932]
[147.14575195 191.32981873]
[153.82595825 204.76019287]
[160.50614929 218.19056702]
[167.18634033 231.62094116]
[173.86653137 245.05131531]
[187.66648865 239.16154480]
[201.78555298 234.08413696]
[216.17594910 229.83625793]
[230.78900146 226.43231201]
[245.57525635 223.88378906]
[260.48468018 222.19934082]
[275.46679688 221.38462830]
[290.47094727 221.44244385]
[305.44638062 222.37257385]
[320.34234619 224.17187500]
[335.10852051 226.83425903]
[349.69491577 230.35072327]
[364.05215454 234.70936584]
[378.13168335 239.89543152]
[391.88583374 245.89137268]
[405.26806641 252.67689514]
[418.23312378 260.22906494]
[430.73715210 268.52230835]
[442.73779297 277.52856445]
[454.19445801 287.21734619]
[465.06838989 297.55590820]
[475.32278442 308.50921631]
[484.92297363 320.04025269]
[493.83642578 332.10998535]
[502.03302002 344.67755127]
[509.48498535 357.70046997]
[516.16711426 371.13464355]
[522.05688477 384.93463135]
[527.13421631 399.05371094]
[531.38201904 413.44412231]
[534.78588867 428.05718994]
[537.33435059 442.84344482]
[539.01873779 457.75286865]
[539.83337402 472.73501587]
[539.77551270 487.73916626]
[538.84533691 502.71456909]
[537.04595947 517.61053467]
[534.38354492 532.37670898]
[530.86700439 546.96307373]
[526.50830078 561.32031250]
[521.32220459 575.39978027]
[515.32617188 589.15393066]
[508.54058838 602.53613281]
[500.98837280 615.50115967]
[492.69509888 628.00512695]
[483.68878174 640.00573730]
[473.99993896 651.46240234]
[463.66134644 662.33630371]
[452.70797729 672.59063721]
[441.17691040 682.19073486]
[429.10714722 691.10418701]
[416.53952026 699.30072021]
[403.51660156 706.75262451]
[390.08239746 713.43475342]
[376.28240967 719.32440186]
[362.16329956 724.40167236]
[347.77285767 728.64941406]
[333.15979004 732.05328369]
[318.37350464 734.60162354]
[303.46408081 736.28601074]
[288.48193359 737.10058594]
[273.47778320 737.04260254]
[258.50238037 736.11236572]
[243.60639954 734.31292725]
[228.84025574 731.65045166]
[214.25390625 728.13385010]
[199.89669800 723.77508545]
[185.81723022 718.58892822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[38 142]
[39 141]
[40 140]
[41 139]
[42 138]
[43 137]
[44 136]
[45 135]
[54 134]
[55 133]
[56 132]
[58 130]
[59 129]
[70 122]
[71 121]
[72 120]
[73 119]
[74 118]
[75 117]
[76 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
