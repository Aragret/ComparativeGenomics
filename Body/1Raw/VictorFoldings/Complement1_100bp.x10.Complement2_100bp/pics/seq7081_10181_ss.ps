%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Jun 17 13:30:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGUGACUAAAGGGGAUAAGAGUCCGAUGUGGGAUCUGGUUUGGAUGCGGUUUUAGGUAAAGUGAUAGUAUAAGUAGCCGCAUUUAGAUUGAAAGAAGxxxxxxxxxxCUGGGAUAUAGGGGGCGGGCGCAGGGAAAGAGGUAUUUUAAGAAGAAUCAUCGAUAAUGGAAGAAUAAUAAACUAGAUCUUUAACGGGAGGAAAAUGGGG\
) } def
/len { sequence length } bind def

/coor [
[88.47315979 568.59466553]
[75.36303711 575.94482422]
[61.28452301 581.20751953]
[46.56763458 584.25933838]
[31.55735779 585.02874756]
[16.60555458 583.49774170]
[2.06271577 579.70220947]
[-11.73025322 573.73107910]
[-24.45002556 565.72430420]
[-35.79843140 555.86968994]
[-45.50944519 544.39813232]
[-53.35543060 531.57855225]
[-59.15246582 517.71154785]
[-62.76465988 503.12207031]
[-64.10733795 488.15216064]
[-63.14902115 473.15277100]
[-59.91218185 458.47546387]
[-54.47269058 444.46429443]
[-46.95805740 431.44775391]
[-37.54443741 419.73092651]
[-26.45249939 409.58847046]
[-13.94225407 401.25814819]
[-0.30695915 394.93524170]
[14.13375473 390.76797485]
[29.04137611 388.85400391]
[44.06644821 389.23822021]
[46.73224258 374.47698975]
[49.39804077 359.71578979]
[38.41361237 351.60040283]
[31.96644211 339.48580933]
[31.36503601 325.70950317]
[36.78371429 312.95739746]
[47.21748352 303.74041748]
[60.66791153 299.89999390]
[63.55318069 285.18008423]
[66.43845367 270.46020508]
[69.32373047 255.74031067]
[72.20899963 241.02041626]
[75.09427643 226.30053711]
[77.97954559 211.58064270]
[80.86481476 196.86074829]
[83.75009155 182.14085388]
[86.63536072 167.42095947]
[89.52063751 152.70108032]
[92.40590668 137.98118591]
[93.52156067 123.02272797]
[92.85176849 108.03768921]
[89.20368195 93.48806763]
[82.72418976 79.95972443]
[76.24468994 66.43138123]
[69.76519775 52.90303421]
[56.82579422 43.79905319]
[58.30623245 28.97820473]
[51.82673645 15.44985962]
[51.63082123 30.44857979]
[47.89886475 44.97691345]
[40.84192657 58.21321487]
[30.85911560 69.40890503]
[18.51500320 77.93081665]
[4.50771236 83.29698181]
[-10.37057781 85.20393372]
[-25.27842903 83.54382324]
[-39.37273026 78.41053009]
[-51.85637665 70.09436798]
[-62.02336121 59.06565475]
[-69.29869080 45.94812775]
[-73.27091217 31.48363686]
[-73.71537018 16.49022293]
[-70.60693359 1.81583619]
[-64.12140656 -11.70961666]
[-54.62556076 -23.32120514]
[-42.65644836 -32.36223602]
[-28.89096832 -38.32139969]
[-14.10763264 -40.86167145]
[0.85749120 -39.83938980]
[15.15805340 -35.31237030]
[27.98528671 -27.53663445]
[38.61375046 -16.95193863]
[46.44280243 -4.15592575]
[45.10456848 -19.09611130]
[43.76633072 -34.03629684]
[34.82869339 -47.09114838]
[41.39966965 -60.45795822]
[26.40247345 -61.47314072]
[11.74875546 -64.82202911]
[-2.20062375 -70.42214203]
[-15.10214901 -78.13558197]
[-26.63810730 -87.77239227]
[-36.52441406 -99.09526062]
[-44.51761627 -111.82535553]
[-50.42086411 -125.64917755]
[-54.08879471 -140.22631836]
[-55.43107605 -155.19778442]
[-54.41465378 -170.19488525]
[-51.06455994 -184.84832764]
[-45.46329498 -198.79725647]
[-37.74879074 -211.69813538]
[-28.11102486 -223.23330688]
[-16.78734016 -233.11868286]
[-4.05658770 -241.11082458]
[9.76772404 -247.01293945]
[24.34515953 -250.67965698]
[39.31673431 -252.02070618]
[54.31376266 -251.00305176]
[68.96692657 -247.65174866]
[82.91538239 -242.04933167]
[95.81563568 -234.33375549]
[107.35000610 -224.69503784]
[117.23444366 -213.37054443]
[125.22554016 -200.63912964]
[131.12651062 -186.81433105]
[134.79203796 -172.23658752]
[136.13185120 -157.26490784]
[135.11294556 -142.26795959]
[131.76043701 -127.61507416]
[126.15686798 -113.66708374]
[118.44023895 -100.76746368]
[108.80056763 -89.23389435]
[97.47525024 -79.35038757]
[84.74317932 -71.36034393]
[70.91789246 -65.46051025]
[56.33985519 -61.79619217]
[65.18177032 -49.80995941]
[58.70651627 -35.37453079]
[60.04475021 -20.43434525]
[61.38298416 -5.49415970]
[65.35507965 8.97036362]
[71.83457947 22.49870872]
[84.31052399 30.63505173]
[83.29354095 46.42353821]
[89.77304077 59.95188522]
[96.25253296 73.48023224]
[102.73203278 87.00857544]
[102.89656067 72.00947571]
[106.23828125 57.38645172]
[112.60517883 43.80474854]
[121.70758820 31.88224220]
[133.13140869 22.16133118]
[146.35694885 15.08424950]
[160.78253174 10.97295761]
[175.75187683 10.01449203]
[190.58398438 12.25245667]
[204.60411072 17.58503914]
[217.17439270 25.76964188]
[227.72300720 36.43391800]
[235.77003479 49.09272003]
[240.94941711 63.17015076]
[243.02549744 78.02578735]
[241.90383911 92.98379517]
[237.63548279 107.36367798]
[230.41459656 120.51125336]
[220.56968689 131.82839966]
[208.54862976 140.80024719]
[194.89830017 147.01864624]
[180.23970032 150.20071411]
[165.23970032 150.20166016]
[150.58068848 147.02145386]
[136.92958069 140.80477905]
[124.90737915 131.83445740]
[115.06103516 120.51856232]
[107.83680725 107.36790466]
[108.50659943 122.35294342]
[115.17120361 108.91482544]
[125.98213196 98.51657104]
[139.66934204 92.37975311]
[154.62484741 91.22531891]
[169.09170532 95.18888855]
[181.37036133 103.80484009]
[190.01834106 116.06095886]
[194.01966858 130.51742554]
[192.90429688 145.47589111]
[186.80323792 159.17907715]
[176.43324280 170.01712036]
[163.01257324 176.71678162]
[148.11785889 178.49101257]
[133.49894714 175.13136292]
[120.87322998 167.03251648]
[111.72397614 155.14591980]
[107.12580109 140.86645508]
[104.24052429 155.58634949]
[101.35525513 170.30624390]
[98.46997833 185.02612305]
[95.58470917 199.74601746]
[92.69944000 214.46591187]
[89.81416321 229.18580627]
[86.92889404 243.90570068]
[84.04361725 258.62557983]
[81.15834808 273.34548950]
[78.27307129 288.06536865]
[75.38780212 302.78524780]
[87.96087646 313.52349854]
[93.37200928 329.04815674]
[90.23371124 345.09085083]
[79.49547577 357.29110718]
[64.15925598 362.38156128]
[61.49346161 377.14279175]
[58.82766724 391.90399170]
[73.03801727 396.79956055]
[86.33447266 403.80700684]
[98.40535736 412.76214600]
[108.96768951 423.45501709]
[117.77389526 435.63497925]
[124.61753082 449.01647949]
[129.33818054 463.28588867]
[131.82518005 478.10870361]
[132.02021790 493.13742065]
[129.91874695 508.01974487]
[125.57002258 522.40686035]
[119.07597351 535.96148682]
[110.58883667 548.36590576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 197]
[27 196]
[28 195]
[34 190]
[35 189]
[36 188]
[37 187]
[38 186]
[39 185]
[40 184]
[41 183]
[42 182]
[43 181]
[44 180]
[45 179]
[46 162]
[47 161]
[48 133]
[49 132]
[50 131]
[51 130]
[53 128]
[54 127]
[79 126]
[80 125]
[81 124]
[83 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
