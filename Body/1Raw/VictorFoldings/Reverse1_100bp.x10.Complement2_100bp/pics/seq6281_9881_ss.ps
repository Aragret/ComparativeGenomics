%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Jun 17 13:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCUAUCUCCUCUGUGGACGAUCCACAUUCCUCUUCUACCAAUCCAGAUGCCUCCGAGGUCCCACCCUCAUCAAGGGACGAUUCCCUCCCAUCUGACAxxxxxxxxxxGUGAAAUGUAGGUUUGUAGUGAAACCGAAGCUUCGGCGGCGGACUAUGACCGUAAAACAUCUACACCAAACUGAUAAAGACAUACAGAGGUAGAUAACUA\
) } def
/len { sequence length } bind def

/coor [
[166.83650208 517.76080322]
[153.65936279 509.87039185]
[146.20684814 496.44073486]
[146.48365784 481.08432007]
[154.41531372 467.93197632]
[167.86827087 460.52160645]
[168.09159851 445.52325439]
[168.31492615 430.52493286]
[168.53825378 415.52658081]
[168.76158142 400.52825928]
[168.87324524 385.52865601]
[168.87324524 370.52865601]
[168.87324524 355.52865601]
[168.87324524 340.52865601]
[168.87324524 325.52865601]
[168.87324524 310.52865601]
[167.09077454 295.63494873]
[163.55110168 281.05856323]
[160.01142883 266.48220825]
[155.18544006 252.27973938]
[149.11160278 238.56446838]
[143.03776550 224.84921265]
[132.81976318 223.86767578]
[123.86115265 218.69287109]
[117.81196594 210.20050049]
[115.81832123 199.88406372]
[118.30576324 189.59233093]
[124.89060211 181.19805908]
[119.43524170 167.22526550]
[113.97988892 153.25247192]
[108.31710052 139.36244202]
[102.44814301 125.55826569]
[96.57917786 111.75408936]
[95.32273102 126.70137787]
[89.56681061 140.55307007]
[79.86003876 151.98890686]
[67.12759399 159.91891479]
[52.58306503 163.58724976]
[37.61273575 162.64425659]
[23.64348412 157.17982483]
[12.00677013 147.71478271]
[3.81173062 135.15129089]
[-0.16053447 120.68682098]
[0.46858534 105.70001984]
[5.63912630 91.61933899]
[14.85826588 79.78686523]
[27.24729347 71.33038330]
[41.62536621 67.05593109]
[56.62205887 67.37090302]
[70.80798340 72.24528503]
[82.83102417 81.21447754]
[91.54573059 93.42462158]
[89.54171753 78.55908966]
[87.53770447 63.69356155]
[78.02605438 51.05081558]
[83.99361420 37.40393066]
[81.98960114 22.53840256]
[79.98558807 7.67287397]
[77.98157501 -7.19265413]
[75.31578064 -21.95387077]
[71.99351501 -36.58133316]
[68.67125702 -51.20879364]
[55.58147430 -59.65244675]
[52.42060471 -74.53409576]
[60.55100632 -86.96117401]
[57.22874451 -101.58863068]
[53.90648651 -116.21609497]
[49.93439102 -130.68061829]
[45.32038116 -144.95335388]
[40.70637131 -159.22608948]
[35.98623657 -173.46406555]
[31.16024017 -187.66653442]
[26.33424187 -201.86898804]
[11.56430149 -199.10681152]
[-3.44840431 -198.47480774]
[-18.39823723 -199.98585510]
[-32.98083496 -203.60919189]
[-46.89931870 -209.27104187]
[-59.87032318 -216.85615540]
[-71.62977600 -226.21008301]
[-81.93827057 -237.14241028]
[-90.58593750 -249.43055725]
[-97.39672089 -262.82437134]
[-102.23196411 -277.05114746]
[-104.99323273 -291.82125854]
[-105.62429810 -306.83398438]
[-104.11231995 -321.78372192]
[-100.48808289 -336.36611938]
[-94.82537079 -350.28424072]
[-87.23946381 -363.25476074]
[-77.88480377 -375.01364136]
[-66.95184326 -385.32147217]
[-54.66315460 -393.96838379]
[-41.26893234 -400.77832031]
[-27.04185486 -405.61270142]
[-12.27157307 -408.37304688]
[2.74121141 -409.00317383]
[17.69085693 -407.49026489]
[32.27300644 -403.86514282]
[46.19078827 -398.20156860]
[59.16085434 -390.61486816]
[70.91915131 -381.25946045]
[81.22628784 -370.32586670]
[89.87243652 -358.03665161]
[96.68156433 -344.64199829]
[101.51504517 -330.41461182]
[104.27448273 -315.64416504]
[104.90369415 -300.63134766]
[103.38986206 -285.68179321]
[99.76382446 -271.09988403]
[94.09938812 -257.18243408]
[86.51187134 -244.21284485]
[77.15576172 -232.45512390]
[66.22151947 -222.14866638]
[53.93176651 -213.50328064]
[40.53669739 -206.69497681]
[45.36269379 -192.49252319]
[50.18869400 -178.29006958]
[55.31706619 -172.96826172]
[54.97910690 -163.84008789]
[59.59311295 -149.56735229]
[64.20712280 -135.29463196]
[71.98336792 -148.12155151]
[86.51856995 -151.82669067]
[99.48628998 -144.28758240]
[103.45803833 -129.82296753]
[96.15861511 -116.71882629]
[81.76946259 -112.48181152]
[68.53394318 -119.53835297]
[71.85620880 -104.91088867]
[75.17846680 -90.28343201]
[87.87927246 -82.58763885]
[91.45688629 -67.80064392]
[83.29872131 -54.53105164]
[86.62097931 -39.90359116]
[89.94323730 -25.27613068]
[98.83283997 -37.35814285]
[113.64063263 -39.75174713]
[125.88403320 -31.08577728]
[128.54946899 -16.32449532]
[120.11006927 -3.92383480]
[105.40028381 -0.98745579]
[92.84709930 -9.19666767]
[94.85111237 5.66886044]
[96.85512543 20.53438759]
[98.85914612 35.39991760]
[108.22745514 46.97938156]
[102.40323639 61.68954849]
[104.40724945 76.55507660]
[106.41126251 91.42060089]
[110.38335419 105.88513184]
[116.25231934 119.68930817]
[122.12127686 133.49348450]
[127.16532135 137.76773071]
[129.01580811 143.14106750]
[127.95268250 147.79711914]
[133.40805054 161.76991272]
[138.86340332 175.74270630]
[157.66621399 182.82321167]
[165.08531189 201.16607666]
[156.75303650 218.77537537]
[162.82687378 232.49064636]
[168.90069580 246.20590210]
[171.22895813 231.38769531]
[179.68466187 218.99815369]
[192.63516235 211.42947388]
[207.57989502 210.14308167]
[221.63328552 215.38734436]
[232.08183289 226.14967346]
[236.90809631 240.35203552]
[235.18020630 255.25218201]
[227.23176575 267.97311401]
[214.59751892 276.05865479]
[199.71691895 277.94757080]
[185.46319580 273.27514648]
[174.58781433 262.94253540]
[178.12748718 277.51889038]
[181.66716003 292.09527588]
[185.62246704 277.62615967]
[194.23139954 265.34255981]
[206.48257446 256.68759155]
[220.93675232 252.67800903]
[235.89585876 253.78485107]
[249.60252380 259.87808228]
[260.44647217 270.24188232]
[267.15380859 283.65872192]
[268.93655396 298.55239868]
[265.58523560 313.17324829]
[257.49362183 325.80358887]
[245.61225891 334.95962524]
[231.33697510 339.56573486]
[216.34480286 339.08078003]
[202.39703369 333.56176758]
[191.13223267 323.65701294]
[183.87324524 310.52865601]
[183.87324524 325.52865601]
[183.87324524 340.52865601]
[183.87324524 355.52865601]
[183.87324524 370.52865601]
[183.87324524 385.52865601]
[187.00265503 394.11032104]
[183.75991821 400.75158691]
[183.53659058 415.74990845]
[183.31326294 430.74826050]
[183.08993530 445.74658203]
[182.86660767 460.74493408]
[196.09295654 468.55258179]
[203.62951660 481.93524170]
[203.44897461 497.29306030]
[195.59991455 510.49487305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 206]
[7 205]
[8 204]
[9 203]
[10 202]
[11 200]
[12 199]
[13 198]
[14 197]
[15 196]
[16 195]
[17 178]
[18 177]
[19 176]
[20 163]
[21 162]
[22 161]
[28 158]
[29 157]
[30 156]
[31 153]
[32 152]
[33 151]
[52 150]
[53 149]
[54 148]
[56 146]
[57 145]
[58 144]
[59 143]
[60 136]
[61 135]
[62 134]
[65 131]
[66 130]
[67 129]
[68 122]
[69 121]
[70 120]
[71 118]
[72 117]
[73 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
